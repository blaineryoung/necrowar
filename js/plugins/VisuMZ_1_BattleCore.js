//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.86;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.86] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * ---
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 * 
 * <Under>
 * - Used for: Animation Name Tags
 * - If this tag is found in an animation's name, the animation will appear
 *   under battlers while in battle.
 * - This effect only applies to battlers in the battle scene.
 * - Under effect is NOT applied to status window portraits.
 * - Under effect is NOT applied to projectile animations.
 * 
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Status
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 * 
 * - Status
 *   - Adds a status command to view the current inputting actor's status.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * <Help Description>
 *  text
 *  text
 * </Help Description>
 *
 * - Used for: State Notetags
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - This is used as a common notetag between Battle Core's state descriptions
 *   and State Tooltips' state descriptions.
 * 
 * ---
 * 
 * <In-Battle Status Description>
 *  text
 *  text
 * </In-Battle Status Description>
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - The description used here will not be used for State Tooltips.
 * - If both <Help Description> and <In-Battle Status Description> notetags
 *   exist in the same state, priority will be given to this one for the
 *   In-Battle Status Window.
 *
 * ---
 * 
 * <Exclude From Status Listing>
 * 
 * - Used for: State Notetags
 * - Excludes the state from being displayed in the status listing.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 *   - This is NOT used for filtering out who the player can or cannot select.
 *   - This determines a final result.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 * 
 * <Popup Position: Head>
 * <Popup Position: Center>
 * <Popup Position: Base>
 * 
 * - Used for: Enemy Notetags
 * - Determines the popup starting position for this enemy.
 *   - Head makes the popups start at the top of the ennemy.
 *   - Center makes the popups start at the center of the ennemy.
 *   - Base makes the popups start at the bottom of the ennemy.
 * - If this notetag is not used, refer to the default Plugin Parameter setting
 *   found in Damage Settings.
 * 
 * ---
 * 
 * <Popup Offset X: +x>
 * <Popup Offset X: -x>
 * <Popup Offset Y: +y>
 * <Popup Offset Y: -y>
 * 
 * - Used for: Enemy Notetags
 * - Alters the popup x/y position offset for this enemy.
 * - Replace 'x' with a number representing the horizontal position x offset.
 *   - Negative: left. Positive: right.
 * - Replace 'y' with a number representing the vertical position y offset.
 *   - Negative: up. Positive: down.
 * - If these notetags are not used, refer to the default Plugin Parameter
 *   settings found in Damage Settings.
 * 
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 * 
 * <Aspect Name: name>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'name' with text for how enemy aspect should be renamed.
 * 
 * ---
 * 
 * <Aspect Color: color>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name color shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'color' with either a number from 0 to 31 representing the text
 *   color or in the format of '#rrggbb' to custom pick a hex color.
 * 
 * ---
 * 
 * <Aspect Icon: x>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect icon shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'x' with a number representing the icon index used to represent
 *   the enemy aspect.
 * 
 * ---
 * 
 * <Aspect Description>
 *  text
 *  text
 * </Aspect Description>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect description shown in the In-Battle Status and other
 *   supported plugin menus.
 * - Replace 'text' with the text you would like to appear as a description for
 *   the enemy's aspect.
 * 
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Change Battle Portrait (JS)
 * - Changes the battle portrait of the actor through JavaScript.
 * - Can be used outside of battle/action sequences.
 * 
 *   JS: Actor ID:
 *   - Enter which Actor ID to affect.
 *   - Uses JavaScript code.
 * 
 *   JS: Filename:
 *   - Enter the filename you wish to use.
 *   - Uses JavaScript code.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *     
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Status?:
 *   - Add the "Status" command to the Command Window?
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Status
 *       - Adds the status command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: In-Battle Status Window
 * ============================================================================
 *
 * Added with Battle Core version 1.84, this new window allows the player to
 * view the status of the current active party. If the actors have states and
 * buffs, the player can scroll through them and read about their effects
 * through the help window.
 * 
 * If you would like to manage which parameters can appear here, this can be
 * done through the VisuMZ_0_CoreEngine's "Parameter Settings" and adjust which
 * parameters are shown through "Extended Parameters". These settings will
 * reflect in the In-Battle Status window, too. Otherwise, the parameters that
 * will be shown will only be MaxHP, MaxMP, ATK, DEF, MAT, MDF, AGI, and LUK.
 * 
 * The In-Battle Status can also be used to view enemies (if the parameter is
 * enabled). To view enemies, players must scroll through all the actors before
 * viewing enemies. Enemies will have their battler graphic displayed. If the
 * enemy has a SV Battler graphic, that will be displayed instead. However, if
 * the enemy has a Dragonbones, then the database battler graphic is displayed
 * to match any of the turn order displays as those also use the same graphic.
 * 
 * Enemies will not display the current HP on their In-Battle Status gauges.
 * Instead, they will display what percentage their HP, MP, and/or TP is at.
 * This is primarily due to how gauges do not support large numbers well and
 * showing the percentage values are better for this scene.
 *
 * ---
 * 
 * General Settings
 * 
 *   Status Icon:
 *   - The icon used for the Status command.
 * 
 *   Status Graphic:
 *   - Choose how the actor graphic appears for In-Battle Status.
 * 
 *   Help Description:
 *   - Text displayed when selecting the Status command.
 * 
 * ---
 * 
 * Enemy Settings
 * 
 *   Allow View Enemies?:
 *   - Allows players to view enemy stats (even if limited)?
 * 
 *   Show Level?:
 *   - Shows the enemy's level in the In-Battle Status?
 * 
 *   Hidden Parameter:
 *   - The text that appears if a parameter value is hidden.
 * 
 *     Show Params Always:
 *     - Always show exact enemy parameter values.
 * 
 *     Show Battle Test:
 *     - Show exact enemy parameter values in battle test.
 * 
 *     Show If Defeated:
 *     - Show exact enemy parameter values if enemy has been defeated before.
 * 
 * ---
 * 
 * Page Buttons:
 * 
 *   Show Page Buttons?:
 *   - Shows page buttons to switch between actors?
 *   - Still requires Touch UI option to be on.
 * 
 *   Large UI Position?:
 *   - If using a large resolution, position the page buttons on which side?
 * 
 *  Offset X
 *  - Offsets the page buttons x position.
 *  - Negative: left. Positive: right.
 * 
 *  Offset Y
 *  - Offsets the page buttons y position.
 *  - Negative: up. Positive: down.
 * 
 * ---
 * 
 * Parameter Display
 * 
 *   Increased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 *   Decreased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 * ---
 * 
 * States Display
 * 
 *   Max Width
 *   - Maximum width of the states list display.
 * 
 *   List States?
 *   - Lists states in the states list display?
 * 
 *   List Buffs?
 *   - Lists buffs in the states list display?
 * 
 *   List Debuffs?
 *   - Lists debuffs in the states list display?
 * 
 *   Buffs/Debuffs Display:
 * 
 *     Buff Name Format
 *     - Text format used to represent buffs.
 *     - %1 - Parameter Name
 * 
 *     Debuff Name Format
 *     - Text format used to represent debuffs.
 *     - %1 - Parameter Name
 * 
 *   Normal State:
 * 
 *     Normal Icon
 *     - Icon used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 *     Normal Text
 *     - Text used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 * ---
 * 
 * Help Descriptions
 * 
 *   State Help Format:
 *   - Text format used for state help descriptions
 *   - %1 - Description; %2 - Turns/Actions Remaining
 * 
 *   Buff Help Format:
 *   - Text format used for Buff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Debuff Help Format:
 *   - Text format used for Debuff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Normal State:
 *   - Help description used to explain normal state (unaffected by states,
 *     buffs, or debuffs).
 * 
 *   Turns/Actions Left:
 * 
 *     Actions Format:
 *     - Text format used to represent actions remaining.
 *     - %1 - Actions; %2 - Color
 * 
 *     Turns Format:
 *     - Text format used to represent turns remaining.
 *     - %1 - Turns; %2 - Color
 * 
 *     Passive Text:
 *     - Text used to represent a passive.
 * 
 * ---
 * 
 * Window Settings
 * 
 *   Background Type:
 *   - Select background type for this window.
 * 
 *   JS: Draw Data:
 *   - Code used to draw battler data.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 * 
 * Frontview Battlers
 * 
 *   Portrait Animations:
 * 
 *     Each Target:
 *     - Place animations on top for "Each Target" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of All:
 *     - Place animations on top for "Center of All" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of Screen:
 *     - Place animations on top for "Center of Screen" display types?
 *     - Does not apply to MV animations.
 * 
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 * 
 * Aspect Defaults
 * 
 *   Name Format:
 *   - Default name aspect format.
 *   - %1 - Original Enemy Name
 * 
 *   Name Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Icon:
 *   - Default icon used for aspect.
 *   - Use <Aspect Icon: x> to change icon.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.86: January 16, 2025
 * * Bug Fixes!
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetag added by Irina:
 * *** <Under>
 * **** If this tag is found in an animation's name, the animation will appear
 *      under battlers while in battle.
 * ***** This effect only applies to battlers in the battle scene.
 * ***** Under effect is NOT applied to status window portraits.
 * ***** Under effect is NOT applied to projectile animations.
 * ** Added new Action Sequence Projectile settings:
 * *** Extra Settings > End Animation ID:
 * **** Plays an animation when projectile reaches target.
 * **** Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 * Version 1.85: October 17, 2024
 * * Bug Fixes!
 * ** Fixed a bug where the enemy name's visibility would remain after an
 *    action has taken place and before inputting is done. Fix made by Olivia.
 * ** Fixed a bug where the "Name Visibility As Target" plugin parameter did
 *    not work properly. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Updated <Help Description> notetag documentation:
 * *** This is used as a common notetag between Battle Core's state
 *     descriptions and State Tooltips' state descriptions.
 * * New Features!
 * ** New Notetag added by Olivia:
 * *** <In-Battle Status Description>
 * **** A prioritized help description used to separate from the common help
 *      description notetag shared with State Tooltips.
 * ** New Plugin Parameters added by Olivia:
 * *** Actor Battlers > Frontview > Portrait Animations > Each Target
 * *** Actor Battlers > Frontview > Portrait Animations > Center of All
 * *** Actor Battlers > Frontview > Portrait Animations > Center of Screen
 * **** Place animations on top or behind for these display types?
 * *** Battle Log > Action Changes > Show Counter? > Wait Frames
 * *** Battle Log > Action Changes > Show Reflect? > Wait Frames
 * *** Battle Log > Action Changes > Show Substitute? > Wait Frames
 * **** If devs allow the results of counters, reflects, and substitutes, there
 *      wasn't enough time before to allow the text to be visible on screen.
 *      You can now adjust how many frames are now visible if text is shown.
 * **** Default values are left at 0 as to not interrupt currently existing
 *      action sequences.
 * 
 * Version 1.84: September 19, 2024
 * * Bug Fixes!
 * ** Fixed a bug where Action Sequence "MOVE: Change Home By Distance" would
 *    also be affected by the actor and enemy position offsets. Fixed by Irina.
 * ** Fixed a bug where Action Sequence "MECH: STB Exploit Effect" caused a
 *    crash. Fix made by Arisu.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Command added by Arisu:
 * *** ANIM: Change Battle Portrait (JS)
 * **** Changes the battle portrait of the actor through JavaScript.
 * **** Can be used outside of battle/action sequences.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > In-Battle Status Window
 * **** This new window allows the player to view the status of the current
 *      active party. If the actors have states and buffs, the player can
 *      scroll through them and read about their effects through the help
 *      window.
 * ** New Notetags added by Olivia:
 * *** <Help Description>
 * **** Assigns a help description for the state that's displayed under the
 *      new "Status" actor command.
 * *** <Exclude From Status Listing>
 * **** Excludes the state from being displayed in the status listing.
 * *** <Aspect Name: x>
 * *** <Aspect Icon: x>
 * *** <Aspect Color: x>
 * *** <Aspect Description>
 * **** Used to define enemy aspect that will show up in the In-Battle Status
 *      as well as other supported plugins.
 * *** <Popup Position: Head>
 * *** <Popup Position: Center>
 * *** <Popup Position: Base>
 * **** Changes the popup starting position for this enemy.
 * *** <Popup Offset X: +x>
 * *** <Popup Offset X: -x>
 * *** <Popup Offset Y: +y>
 * *** <Popup Offset Y: -y>
 * **** Changes the popup X/Y position offset for this enemy.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Party Command Window > Add Status?
 * **** Add the "Status" command to the Command Window? 
 * *** Plugin Parameters > Actor Command Window > Command List
 * **** Updated to have the "Status" command.
 * *** Plugin Parameters > In-Battle Status Window
 * **** Completely new! View the help file for more information.
 * *** Plugin Parameters > Enemy > Aspects
 * **** Used for the In-Battle Status as well as other supported plugins.
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait_JS
 * @text ANIM: Change Battle Portrait (JS)
 * @desc Changes the battle portrait of the actor through JavaScript.
 * Can be used outside of battle/action sequences.
 *
 * @arg ActorJS:func
 * @text JS: Actor ID
 * @type note
 * @desc Enter which Actor ID to affect.
 * Uses JavaScript code.
 * @default "// Get Actor ID here.\nlet actorID = 0;\nactorID = $gameParty.members()[0].actorId();\n\n// Return Actor ID\nreturn actorID;"
 *
 * @arg FilenameJS:func
 * @text JS: Filename
 * @type note
 * @desc Enter the filename you wish to use.
 * Uses JavaScript code.
 * @default "// Get Filename here.\nlet filename = 'Actor1_';\nfilename += String(Math.randomInt(8) + 1);\n\n// Return Filename\nreturn filename;"
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","ShowCosts:eval":"true","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat.","HelpParty:str":"Automatically choose an action suitable for combat."}
 *
 * @param InBattleStatus:struct
 * @text In-Battle Status Window
 * @type struct<InBattleStatus>
 * @desc Settings that alter the In-Battle Status window accessed
 * through the "Status" command.
 * @default {"General":"","CmdIconStatus:num":"87","StatusGraphic:str":"face","HelpStatus:str":"View battle member status.","Enemy":"","enemyStatus:eval":"true","enemyShowLevel:eval":"true","enemyHiddenParameter:str":"???","enemyShowParametersAlways:eval":"false","enemyShowParametersIfBattleTest:eval":"true","enemyShowParametersIfDefeated:eval":"true","PageButtons":"","pageOffsetX:num":"+0","pageOffsetY:num":"+0","pageButtons:eval":"true","Parameters":"","buffValueFmt:str":"▲%1","debuffValueFmt:str":"▼%1","States":"","statesMaxWidth:num":"384","drawStates:eval":"true","drawBuffs:eval":"true","drawDebuffs:eval":"true","BuffsDebuffs":"","buffNameFmt:str":"%1▲","debuffNameFmt:str":"%1▼","NormalState":"","normalIcon:num":"84","normalText:str":"Normal","HelpDesc":"","stateHelpFmt:json":"\"%1 %2\"","buffHelpFmt:json":"\"Increases %1 to %3%2\\\\C[0]. %4\"","debuffHelpFmt:json":"\"Decreases %1 to %3%2\\\\C[0]. %4\"","normalHelp:json":"\"Status is currently normal.\"","TurnHelpDesc":"","actionsFmt:str":"\\C[6](Actions %2%1\\C[6])\\C[0]","TurnsFmt:str":"\\C[5](Turns %2%1\\C[5])\\C[0]","passiveText:str":"\\C[4](Passive)\\C[0]","Window":"","StatusWindow_BgType:num":"0","StatusWindow_DrawJS:func":"\"{ // Draw Face and Simple Status\\n    const x = this.colSpacing() / 2;\\n    const h = ImageManager.faceHeight;\\n    const y = h / 2 - this.lineHeight() * 1.5;\\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\\n}\\n{ // Draw Actor Parameters\\n    let maxWidth = this.drawingAreaWidth();\\n    let x1 = 0;\\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\\n\\n    let counter = 0;\\n    const params = this.displayedParams();\\n\\n    let px = x1;\\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\\n    let pw = Math.floor(maxWidth / 2);\\n\\n    if (this._statesWindow.y !== 0) {\\n        this._statesWindow.y = py;\\n    }\\n\\n    for (const param of params) {\\n        this.drawDarkRect(px, py, pw, this.lineHeight());\\n        this.drawParamData(param, px, py, pw);\\n        counter++;\\n        if (counter % 2 === 0) {\\n            px = x1;\\n            py += this.lineHeight();\\n        } else {\\n            px = x2;\\n        }\\n    }\\n}\"","StatusWindow_RectJS:func":"\"const wx = Graphics.boxWidth > 1000 ? 120 : 0;\\nconst wy = this._helpWindow.y + this._helpWindow.height;\\nconst ww = Graphics.boxWidth - (wx * 2);\\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\\nreturn new Rectangle(wx, wy, ww, wh);\""}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowCounterWait:eval
 * @text Wait Frames
 * @parent ShowCounter:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowReflectWait:eval
 * @text Wait Frames
 * @parent ShowReflect:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ShowSubstituteWait:eval
 * @text Wait Frames
 * @parent ShowSubstitute:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddStatus:eval
 * @text Add Status?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Status" command to the Command Window?
 * @default true
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent CommandAddStatus:eval
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option status
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * In_Battle Status Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~InBattleStatus:
 *
 * @param General
 * @text General Settings
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent General
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param StatusGraphic:str
 * @text Status Graphic
 * @parent General
 * @type select
 * @option None
 * @value none
 * @option Face
 * @value face
 * @option Map Sprite
 * @value sprite
 * @option Sideview Battler
 * @value svbattler
 * @desc Choose how the actor graphic appears for In-Battle Status.
 * @default face
 *
 * @param HelpStatus:str
 * @text Help Description
 * @parent General
 * @desc Text displayed when selecting the Status command.
 * @default View battle member status.
 *
 * @param Enemy
 * @text Enemy Settings
 *
 * @param enemyStatus:eval
 * @text Allow View Enemies?
 * @parent Enemy
 * @type boolean
 * @on Allow
 * @off Forbid
 * @desc Allows players to view enemy stats (even if limited)?
 * @default true
 *
 * @param enemyShowLevel:eval
 * @text Show Level?
 * @parent Enemy
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the enemy's level in the In-Battle Status?
 * @default true
 *
 * @param enemyHiddenParameter:str
 * @text Hidden Parameter
 * @parent Enemy
 * @desc The text that appears if a parameter value is hidden.
 * @default ???
 *
 * @param enemyShowParametersAlways:eval
 * @text Show Params Always
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Always show exact enemy parameter values.
 * @default false
 *
 * @param enemyShowParametersIfBattleTest:eval
 * @text Show Battle Test
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values in battle test.
 * @default true
 *
 * @param enemyShowParametersIfDefeated:eval
 * @text Show If Defeated
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values if enemy has been defeated before.
 * @default true
 *
 * @param PageButtons
 * @text Page Buttons
 *
 * @param pageButtons:eval
 * @text Show Page Buttons?
 * @parent PageButtons
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows page buttons to switch between actors?
 * Still requires Touch UI option to be on.
 * @default true
 *
 * @param pageButtonPosition:str
 * @text Large UI Position?
 * @parent pageButtons:eval
 * @type select
 * @option left
 * @option right
 * @desc If using a large resolution, position the page buttons on which side?
 * @default left
 *
 * @param pageOffsetX:num
 * @text Offset X
 * @parent PageButtons
 * @desc Offsets the page buttons x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param pageOffsetY:num
 * @text Offset Y
 * @parent PageButtons
 * @desc Offsets the page buttons y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param Parameters
 * @text Parameter Display
 *
 * @param buffValueFmt:str
 * @text Increased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▲%1
 *
 * @param debuffValueFmt:str
 * @text Decreased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▼%1
 *
 * @param States
 * @text States Display
 *
 * @param statesMaxWidth:num
 * @text Max Width
 * @parent States
 * @desc Maximum width of the states list display.
 * @default 384
 *
 * @param drawStates:eval
 * @text List States?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists states in the states list display?
 * @default true
 *
 * @param drawBuffs:eval
 * @text List Buffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists buffs in the states list display?
 * @default true
 *
 * @param drawDebuffs:eval
 * @text List Debuffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists debuffs in the states list display?
 * @default true
 *
 * @param BuffsDebuffs
 * @text Buffs/Debuffs Display
 * @parent States
 *
 * @param buffNameFmt:str
 * @text Buff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent buffs.
 * %1 - Parameter Name
 * @default %1▲
 *
 * @param debuffNameFmt:str
 * @text Debuff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent debuffs.
 * %1 - Parameter Name
 * @default %1▼
 *
 * @param NormalState
 * @text Normal State
 * @parent States
 *
 * @param normalIcon:num
 * @text Normal Icon
 * @parent NormalState
 * @desc Icon used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default 84
 *
 * @param normalText:str
 * @text Normal Text
 * @parent NormalState
 * @desc Text used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default Normal
 *
 * @param HelpDesc
 * @text Help Descriptions
 *
 * @param stateHelpFmt:json
 * @text State Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for state help descriptions
 * %1 - Description; %2 - Turns/Actions Remaining
 * @default "%1 %2"
 *
 * @param buffHelpFmt:json
 * @text Buff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Buff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Increases %1 to %3%2\\C[0]. %4"
 *
 * @param debuffHelpFmt:json
 * @text Debuff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Debuff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Decreases %1 to %3%2\\C[0]. %4"
 *
 * @param normalHelp:json
 * @text Normal State
 * @parent HelpDesc
 * @type note
 * @desc Help description used to explain normal state (unaffected by states, buffs, or debuffs).
 * @default "Status is currently normal."
 *
 * @param TurnHelpDesc
 * @text Turns/Actions Left
 * @parent HelpDesc
 *
 * @param actionsFmt:str
 * @text Actions Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent actions remaining.
 * %1 - Actions; %2 - Color
 * @default \C[6](Actions %2%1\C[6])\C[0]
 *
 * @param TurnsFmt:str
 * @text Turns Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent turns remaining.
 * %1 - Turns; %2 - Color
 * @default \C[5](Turns %2%1\C[5])\C[0]
 *
 * @param passiveText:str
 * @text Passive Text
 * @parent TurnHelpDesc
 * @desc Text used to represent a passive.
 * @default \C[4](Passive)\C[0]
 *
 * @param Window
 * @text Window Settings
 *
 * @param StatusWindow_BgType:num
 * @text Background Type
 * @parent Window
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for this window.
 * @default 0
 *
 * @param StatusWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Window
 * @type note
 * @desc Code used to draw battler data.
 * @default "{ // Draw Face and Simple Status\n    const x = this.colSpacing() / 2;\n    const h = ImageManager.faceHeight;\n    const y = h / 2 - this.lineHeight() * 1.5;\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\n}\n{ // Draw Actor Parameters\n    let maxWidth = this.drawingAreaWidth();\n    let x1 = 0;\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\n\n    let counter = 0;\n    const params = this.displayedParams();\n\n    let px = x1;\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\n    let pw = Math.floor(maxWidth / 2);\n\n    if (this._statesWindow.y !== 0) {\n        this._statesWindow.y = py;\n    }\n\n    for (const param of params) {\n        this.drawDarkRect(px, py, pw, this.lineHeight());\n        this.drawParamData(param, px, py, pw);\n        counter++;\n        if (counter % 2 === 0) {\n            px = x1;\n            py += this.lineHeight();\n        } else {\n            px = x2;\n        }\n    }\n}"
 *
 * @param StatusWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Window
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const wx = Graphics.boxWidth > 1000 ? 120 : 0;\nconst wy = this._helpWindow.y + this._helpWindow.height;\nconst ww = Graphics.boxWidth - (wx * 2);\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param FvBattlers
 * @text Frontview Battlers
 * 
 * @param FvPortraitAni
 * @text Portrait Animations
 * @parent FvBattlers
 *
 * @param FvAniEachTarget:eval
 * @text Each Target
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Each Target" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterAll:eval
 * @text Center of All
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of All" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterScreen:eval
 * @text Center of Screen
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of Screen" display types?
 * Does not apply to MV animations.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 * @param Aspect
 * @text Aspect Defaults
 *
 * @param AspectNameFmt:str
 * @text Name Format
 * @parent Aspect
 * @desc Default name aspect format.
 * %1 - Original Enemy Name
 * @default %1 Aspect
 *
 * @param AspectColor:str
 * @text Name Color
 * @parent Aspect
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 2
 *
 * @param AspectIcon:num
 * @text Icon
 * @parent Aspect
 * @desc Default icon used for aspect.
 * Use <Aspect Icon: x> to change icon.
 * @default 26
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x58cf34=_0x16bc;(function(_0x430cad,_0x483785){const _0x3576b3=_0x16bc,_0x2317e9=_0x430cad();while(!![]){try{const _0x2185ba=parseInt(_0x3576b3(0x82e))/0x1*(parseInt(_0x3576b3(0x498))/0x2)+-parseInt(_0x3576b3(0x290))/0x3+-parseInt(_0x3576b3(0x46a))/0x4+parseInt(_0x3576b3(0xb56))/0x5+parseInt(_0x3576b3(0x499))/0x6+-parseInt(_0x3576b3(0xbde))/0x7+parseInt(_0x3576b3(0x63d))/0x8;if(_0x2185ba===_0x483785)break;else _0x2317e9['push'](_0x2317e9['shift']());}catch(_0x4367ac){_0x2317e9['push'](_0x2317e9['shift']());}}}(_0x3613,0x5c062));var label=_0x58cf34(0xa6b),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x58cf34(0x8b3)](function(_0x1c4f40){const _0x31eac1=_0x58cf34;return _0x1c4f40['status']&&_0x1c4f40[_0x31eac1(0x3c2)][_0x31eac1(0x375)]('['+label+']');})[0x0];VisuMZ[label][_0x58cf34(0xb05)]=VisuMZ[label][_0x58cf34(0xb05)]||{},VisuMZ[_0x58cf34(0x1e7)]=function(_0x857042,_0x3c1043){const _0x55966d=_0x58cf34;for(const _0x31ea10 in _0x3c1043){if(_0x31ea10['match'](/(.*):(.*)/i)){const _0x5152cd=String(RegExp['$1']),_0x2408a1=String(RegExp['$2'])[_0x55966d(0x6f5)]()[_0x55966d(0x989)]();let _0x5ebb21,_0x361642,_0x5001fb;switch(_0x2408a1){case _0x55966d(0x760):_0x5ebb21=_0x3c1043[_0x31ea10]!==''?Number(_0x3c1043[_0x31ea10]):0x0;break;case _0x55966d(0xbee):_0x361642=_0x3c1043[_0x31ea10]!==''?JSON[_0x55966d(0xaab)](_0x3c1043[_0x31ea10]):[],_0x5ebb21=_0x361642[_0x55966d(0x5a0)](_0x5b5156=>Number(_0x5b5156));break;case _0x55966d(0x74f):_0x5ebb21=_0x3c1043[_0x31ea10]!==''?eval(_0x3c1043[_0x31ea10]):null;break;case _0x55966d(0x200):_0x361642=_0x3c1043[_0x31ea10]!==''?JSON[_0x55966d(0xaab)](_0x3c1043[_0x31ea10]):[],_0x5ebb21=_0x361642[_0x55966d(0x5a0)](_0x2bb3b3=>eval(_0x2bb3b3));break;case'JSON':_0x5ebb21=_0x3c1043[_0x31ea10]!==''?JSON[_0x55966d(0xaab)](_0x3c1043[_0x31ea10]):'';break;case _0x55966d(0x30b):_0x361642=_0x3c1043[_0x31ea10]!==''?JSON[_0x55966d(0xaab)](_0x3c1043[_0x31ea10]):[],_0x5ebb21=_0x361642['map'](_0x4f19e3=>JSON[_0x55966d(0xaab)](_0x4f19e3));break;case _0x55966d(0x5fd):_0x5ebb21=_0x3c1043[_0x31ea10]!==''?new Function(JSON[_0x55966d(0xaab)](_0x3c1043[_0x31ea10])):new Function(_0x55966d(0x337));break;case _0x55966d(0x4bf):_0x361642=_0x3c1043[_0x31ea10]!==''?JSON[_0x55966d(0xaab)](_0x3c1043[_0x31ea10]):[],_0x5ebb21=_0x361642[_0x55966d(0x5a0)](_0x32fc93=>new Function(JSON[_0x55966d(0xaab)](_0x32fc93)));break;case _0x55966d(0x734):_0x5ebb21=_0x3c1043[_0x31ea10]!==''?String(_0x3c1043[_0x31ea10]):'';break;case'ARRAYSTR':_0x361642=_0x3c1043[_0x31ea10]!==''?JSON[_0x55966d(0xaab)](_0x3c1043[_0x31ea10]):[],_0x5ebb21=_0x361642['map'](_0x1e91de=>String(_0x1e91de));break;case _0x55966d(0x808):_0x5001fb=_0x3c1043[_0x31ea10]!==''?JSON[_0x55966d(0xaab)](_0x3c1043[_0x31ea10]):{},_0x857042[_0x5152cd]={},VisuMZ[_0x55966d(0x1e7)](_0x857042[_0x5152cd],_0x5001fb);continue;case'ARRAYSTRUCT':_0x361642=_0x3c1043[_0x31ea10]!==''?JSON['parse'](_0x3c1043[_0x31ea10]):[],_0x5ebb21=_0x361642[_0x55966d(0x5a0)](_0x381d1d=>VisuMZ['ConvertParams']({},JSON['parse'](_0x381d1d)));break;default:continue;}_0x857042[_0x5152cd]=_0x5ebb21;}}return _0x857042;},(_0x1df5c0=>{const _0x3de638=_0x58cf34,_0x14f9da=_0x1df5c0[_0x3de638(0xc22)];for(const _0x5c5e80 of dependencies){if(!Imported[_0x5c5e80]){alert(_0x3de638(0x754)[_0x3de638(0x1d3)](_0x14f9da,_0x5c5e80)),SceneManager['exit']();break;}}const _0x391ed7=_0x1df5c0[_0x3de638(0x3c2)];if(_0x391ed7[_0x3de638(0xcbb)](/\[Version[ ](.*?)\]/i)){const _0x3afa9b=Number(RegExp['$1']);_0x3afa9b!==VisuMZ[label][_0x3de638(0x7d2)]&&(alert('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'[_0x3de638(0x1d3)](_0x14f9da,_0x3afa9b)),SceneManager[_0x3de638(0xcb5)]());}if(_0x391ed7[_0x3de638(0xcbb)](/\[Tier[ ](\d+)\]/i)){const _0xd87bc1=Number(RegExp['$1']);_0xd87bc1<tier?(alert(_0x3de638(0x29c)['format'](_0x14f9da,_0xd87bc1,tier)),SceneManager['exit']()):tier=Math['max'](_0xd87bc1,tier);}VisuMZ['ConvertParams'](VisuMZ[label][_0x3de638(0xb05)],_0x1df5c0[_0x3de638(0xbce)]);})(pluginData),VisuMZ[_0x58cf34(0x2af)]=function(_0x5d07bf){const _0x5a6019=_0x58cf34;let _0x22ff7f=[];for(const _0x101425 of _0x5d07bf){_0x22ff7f=_0x22ff7f[_0x5a6019(0xb59)](VisuMZ[_0x5a6019(0x638)](_0x101425));}return _0x22ff7f[_0x5a6019(0x8b3)](_0x495cbc=>_0x495cbc);},VisuMZ[_0x58cf34(0x638)]=function(_0xe328a4){const _0x28d1ea=_0x58cf34,_0x57e96a=BattleManager[_0x28d1ea(0xa58)]()['filter'](_0x15000f=>_0x15000f&&_0x15000f[_0x28d1ea(0x4a7)]()),_0x4a3eee=BattleManager[_0x28d1ea(0x6f1)],_0x24d532=BattleManager[_0x28d1ea(0xb2a)],_0x4d3b28=BattleManager[_0x28d1ea(0x779)]?BattleManager['_allTargets'][_0x28d1ea(0x2c3)](0x0):_0x57e96a;_0xe328a4=_0xe328a4[_0x28d1ea(0x5b9)]()['trim']();if(_0xe328a4==='user')return[_0x4a3eee];else{if(_0xe328a4===_0x28d1ea(0x7e1))return[_0x24d532];else{if(_0xe328a4===_0x28d1ea(0x263)){if(_0x24d532){const _0x5c50c3=_0x4d3b28[_0x28d1ea(0xccf)](_0x24d532);return _0x5c50c3>=0x0?[_0x4d3b28[_0x5c50c3-0x1]||_0x24d532]:[_0x24d532];}}else{if(_0xe328a4===_0x28d1ea(0x1eb)){if(_0x24d532){const _0x18cb29=_0x4d3b28['indexOf'](_0x24d532);return _0x18cb29>=0x0?[_0x4d3b28[_0x18cb29+0x1]||_0x24d532]:[_0x24d532];}}else{if(_0xe328a4===_0x28d1ea(0xa90))return _0x4d3b28;else{if(_0xe328a4==='focus')return[_0x4a3eee][_0x28d1ea(0xb59)](_0x4d3b28);else{if(_0xe328a4==='not\x20focus')return _0x57e96a[_0x28d1ea(0x8b3)](_0xafe6b5=>_0xafe6b5!==_0x4a3eee&&!_0x4d3b28[_0x28d1ea(0x375)](_0xafe6b5)&&_0xafe6b5['notFocusValid']());else{if(_0xe328a4==='special')return[VisuMZ[_0x28d1ea(0x90b)]()];else{if(_0xe328a4[_0x28d1ea(0xcbb)](/SPECIAL (.*)>/i)){const _0x14d31d=String(RegExp['$1'])[_0x28d1ea(0x69d)](',')[_0x28d1ea(0x5a0)](_0x4c79b1=>_0x4c79b1[_0x28d1ea(0x989)]());return[VisuMZ['GetActionSequenceSpecialTargetWithFlags'](_0x14d31d)];}}}}}}}}}if(_0x4a3eee){if(_0xe328a4==='alive\x20friends')return _0x4a3eee['friendsUnit']()['aliveMembers']();else{if(_0xe328a4===_0x28d1ea(0x542))return _0x4a3eee[_0x28d1ea(0x8d8)]()[_0x28d1ea(0x565)]()[_0x28d1ea(0x8b3)](_0x493eff=>_0x493eff!==_0x4a3eee);else{if(_0xe328a4===_0x28d1ea(0x1f2))return _0x4a3eee[_0x28d1ea(0x8d8)]()['aliveMembers']()[_0x28d1ea(0x8b3)](_0x2110b6=>_0x2110b6!==_0x24d532);else{if(_0xe328a4===_0x28d1ea(0x3fe))return _0x4a3eee[_0x28d1ea(0x8d8)]()[_0x28d1ea(0xb33)]();else{if(_0xe328a4['match'](/FRIEND INDEX (\d+)/i)){const _0xf712c6=Number(RegExp['$1']);return[_0x4a3eee[_0x28d1ea(0x8d8)]()[_0x28d1ea(0x7b4)]()[_0xf712c6]];}}}}}if(_0xe328a4==='alive\x20opponents')return _0x4a3eee[_0x28d1ea(0x907)]()[_0x28d1ea(0x565)]();else{if(_0xe328a4===_0x28d1ea(0x20e))return _0x4a3eee[_0x28d1ea(0x907)]()[_0x28d1ea(0x565)]()[_0x28d1ea(0x8b3)](_0x122b82=>_0x122b82!==_0x24d532);else{if(_0xe328a4===_0x28d1ea(0x71b))return _0x4a3eee[_0x28d1ea(0x907)]()[_0x28d1ea(0xb33)]();else{if(_0xe328a4['match'](/OPPONENT INDEX (\d+)/i)){const _0x10d70b=Number(RegExp['$1']);return[_0x4a3eee['opponentsUnit']()[_0x28d1ea(0x7b4)]()[_0x10d70b]];}}}}}if(_0xe328a4===_0x28d1ea(0x98e))return $gameParty['aliveMembers']();else{if(_0xe328a4===_0x28d1ea(0x8e3))return $gameParty[_0x28d1ea(0x565)]()[_0x28d1ea(0x8b3)](_0x2e4049=>_0x2e4049!==_0x4a3eee);else{if(_0xe328a4==='alive\x20actors\x20not\x20target')return $gameParty['aliveMembers']()[_0x28d1ea(0x8b3)](_0x1f7e88=>_0x1f7e88!==_0x24d532);else{if(_0xe328a4===_0x28d1ea(0xac9))return $gameParty[_0x28d1ea(0xb33)]();else{if(_0xe328a4['match'](/ACTOR INDEX (\d+)/i)){const _0x12c9e4=Number(RegExp['$1']);return[$gameParty[_0x28d1ea(0x7b4)]()[_0x12c9e4]];}else{if(_0xe328a4[_0x28d1ea(0xcbb)](/ACTOR ID (\d+)/i)){const _0x35cc5c=Number(RegExp['$1']);return[$gameActors[_0x28d1ea(0x2fd)](_0x35cc5c)];}}}}}}if(_0xe328a4===_0x28d1ea(0x834))return $gameTroop['aliveMembers']();else{if(_0xe328a4===_0x28d1ea(0x414))return $gameTroop['aliveMembers']()[_0x28d1ea(0x8b3)](_0x16d14a=>_0x16d14a!==_0x4a3eee);else{if(_0xe328a4===_0x28d1ea(0x37b))return $gameTroop[_0x28d1ea(0x565)]()['filter'](_0x4a6174=>_0x4a6174!==_0x24d532);else{if(_0xe328a4===_0x28d1ea(0x574))return $gameTroop[_0x28d1ea(0xb33)]();else{if(_0xe328a4[_0x28d1ea(0xcbb)](/ENEMY INDEX (\d+)/i)){const _0x273b36=Number(RegExp['$1']);return[$gameTroop['members']()[_0x273b36]];}else{if(_0xe328a4[_0x28d1ea(0xcbb)](/ENEMY ID (\d+)/i)){const _0x51a35e=Number(RegExp['$1']);return $gameTroop[_0x28d1ea(0x565)]()['filter'](_0x42088e=>_0x42088e[_0x28d1ea(0x5e6)]()===_0x51a35e);}}}}}}if(_0xe328a4===_0x28d1ea(0x62e))return _0x57e96a['filter'](_0x29bcea=>_0x29bcea[_0x28d1ea(0x328)]());else{if(_0xe328a4==='alive\x20battlers\x20not\x20user')return _0x57e96a[_0x28d1ea(0x8b3)](_0xe74c86=>_0xe74c86[_0x28d1ea(0x328)]()&&_0xe74c86!==_0x4a3eee);else{if(_0xe328a4===_0x28d1ea(0xa3f))return _0x57e96a[_0x28d1ea(0x8b3)](_0x34a1d1=>_0x34a1d1[_0x28d1ea(0x328)]()&&_0x34a1d1!==_0x24d532);else{if(_0xe328a4===_0x28d1ea(0xa25))return _0x57e96a['filter'](_0x8e6e58=>_0x8e6e58[_0x28d1ea(0xc87)]());}}}return[];},VisuMZ[_0x58cf34(0x90b)]=function(){const _0x208fce=_0x58cf34;return BattleManager[_0x208fce(0xb2a)];},VisuMZ[_0x58cf34(0xa2f)]=function(_0x1c8468){const _0x26b5b9=_0x58cf34;return BattleManager[_0x26b5b9(0xb2a)];},PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0xc26),_0x4b8baa=>{const _0x20c348=_0x58cf34;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x20c348(0x1e7)](_0x4b8baa,_0x4b8baa);const _0x51a63c=$gameTemp[_0x20c348(0x20b)](),_0xbf3358=BattleManager[_0x20c348(0x5fc)],_0x4cb7ef=BattleManager[_0x20c348(0x6f1)],_0x4374df=BattleManager[_0x20c348(0x779)]?BattleManager[_0x20c348(0x779)]['slice'](0x0):[],_0x2a8296=BattleManager['_logWindow'];if(!_0x51a63c||!_0xbf3358||!_0x4cb7ef)return;if(!_0xbf3358[_0x20c348(0xb8a)]())return;if(_0x4b8baa[_0x20c348(0xae2)])_0x2a8296['displayAction'](_0x4cb7ef,_0xbf3358[_0x20c348(0xb8a)]());_0x4b8baa[_0x20c348(0x812)]&&_0x2a8296[_0x20c348(0x6db)](_0x20c348(0x8dd),_0x4cb7ef,_0x4374df,!![]);if(_0x4b8baa[_0x20c348(0x4ff)])_0x2a8296[_0x20c348(0x6db)](_0x20c348(0xb8b),_0x4cb7ef,_0xbf3358);if(_0x4b8baa[_0x20c348(0x831)])_0x2a8296['push'](_0x20c348(0x47a));if(_0x4b8baa[_0x20c348(0x54b)])_0x2a8296['push'](_0x20c348(0x52a),_0x4cb7ef,_0xbf3358);if(_0x4b8baa['WaitForAnimation'])_0x2a8296[_0x20c348(0x6db)](_0x20c348(0x5a2));_0x51a63c[_0x20c348(0x9d6)](_0x20c348(0x738));}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x647),_0x48c4b9=>{const _0x927e58=_0x58cf34;if(!SceneManager[_0x927e58(0x3d3)]())return;VisuMZ['ConvertParams'](_0x48c4b9,_0x48c4b9);const _0x23de90=$gameTemp[_0x927e58(0x20b)](),_0x2faea7=BattleManager[_0x927e58(0x5fc)],_0x47e2d9=BattleManager[_0x927e58(0x6f1)],_0x5665fd=BattleManager['_allTargets']?BattleManager['_allTargets'][_0x927e58(0x2c3)](0x0):[],_0x7d9b0=BattleManager[_0x927e58(0x55c)],_0x499617=_0x48c4b9[_0x927e58(0x988)]??![];if(!_0x23de90||!_0x2faea7||!_0x47e2d9)return;if(!_0x2faea7[_0x927e58(0xb8a)]())return;let _0x766e22=_0x499617?_0x7d9b0['getDualWieldTimes'](_0x47e2d9):0x1;for(let _0x5abaa9=0x0;_0x5abaa9<_0x766e22;_0x5abaa9++){_0x499617&&_0x47e2d9[_0x927e58(0x40c)]()&&_0x7d9b0[_0x927e58(0x6db)](_0x927e58(0x787),_0x47e2d9,_0x5abaa9);if(_0x48c4b9[_0x927e58(0x7c6)])_0x7d9b0['push'](_0x927e58(0xad8),_0x47e2d9,_0x2faea7);if(_0x48c4b9[_0x927e58(0xcc6)]>0x0)_0x7d9b0[_0x927e58(0x6db)]('waitCount',_0x48c4b9['WaitCount']);if(_0x48c4b9[_0x927e58(0x378)])_0x7d9b0[_0x927e58(0x6db)]('showAnimation',_0x47e2d9,_0x5665fd,_0x2faea7['item']()[_0x927e58(0x273)]);if(_0x48c4b9[_0x927e58(0x212)])_0x7d9b0[_0x927e58(0x6db)]('waitForAnimation');for(const _0x59b958 of _0x5665fd){if(!_0x59b958)continue;if(_0x48c4b9[_0x927e58(0x99c)])_0x7d9b0[_0x927e58(0x6db)](_0x927e58(0x723),_0x47e2d9,_0x59b958);}}_0x499617&&_0x47e2d9[_0x927e58(0x40c)]()&&_0x7d9b0['push'](_0x927e58(0x4e6),_0x47e2d9);if(_0x48c4b9['ApplyImmortal'])_0x7d9b0[_0x927e58(0x6db)]('applyImmortal',_0x47e2d9,_0x5665fd,![]);_0x23de90[_0x927e58(0x9d6)](_0x927e58(0x738));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],'ActSeq_Set_TargetActionSet',_0x4561de=>{const _0x5982ea=_0x58cf34;if(!SceneManager[_0x5982ea(0x3d3)]())return;VisuMZ[_0x5982ea(0x1e7)](_0x4561de,_0x4561de);const _0x59a07b=$gameTemp[_0x5982ea(0x20b)](),_0x3b559b=BattleManager['_action'],_0x5d06a3=BattleManager['_subject'],_0x5b5117=BattleManager[_0x5982ea(0x779)]?BattleManager[_0x5982ea(0x779)]['slice'](0x0):[],_0x24ac55=BattleManager[_0x5982ea(0x55c)],_0x3b6529=_0x4561de['DualWield']??![];if(!_0x59a07b||!_0x3b559b||!_0x5d06a3)return;if(!_0x3b559b[_0x5982ea(0xb8a)]())return;let _0x118f4f=_0x3b6529?_0x24ac55['getDualWieldTimes'](_0x5d06a3):0x1;for(let _0xf1e0ca=0x0;_0xf1e0ca<_0x118f4f;_0xf1e0ca++){for(const _0x288d24 of _0x5b5117){if(!_0x288d24)continue;_0x3b6529&&_0x5d06a3[_0x5982ea(0x40c)]()&&_0x24ac55[_0x5982ea(0x6db)](_0x5982ea(0x787),_0x5d06a3,_0xf1e0ca);if(_0x4561de[_0x5982ea(0x7c6)])_0x24ac55[_0x5982ea(0x6db)](_0x5982ea(0xad8),_0x5d06a3,_0x3b559b);if(_0x4561de[_0x5982ea(0xba5)]>0x0)_0x24ac55['push'](_0x5982ea(0xcd7),_0x4561de[_0x5982ea(0xba5)]);if(_0x4561de[_0x5982ea(0x378)])_0x24ac55[_0x5982ea(0x6db)]('showAnimation',_0x5d06a3,[_0x288d24],_0x3b559b[_0x5982ea(0xb8a)]()['animationId']);if(_0x4561de[_0x5982ea(0x940)]>0x0)_0x24ac55[_0x5982ea(0x6db)](_0x5982ea(0xcd7),_0x4561de[_0x5982ea(0x940)]);if(_0x4561de[_0x5982ea(0x99c)])_0x24ac55['push']('actionEffect',_0x5d06a3,_0x288d24);}}_0x3b6529&&_0x5d06a3[_0x5982ea(0x40c)]()&&_0x24ac55[_0x5982ea(0x6db)](_0x5982ea(0x4e6),_0x5d06a3);if(_0x4561de[_0x5982ea(0x812)])_0x24ac55[_0x5982ea(0x6db)](_0x5982ea(0x8dd),_0x5d06a3,_0x5b5117,![]);_0x59a07b['setWaitMode'](_0x5982ea(0x738));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x40a),_0x5233bd=>{const _0x4e8b6f=_0x58cf34;if(!SceneManager[_0x4e8b6f(0x3d3)]())return;VisuMZ[_0x4e8b6f(0x1e7)](_0x5233bd,_0x5233bd);const _0x3de639=$gameTemp[_0x4e8b6f(0x20b)](),_0x286dc4=BattleManager[_0x4e8b6f(0x5fc)],_0x24284a=BattleManager[_0x4e8b6f(0x6f1)],_0x53f53d=BattleManager[_0x4e8b6f(0x779)]?BattleManager['_allTargets'][_0x4e8b6f(0x2c3)](0x0):[],_0x1c7cb6=BattleManager[_0x4e8b6f(0x55c)];if(!_0x3de639||!_0x286dc4||!_0x24284a)return;if(!_0x286dc4[_0x4e8b6f(0xb8a)]())return;if(_0x5233bd[_0x4e8b6f(0x812)])_0x1c7cb6[_0x4e8b6f(0x6db)](_0x4e8b6f(0x8dd),_0x24284a,_0x53f53d,![]);if(_0x5233bd[_0x4e8b6f(0x8ee)])_0x1c7cb6['push'](_0x4e8b6f(0x4dc));if(_0x5233bd[_0x4e8b6f(0x992)])_0x1c7cb6['push'](_0x4e8b6f(0x78c));if(_0x5233bd[_0x4e8b6f(0x3ef)])_0x1c7cb6[_0x4e8b6f(0x6db)](_0x4e8b6f(0xcdf));if(_0x5233bd[_0x4e8b6f(0xb19)])_0x1c7cb6[_0x4e8b6f(0x6db)](_0x4e8b6f(0x261),_0x24284a);if(_0x5233bd['WaitForMovement'])_0x1c7cb6['push'](_0x4e8b6f(0x47a));_0x3de639[_0x4e8b6f(0x9d6)](_0x4e8b6f(0x738));}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0xa02),_0x57be00=>{const _0x47bb3c=_0x58cf34;if(!SceneManager[_0x47bb3c(0x3d3)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x47bb3c(0x1e7)](_0x57be00,_0x57be00);const _0x2967a3=$gameTemp[_0x47bb3c(0x20b)](),_0x6a06d5=_0x57be00['WaitForAngle'];if(!_0x2967a3)return;$gameScreen[_0x47bb3c(0x31a)](_0x57be00[_0x47bb3c(0x614)],_0x57be00[_0x47bb3c(0x660)],_0x57be00[_0x47bb3c(0x5d2)]);if(_0x6a06d5)_0x2967a3[_0x47bb3c(0x9d6)]('battleAngle');}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x2ce),_0x4881bc=>{const _0x392640=_0x58cf34;if(!SceneManager[_0x392640(0x3d3)]())return;if(!Imported[_0x392640(0x5d3)])return;VisuMZ['ConvertParams'](_0x4881bc,_0x4881bc);const _0x1d031e=$gameTemp['getLastPluginCommandInterpreter'](),_0x15a7c5=_0x4881bc[_0x392640(0x737)];if(!_0x1d031e)return;$gameScreen['setBattleAngle'](0x0,_0x4881bc[_0x392640(0x660)],_0x4881bc['EasingType']);if(_0x15a7c5)_0x1d031e[_0x392640(0x9d6)](_0x392640(0x923));}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x8b0),_0x68fc67=>{const _0x37f1c4=_0x58cf34;if(!SceneManager[_0x37f1c4(0x3d3)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x37c3b1=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x37c3b1)return;_0x37c3b1[_0x37f1c4(0x9d6)](_0x37f1c4(0x923));}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0xc5c),_0x29ada0=>{const _0x49718f=_0x58cf34;if(!SceneManager[_0x49718f(0x3d3)]())return;VisuMZ[_0x49718f(0x1e7)](_0x29ada0,_0x29ada0);const _0x55401a=$gameTemp[_0x49718f(0x20b)](),_0x300c3a=BattleManager[_0x49718f(0x5fc)],_0x5464ad=BattleManager['_subject'],_0x3f2dfc=VisuMZ['CreateActionSequenceTargets'](_0x29ada0['Targets']),_0x3c76dc=_0x29ada0[_0x49718f(0x980)],_0x47939c=BattleManager['_logWindow'];if(!_0x55401a||!_0x300c3a||!_0x5464ad)return;if(!_0x300c3a['item']())return;let _0x59a02b=_0x300c3a[_0x49718f(0xb8a)]()[_0x49718f(0x273)];if(_0x59a02b<0x0)_0x59a02b=_0x5464ad['attackAnimationId1']();$gameTemp['requestAnimation'](_0x3f2dfc,_0x59a02b,_0x3c76dc),_0x29ada0['WaitForAnimation']&&_0x55401a[_0x49718f(0x9d6)]('battleAnimation');}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x96c),_0x32b71b=>{const _0x584923=_0x58cf34;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x584923(0x1e7)](_0x32b71b,_0x32b71b);const _0x168147=$gameTemp['getLastPluginCommandInterpreter'](),_0x30f6c=BattleManager['_subject'],_0x1d1e28=VisuMZ[_0x584923(0x2af)](_0x32b71b[_0x584923(0x871)]),_0x58120d=_0x32b71b[_0x584923(0x980)],_0x2780aa=BattleManager['_logWindow'];if(!_0x168147||!_0x30f6c)return;const _0x87aedd=_0x30f6c[_0x584923(0xadf)]();$gameTemp[_0x584923(0x30d)](_0x1d1e28,_0x87aedd,_0x58120d),_0x32b71b[_0x584923(0x212)]&&_0x168147[_0x584923(0x9d6)](_0x584923(0xc43));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xca1),_0x1c72de=>{const _0x31c8bf=_0x58cf34;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x31c8bf(0x1e7)](_0x1c72de,_0x1c72de);const _0x3de594=_0x38926a[_0x31c8bf(0xc86)](_0x1c72de[_0x31c8bf(0x4fb)]);if(_0x3de594<=0x0)return;const _0x2b85d4=$gameTemp[_0x31c8bf(0x20b)](),_0x38926a=BattleManager[_0x31c8bf(0x6f1)],_0x5e0e7a=VisuMZ['CreateActionSequenceTargets'](_0x1c72de[_0x31c8bf(0x871)]),_0x16dc16=_0x1c72de[_0x31c8bf(0x980)],_0x5b131d=BattleManager['_logWindow'];if(!_0x2b85d4||!_0x38926a)return;$gameTemp['requestAnimation'](_0x5e0e7a,_0x3de594,_0x16dc16),_0x1c72de[_0x31c8bf(0x212)]&&_0x2b85d4[_0x31c8bf(0x9d6)](_0x31c8bf(0xc43));}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x892),_0x4832b4=>{const _0xb84921=_0x58cf34;if(!SceneManager[_0xb84921(0x3d3)]())return;VisuMZ['ConvertParams'](_0x4832b4,_0x4832b4);const _0x47631b=$gameTemp[_0xb84921(0x20b)](),_0x2ca3c0=VisuMZ[_0xb84921(0x2af)](_0x4832b4[_0xb84921(0x871)]),_0x92258c=_0x4832b4[_0xb84921(0x4e7)];let _0x2e5fcc=0x0;switch(_0x92258c[_0xb84921(0x6f5)]()[_0xb84921(0x989)]()){case'!':case _0xb84921(0xb81):_0x2e5fcc=0x1;break;case'?':case _0xb84921(0x4de):_0x2e5fcc=0x2;break;case _0xb84921(0xb4c):case _0xb84921(0x827):case _0xb84921(0x60f):case _0xb84921(0x2cb):case'MUSICNOTE':_0x2e5fcc=0x3;break;case'HEART':case _0xb84921(0x50b):_0x2e5fcc=0x4;break;case'ANGLE':case _0xb84921(0xc7b):_0x2e5fcc=0x5;break;case _0xb84921(0x521):_0x2e5fcc=0x6;break;case _0xb84921(0x8d3):case'ANNOYED':case'FRUSTRATION':_0x2e5fcc=0x7;break;case _0xb84921(0x20a):case'...':_0x2e5fcc=0x8;break;case'LIGHT':case'BULB':case _0xb84921(0xcd3):case'LIGHT-BULB':case _0xb84921(0x241):_0x2e5fcc=0x9;break;case'Z':case'ZZ':case _0xb84921(0x6e3):case _0xb84921(0x461):_0x2e5fcc=0xa;break;case _0xb84921(0x7d7):_0x2e5fcc=0xb;break;case _0xb84921(0x51e):_0x2e5fcc=0xc;break;case _0xb84921(0x9a8):_0x2e5fcc=0xd;break;case _0xb84921(0x651):_0x2e5fcc=0xe;break;case _0xb84921(0x768):_0x2e5fcc=0xf;break;}for(const _0x2bd7fd of _0x2ca3c0){if(!_0x2bd7fd)continue;$gameTemp['requestBattleBalloon'](_0x2bd7fd,_0x2e5fcc);}_0x4832b4['WaitComplete']&&_0x47631b&&(_0x47631b[_0xb84921(0xa15)](0x1),_0x47631b[_0xb84921(0x9d6)](_0xb84921(0x320)));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x71c),_0x3c3bc3=>{const _0x30b23d=_0x58cf34;if(!SceneManager[_0x30b23d(0x3d3)]())return;if(!Imported[_0x30b23d(0x6e8)])return;VisuMZ[_0x30b23d(0x1e7)](_0x3c3bc3,_0x3c3bc3);const _0x53f78f=$gameTemp[_0x30b23d(0x20b)](),_0x3935e5=VisuMZ[_0x30b23d(0x2af)](_0x3c3bc3[_0x30b23d(0x871)]),_0x1960c9=_0x3c3bc3['IconIndex'];for(const _0x1510b7 of _0x3935e5){if(!_0x1510b7)continue;$gameTemp[_0x30b23d(0xc88)](_0x1510b7,[_0x1960c9]);}_0x3c3bc3[_0x30b23d(0x564)]&&_0x53f78f&&(_0x53f78f[_0x30b23d(0xa15)](0x1),_0x53f78f[_0x30b23d(0x9d6)](_0x30b23d(0x320)));}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x477),_0x502f72=>{const _0x2ca1ce=_0x58cf34;if(!SceneManager[_0x2ca1ce(0x3d3)]())return;if(!Imported[_0x2ca1ce(0x6e8)])return;VisuMZ['ConvertParams'](_0x502f72,_0x502f72);const _0x56e428=$gameTemp[_0x2ca1ce(0x20b)](),_0x54a7a8=VisuMZ['CreateActionSequenceTargets'](_0x502f72[_0x2ca1ce(0x871)]),_0x5be3f3=Math['min'](Number(_0x502f72['startIcon']||0x0),Number(_0x502f72['endIcon']||0x0)),_0x291f89=Math[_0x2ca1ce(0x238)](Number(_0x502f72[_0x2ca1ce(0x7f8)]||0x0),Number(_0x502f72[_0x2ca1ce(0x9cb)]||0x0)),_0x5a5b36=[];for(let _0x1e65bb=_0x5be3f3;_0x1e65bb<=_0x291f89;_0x1e65bb++){_0x5a5b36[_0x2ca1ce(0x6db)](_0x1e65bb);}for(const _0x15f002 of _0x54a7a8){if(!_0x15f002)continue;$gameTemp['requestBattleBalloon'](_0x15f002,_0x5a5b36);}_0x502f72['WaitComplete']&&_0x56e428&&(_0x56e428[_0x2ca1ce(0xa15)](0x1),_0x56e428[_0x2ca1ce(0x9d6)](_0x2ca1ce(0x320)));}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],'ActSeq_Animation_BalloonIconSpecific',_0x864464=>{const _0x4d4e38=_0x58cf34;if(!SceneManager[_0x4d4e38(0x3d3)]())return;if(!Imported['VisuMZ_4_IconBalloons'])return;VisuMZ[_0x4d4e38(0x1e7)](_0x864464,_0x864464);const _0x9ce719=$gameTemp[_0x4d4e38(0x20b)](),_0x34f8ba=VisuMZ[_0x4d4e38(0x2af)](_0x864464[_0x4d4e38(0x871)]),_0xfa781e=_0x864464[_0x4d4e38(0x7d1)];for(const _0x5186f4 of _0x34f8ba){if(!_0x5186f4)continue;$gameTemp[_0x4d4e38(0xc88)](_0x5186f4,_0xfa781e);}_0x864464[_0x4d4e38(0x564)]&&_0x9ce719&&(_0x9ce719['wait'](0x1),_0x9ce719[_0x4d4e38(0x9d6)](_0x4d4e38(0x320)));}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],'ActSeq_Animation_CastAnimation',_0x37d278=>{const _0x297168=_0x58cf34;if(!SceneManager[_0x297168(0x3d3)]())return;VisuMZ['ConvertParams'](_0x37d278,_0x37d278);const _0xe1dce4=$gameTemp[_0x297168(0x20b)](),_0x580b12=BattleManager[_0x297168(0x5fc)],_0x2fadcd=_0x37d278[_0x297168(0x980)],_0x192613=VisuMZ[_0x297168(0x2af)](_0x37d278[_0x297168(0x871)]);if(!_0xe1dce4||!_0x580b12)return;if(!_0x580b12['item']())return;for(const _0xd6c9f8 of _0x192613){if(!_0xd6c9f8)continue;_0xd6c9f8[_0x297168(0x52a)](_0x580b12,_0x2fadcd);}if(_0x37d278[_0x297168(0x212)])_0xe1dce4[_0x297168(0x9d6)]('battleAnimation');}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x59d),_0x12438b=>{const _0x11f963=_0x58cf34;VisuMZ[_0x11f963(0x1e7)](_0x12438b,_0x12438b);const _0xd5419d=$gameTemp['getLastPluginCommandInterpreter'](),_0x5f500c=VisuMZ[_0x11f963(0x2af)](_0x12438b[_0x11f963(0x871)]),_0x22bc0e=_0x12438b[_0x11f963(0xb7f)];if(!_0x22bc0e)return;for(const _0x3cd3d9 of _0x5f500c){if(!_0x3cd3d9)continue;if(!_0x3cd3d9['isActor']())continue;_0x3cd3d9[_0x11f963(0x8af)](_0x22bc0e);}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x748),_0x2f5ff7=>{const _0x51d3aa=_0x58cf34;VisuMZ[_0x51d3aa(0x1e7)](_0x2f5ff7,_0x2f5ff7);const _0x1f60dc=_0x2f5ff7['ActorJS'](),_0x1c1e93=$gameActors[_0x51d3aa(0x2fd)](_0x1f60dc)||null;if(!_0x1c1e93){console['log']('NO\x20ACTOR\x20FOUND!');return;}const _0x201375=_0x2f5ff7[_0x51d3aa(0x9ef)]();_0x1c1e93[_0x51d3aa(0x8af)](_0x201375);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x7f2),_0x2926c3=>{const _0x3cba42=_0x58cf34;if(!SceneManager[_0x3cba42(0x3d3)]())return;VisuMZ[_0x3cba42(0x1e7)](_0x2926c3,_0x2926c3);const _0x3ddb0a=$gameTemp[_0x3cba42(0x20b)](),_0x3fda26=BattleManager[_0x3cba42(0x6f1)],_0x3b88c1=VisuMZ[_0x3cba42(0x2af)](_0x2926c3[_0x3cba42(0x871)]),_0x4b33b3=_0x2926c3['Mirror'];if(!_0x3ddb0a||!_0x3fda26)return;const _0x211f22=$dataSkilles[_0x3fda26[_0x3cba42(0x74c)]()],_0x232f3a=_0x211f22['animationId'];$gameTemp['requestAnimation'](_0x3b88c1,_0x232f3a,_0x4b33b3),_0x2926c3[_0x3cba42(0x212)]&&_0x3ddb0a[_0x3cba42(0x9d6)](_0x3cba42(0xc43));}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x23c),_0x1bd6b4=>{const _0x1b6d34=_0x58cf34;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1b6d34(0x1e7)](_0x1bd6b4,_0x1bd6b4);const _0x41881e=$gameTemp['getLastPluginCommandInterpreter'](),_0x532266=VisuMZ[_0x1b6d34(0x2af)](_0x1bd6b4['Targets']),_0x45471a=Number(_0x1bd6b4['ItemID']||0x1),_0x5a08e1=$dataItems[_0x45471a],_0x59bf07=_0x1bd6b4[_0x1b6d34(0x980)];if(!_0x41881e)return;if(!_0x5a08e1)return;let _0xe8f833=_0x5a08e1[_0x1b6d34(0x273)];$gameTemp[_0x1b6d34(0x30d)](_0x532266,_0xe8f833,_0x59bf07),_0x1bd6b4[_0x1b6d34(0x212)]&&_0x41881e[_0x1b6d34(0x9d6)]('battleAnimation');}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x7af),_0x15911f=>{const _0x5deea7=_0x58cf34;if(!SceneManager[_0x5deea7(0xb85)])return;if(!SceneManager[_0x5deea7(0xb85)][_0x5deea7(0x5ae)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0x5deea7(0x1e7)](_0x15911f,_0x15911f);const _0x494a70=$gameTemp[_0x5deea7(0x20b)](),_0x5bf4db=Math[_0x5deea7(0x92e)](_0x15911f[_0x5deea7(0x875)]),_0x30bd6d=Math['round'](_0x15911f[_0x5deea7(0x1db)]);$gameTemp['requestPointAnimation'](_0x5bf4db,_0x30bd6d,_0x15911f[_0x5deea7(0xc33)],_0x15911f[_0x5deea7(0x980)],_0x15911f['Mute']),_0x15911f[_0x5deea7(0x564)]&&_0x494a70&&(SceneManager[_0x5deea7(0xb85)][_0x5deea7(0x5ae)][_0x5deea7(0x6e2)](),_0x494a70[_0x5deea7(0x9d6)](_0x5deea7(0xc43)));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x4ed),_0x5e0e01=>{const _0xa006dc=_0x58cf34;if(!SceneManager[_0xa006dc(0x3d3)]())return;VisuMZ[_0xa006dc(0x1e7)](_0x5e0e01,_0x5e0e01);const _0x4df9e7=$gameTemp['getLastPluginCommandInterpreter'](),_0x7bb53f=VisuMZ['CreateActionSequenceTargets'](_0x5e0e01['Targets']),_0x215226=_0x5e0e01[_0xa006dc(0xc33)],_0x13e696=_0x5e0e01['Mirror'];if(!_0x4df9e7)return;$gameTemp['requestAnimation'](_0x7bb53f,_0x215226,_0x13e696);if(_0x5e0e01[_0xa006dc(0x212)])_0x4df9e7[_0xa006dc(0x9d6)](_0xa006dc(0xc43));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x333),_0x528b47=>{const _0x329ff0=_0x58cf34;if(!SceneManager[_0x329ff0(0x3d3)]())return;VisuMZ['ConvertParams'](_0x528b47,_0x528b47);const _0x1df458=$gameTemp[_0x329ff0(0x20b)](),_0x4c94d4=VisuMZ['CreateActionSequenceTargets'](_0x528b47[_0x329ff0(0x871)]),_0x32dd3b=Number(_0x528b47['AnimationID'])||0x1,_0x14f76b=_0x528b47[_0x329ff0(0x980)];if(!_0x1df458)return;$gameTemp['requestAnimation'](_0x4c94d4,_0x32dd3b,_0x14f76b);if(_0x528b47['WaitForAnimation'])_0x1df458[_0x329ff0(0x9d6)](_0x329ff0(0xc43));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x550),_0x581d67=>{const _0x2595c7=_0x58cf34;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x581d67,_0x581d67);const _0x3faa6b=$gameTemp[_0x2595c7(0x20b)](),_0xd9562d=VisuMZ[_0x2595c7(0x2af)](_0x581d67['Targets']),_0x546bb8=Number(_0x581d67[_0x2595c7(0x5b5)]||0x1),_0x4f9298=$dataSkills[_0x546bb8],_0x6867e0=_0x581d67[_0x2595c7(0x980)];if(!_0x3faa6b)return;if(!_0x4f9298)return;let _0x172cc4=_0x4f9298[_0x2595c7(0x273)];$gameTemp[_0x2595c7(0x30d)](_0xd9562d,_0x172cc4,_0x6867e0),_0x581d67['WaitForAnimation']&&_0x3faa6b[_0x2595c7(0x9d6)](_0x2595c7(0xc43));}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0xc2c),_0x59298b=>{const _0x3e9de7=_0x58cf34;if(!SceneManager[_0x3e9de7(0x3d3)]())return;const _0x4a16a5=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4a16a5)return;_0x4a16a5[_0x3e9de7(0x9d6)](_0x3e9de7(0xc43));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xc47),_0x29ea8a=>{const _0xba04a4=_0x58cf34;if(!SceneManager[_0xba04a4(0x3d3)]())return;VisuMZ['ConvertParams'](_0x29ea8a,_0x29ea8a);const _0x8e9ab5=BattleManager[_0xba04a4(0x55c)],_0x27961e=_0x29ea8a[_0xba04a4(0x242)]&&Imported['VisuMZ_4_CombatLog'];_0x8e9ab5[_0xba04a4(0x747)](_0x29ea8a['Text']),_0x27961e&&Imported[_0xba04a4(0x41d)]&&$gameSystem[_0xba04a4(0x1ff)](_0x29ea8a[_0xba04a4(0xacc)]||'',_0x29ea8a[_0xba04a4(0x43d)]||0x0);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],'ActSeq_BattleLog_Clear',_0x361ace=>{const _0x274f5e=_0x58cf34;if(!SceneManager['isSceneBattle']())return;const _0x1d94d9=BattleManager[_0x274f5e(0x55c)];_0x1d94d9[_0x274f5e(0xcdf)]();}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x714),_0x27a839=>{const _0xc60fbb=_0x58cf34;if(!SceneManager[_0xc60fbb(0x3d3)]())return;const _0x2796ee=$gameTemp[_0xc60fbb(0x20b)](),_0x27c67d=BattleManager['_action'],_0x524c67=BattleManager[_0xc60fbb(0x6f1)],_0x1dd5ef=BattleManager['_logWindow'];if(!_0x2796ee||!_0x27c67d||!_0x524c67)return;if(!_0x27c67d[_0xc60fbb(0xb8a)]())return;_0x1dd5ef[_0xc60fbb(0xb39)](_0x524c67,_0x27c67d[_0xc60fbb(0xb8a)]()),_0x2796ee['setWaitMode'](_0xc60fbb(0x738));}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xa1e),_0x1ccb14=>{const _0x2266fb=_0x58cf34;if(!SceneManager['isSceneBattle']())return;const _0x42b024=BattleManager[_0x2266fb(0x55c)];_0x42b024[_0x2266fb(0x599)]();}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x3e9),_0x2f4a34=>{const _0x532f0e=_0x58cf34;if(!SceneManager[_0x532f0e(0x3d3)]())return;const _0x14fb03=BattleManager['_logWindow'];_0x14fb03[_0x532f0e(0x5eb)]();}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x877),_0x4a09bc=>{const _0x4cf4e1=_0x58cf34;if(!SceneManager[_0x4cf4e1(0x3d3)]())return;const _0x2fc747=BattleManager[_0x4cf4e1(0x55c)];_0x2fc747[_0x4cf4e1(0x7ff)]();}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x3f7),_0x3c1150=>{const _0x241122=_0x58cf34;if(!SceneManager[_0x241122(0x3d3)]())return;VisuMZ[_0x241122(0x1e7)](_0x3c1150,_0x3c1150),SceneManager[_0x241122(0xb85)][_0x241122(0x6b7)](_0x3c1150[_0x241122(0x809)]);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xc10),_0x36718f=>{const _0x5aa714=_0x58cf34;if(!SceneManager['isSceneBattle']())return;const _0x44a608=$gameTemp[_0x5aa714(0x20b)]();_0x44a608[_0x5aa714(0x9d6)](_0x5aa714(0x738));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xc05),_0x199ee6=>{const _0xb07bee=_0x58cf34;if(!SceneManager[_0xb07bee(0x3d3)]())return;const _0x1db8df=$gameTemp[_0xb07bee(0x20b)](),_0x5e6ac2=BattleManager[_0xb07bee(0x55c)];_0x5e6ac2[_0xb07bee(0x4dc)](),_0x1db8df[_0xb07bee(0x9d6)](_0xb07bee(0x738));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],'ActSeq_Camera_Clamp',_0x5e7dd2=>{const _0x257ad5=_0x58cf34;if(!SceneManager[_0x257ad5(0x3d3)]())return;if(!Imported[_0x257ad5(0x5d3)])return;VisuMZ['ConvertParams'](_0x5e7dd2,_0x5e7dd2);const _0x1c11da=$gameScreen[_0x257ad5(0x8bf)]();_0x1c11da['cameraClamp']=_0x5e7dd2[_0x257ad5(0x231)];}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x1fe),_0x19dad5=>{const _0x4850d3=_0x58cf34;if(!SceneManager[_0x4850d3(0x3d3)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x19dad5,_0x19dad5);const _0x472944=$gameTemp[_0x4850d3(0x20b)](),_0x39393a=_0x19dad5[_0x4850d3(0x43f)];$gameScreen[_0x4850d3(0x642)](_0x19dad5[_0x4850d3(0x582)],_0x19dad5[_0x4850d3(0x71e)],_0x19dad5[_0x4850d3(0x660)],_0x19dad5['EasingType']);if(_0x39393a)_0x472944['setWaitMode'](_0x4850d3(0x210));}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x9ed),_0x491429=>{const _0x5e6f9f=_0x58cf34;if(!SceneManager[_0x5e6f9f(0x3d3)]())return;if(!Imported[_0x5e6f9f(0x5d3)])return;VisuMZ[_0x5e6f9f(0x1e7)](_0x491429,_0x491429);const _0x293d13=$gameTemp[_0x5e6f9f(0x20b)](),_0x1a54aa=VisuMZ[_0x5e6f9f(0x2af)](_0x491429[_0x5e6f9f(0x871)]),_0x21daac=_0x491429[_0x5e6f9f(0x43f)];$gameScreen[_0x5e6f9f(0x920)](_0x1a54aa,_0x491429[_0x5e6f9f(0x660)],_0x491429[_0x5e6f9f(0x5d2)]);if(_0x21daac)_0x293d13[_0x5e6f9f(0x9d6)](_0x5e6f9f(0x210));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x8d6),_0x413881=>{const _0x5df0e0=_0x58cf34;if(!SceneManager[_0x5df0e0(0x3d3)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x5df0e0(0x1e7)](_0x413881,_0x413881);const _0x5b4296=$gameTemp[_0x5df0e0(0x20b)](),_0x638d0d=_0x413881[_0x5df0e0(0x43f)];$gameScreen[_0x5df0e0(0x31b)](_0x413881[_0x5df0e0(0x6da)],_0x413881[_0x5df0e0(0x5fb)],_0x413881[_0x5df0e0(0x660)],_0x413881[_0x5df0e0(0x5d2)]);if(_0x638d0d)_0x5b4296[_0x5df0e0(0x9d6)]('battleCamera');}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x5da),_0x441eae=>{const _0x5d480c=_0x58cf34;if(!SceneManager[_0x5d480c(0x3d3)]())return;if(!Imported[_0x5d480c(0x5d3)])return;VisuMZ['ConvertParams'](_0x441eae,_0x441eae);const _0x425097=$gameTemp[_0x5d480c(0x20b)](),_0x4afa62=_0x441eae['ResetFocus'],_0x1379d4=_0x441eae[_0x5d480c(0xa0d)],_0x4e8cbf=_0x441eae[_0x5d480c(0x43f)];if(_0x4afa62){const _0x1569a3=Math['round'](Graphics['width']/0x2),_0x2b7283=Math['round'](Graphics[_0x5d480c(0x725)]/0x2);$gameScreen['setBattleCameraPoint'](_0x1569a3,_0x2b7283,_0x441eae[_0x5d480c(0x660)],_0x441eae[_0x5d480c(0x5d2)]);}_0x1379d4&&$gameScreen[_0x5d480c(0x31b)](0x0,0x0,_0x441eae[_0x5d480c(0x660)],_0x441eae[_0x5d480c(0x5d2)]);if(_0x4e8cbf)_0x425097[_0x5d480c(0x9d6)](_0x5d480c(0x210));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x94d),_0x4beb1e=>{const _0xa5adbb=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xa5adbb(0x5d3)])return;const _0x2bbced=$gameTemp[_0xa5adbb(0x20b)]();if(!_0x2bbced)return;_0x2bbced[_0xa5adbb(0x9d6)](_0xa5adbb(0x210));}),VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x86e)]=function(_0x10b961){const _0x3315fd=_0x58cf34;_0x10b961[_0x3315fd(0xc1e)]='';const _0x2f088e=VisuMZ[_0x3315fd(0x348)][_0x3315fd(0x86e)](_0x10b961),_0x514792=VisuMZ['CreateActionSequenceTargets'](_0x10b961[_0x3315fd(0x871)])[0x0]||null;return _0x514792&&(_0x2f088e[_0x3315fd(0xc1e)]=_0x514792[_0x3315fd(0xb63)](),_0x2f088e[_0x3315fd(0x313)]=_0x514792['visualCutinPortraitIndex'](),_0x2f088e[_0x3315fd(0x7e5)]=_0x514792['visualCutinPortraitHue'](),_0x2f088e[_0x3315fd(0x579)]=_0x514792[_0x3315fd(0xc93)](),_0x514792[_0x3315fd(0x2d8)]()&&(_0x514792[_0x3315fd(0x53f)]()&&(_0x2f088e[_0x3315fd(0x707)]=!_0x2f088e['portraitFlipHorz']),_0x514792[_0x3315fd(0x6d2)]()&&(_0x2f088e[_0x3315fd(0xbc5)]=!_0x2f088e[_0x3315fd(0xbc5)]),_0x2f088e['portraitType']===_0x3315fd(0xbc6)&&(_0x2f088e[_0x3315fd(0x707)]=!_0x2f088e['portraitFlipHorz']),_0x10b961[_0x3315fd(0x3da)][_0x3315fd(0x240)]&&(_0x2f088e[_0x3315fd(0x556)]*=-0x1),_0x10b961[_0x3315fd(0x3da)][_0x3315fd(0xa83)]&&(_0x2f088e[_0x3315fd(0x27a)]*=-0x1),_0x2f088e[_0x3315fd(0x308)]+=_0x10b961[_0x3315fd(0x3da)]['parallaxHueEnemyModifier']??0x0)),_0x2f088e;},PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x362),_0x1ecfd7=>{const _0x294f2e=_0x58cf34;if(!SceneManager[_0x294f2e(0x3d3)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ['ConvertParams'](_0x1ecfd7,_0x1ecfd7);const _0x348817=VisuMZ[_0x294f2e(0xa6b)][_0x294f2e(0x86e)](_0x1ecfd7);SceneManager['_scene']['startVisualCutin'](_0x348817);const _0x3a4f7e=$gameTemp[_0x294f2e(0x20b)]();_0x3a4f7e&&_0x1ecfd7['WaitForEntrance']&&_0x3a4f7e['setWaitMode'](_0x294f2e(0x4e1));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x21e),_0x146c2a=>{const _0x234e8f=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x234e8f(0x7e7)])return;VisuMZ['ConvertParams'](_0x146c2a,_0x146c2a),SceneManager[_0x234e8f(0xb85)][_0x234e8f(0x9a1)]();const _0x17228e=$gameTemp[_0x234e8f(0x20b)]();_0x17228e&&_0x146c2a[_0x234e8f(0xb71)]&&_0x17228e[_0x234e8f(0x9d6)](_0x234e8f(0x969));}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x796),_0x203374=>{const _0x579251=_0x58cf34;if(!SceneManager[_0x579251(0x3d3)]())return;if(!Imported[_0x579251(0x7e7)])return;VisuMZ[_0x579251(0x1e7)](_0x203374,_0x203374);const _0xd55f98=_0x203374[_0x579251(0x83c)]['toLowerCase']()[_0x579251(0x989)]();SceneManager[_0x579251(0xb85)][_0x579251(0x469)](_0xd55f98);const _0x42c2b8=$gameTemp[_0x579251(0x20b)]();_0x42c2b8&&_0x203374[_0x579251(0xb71)]&&_0x42c2b8[_0x579251(0x9d6)](_0x579251(0x969));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x5aa),_0x38138b=>{const _0x5653c4=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;const _0x24ce98=$gameTemp[_0x5653c4(0x20b)]();_0x24ce98[_0x5653c4(0x9d6)](_0x5653c4(0x4e1));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x8fa),_0x116cb8=>{const _0x5af86b=_0x58cf34;if(!SceneManager[_0x5af86b(0x3d3)]())return;if(!Imported[_0x5af86b(0x7e7)])return;const _0x665582=$gameTemp[_0x5af86b(0x20b)]();_0x665582[_0x5af86b(0x9d6)](_0x5af86b(0x969));}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0xa3c),_0x17dba3=>{const _0x840f70=_0x58cf34;if(!SceneManager[_0x840f70(0x3d3)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x840f70(0x1e7)](_0x17dba3,_0x17dba3);const _0x308b9b=VisuMZ['CreateActionSequenceTargets'](_0x17dba3['Targets']),_0x2e2c50=_0x17dba3[_0x840f70(0x429)][_0x840f70(0x5b9)]()[_0x840f70(0x989)]();for(const _0x37a887 of _0x308b9b){if(!_0x37a887)continue;_0x37a887['requestDragonbonesAnimation'](_0x2e2c50);}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x6a6),_0x5ca18e=>{const _0x3a074d=_0x58cf34;if(!SceneManager[_0x3a074d(0x3d3)]())return;if(!Imported[_0x3a074d(0xc42)])return;VisuMZ[_0x3a074d(0x1e7)](_0x5ca18e,_0x5ca18e);const _0x3ec4dd=VisuMZ[_0x3a074d(0x2af)](_0x5ca18e['Targets']),_0x2e6036=_0x5ca18e[_0x3a074d(0xb61)];for(const _0x467a9f of _0x3ec4dd){if(!_0x467a9f)continue;_0x467a9f[_0x3a074d(0x7a0)]()[_0x3a074d(0x217)]=_0x2e6036;}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xa5b),_0x319d7e=>{const _0xedc752=_0x58cf34;if(!SceneManager[_0xedc752(0x3d3)]())return;if(!Imported[_0xedc752(0x5ce)])return;VisuMZ[_0xedc752(0x1e7)](_0x319d7e,_0x319d7e);const _0x2e8010=BattleManager[_0xedc752(0x5fc)],_0x19cc2f=_0x319d7e[_0xedc752(0x51b)];if(!_0x2e8010)return;_0x2e8010['_battleCoreAddedElements']=_0x19cc2f;}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xaf7),_0x13c539=>{const _0x25d6d3=_0x58cf34;if(!SceneManager[_0x25d6d3(0x3d3)]())return;if(!Imported[_0x25d6d3(0x5ce)])return;const _0x42ad5c=BattleManager['_action'];if(!_0x42ad5c)return;_0x42ad5c['clearElementChanges']();}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0xcc1),_0x30d34e=>{const _0x253d05=_0x58cf34;if(!SceneManager[_0x253d05(0x3d3)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x253d05(0x1e7)](_0x30d34e,_0x30d34e);const _0x26bccb=BattleManager[_0x253d05(0x5fc)],_0x5ea3f5=_0x30d34e['Elements'];if(!_0x26bccb)return;_0x26bccb[_0x253d05(0x49a)]=_0x5ea3f5;}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Element_NullElements',_0x265b7b=>{const _0x1beaa2=_0x58cf34;if(!SceneManager[_0x1beaa2(0x3d3)]())return;if(!Imported[_0x1beaa2(0x5ce)])return;const _0x4ee021=BattleManager[_0x1beaa2(0x5fc)];if(!_0x4ee021)return;_0x4ee021[_0x1beaa2(0x862)]=!![];}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x67d),_0x1218e3=>{const _0x126ff3=_0x58cf34;VisuMZ[_0x126ff3(0xc8c)][_0x126ff3(0x67d)](_0x1218e3);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x4cd),_0x5057a1=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_AddPassiveStatesToNode'](_0x5057a1);}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x2b4),_0x211fc8=>{const _0x3452ad=_0x58cf34;VisuMZ[_0x3452ad(0xc8c)][_0x3452ad(0x2b4)](_0x211fc8);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x3fd),_0xc690bb=>{const _0x266823=_0x58cf34;VisuMZ[_0x266823(0xc8c)][_0x266823(0x2b4)](_0xc690bb);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xb9f),_0x112f52=>{const _0x384053=_0x58cf34;VisuMZ[_0x384053(0xc8c)][_0x384053(0xb9f)](_0x112f52);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x69e),_0x32e541=>{const _0x3465f4=_0x58cf34;VisuMZ[_0x3465f4(0xc8c)][_0x3465f4(0x69e)](_0x32e541);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xb6d),_0x2b4863=>{const _0x28dfad=_0x58cf34;VisuMZ[_0x28dfad(0xc8c)][_0x28dfad(0xb6d)](_0x2b4863);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],'ActSeq_Grid_ClearPassiveStatesFromNode',_0x1669d9=>{const _0x403731=_0x58cf34;VisuMZ['BattleGridSystem'][_0x403731(0x252)](_0x1669d9);}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x9b4),_0x1b39b5=>{const _0x5d42fb=_0x58cf34;VisuMZ[_0x5d42fb(0xc8c)][_0x5d42fb(0x9b4)](_0x1b39b5);}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],'ActSeq_Grid_PullToTargetNode',_0x45e2e4=>{const _0x1d4b15=_0x58cf34;VisuMZ[_0x1d4b15(0xc8c)][_0x1d4b15(0xbb8)](_0x45e2e4);}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x34e),_0x549f56=>{const _0x4569d5=_0x58cf34;VisuMZ[_0x4569d5(0xc8c)][_0x4569d5(0x34e)](_0x549f56);}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x689),_0x5874d0=>{const _0x342598=_0x58cf34;VisuMZ[_0x342598(0xc8c)][_0x342598(0x689)](_0x5874d0);}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x4ad),_0x53ef79=>{const _0x4ac40e=_0x58cf34;VisuMZ[_0x4ac40e(0xc8c)][_0x4ac40e(0x4ad)](_0x53ef79);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],'ActSeq_Grid_TeleportToNode',_0x5aec9b=>{const _0x33065f=_0x58cf34;VisuMZ[_0x33065f(0xc8c)][_0x33065f(0x506)](_0x5aec9b);}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0xa3d),_0xbc7148=>{const _0x12c0c4=_0x58cf34;VisuMZ[_0x12c0c4(0xc8c)][_0x12c0c4(0xa3d)](_0xbc7148);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x281),_0x22c7dc=>{const _0x2c48c1=_0x58cf34;if(!Imported[_0x2c48c1(0x488)])return;if(!SceneManager[_0x2c48c1(0x3d3)]())return;VisuMZ[_0x2c48c1(0x1e7)](_0x22c7dc,_0x22c7dc);const _0x3d9c91=VisuMZ[_0x2c48c1(0x2af)](_0x22c7dc[_0x2c48c1(0x871)]);for(const _0x168e93 of _0x3d9c91){if(!_0x168e93)continue;_0x168e93[_0x2c48c1(0x5db)]('noise'),_0x168e93['removeHorrorEffect'](_0x2c48c1(0x3d8)),_0x168e93[_0x2c48c1(0x5db)]('tv'),_0x168e93['clearHorrorEffects']();}$gamePlayer[_0x2c48c1(0x7ff)]();}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x73b),_0x209f66=>{const _0x4088f1=_0x58cf34;if(!Imported[_0x4088f1(0x488)])return;if(!SceneManager[_0x4088f1(0x3d3)]())return;VisuMZ[_0x4088f1(0x1e7)](_0x209f66,_0x209f66);const _0x39b791=VisuMZ[_0x4088f1(0x2af)](_0x209f66[_0x4088f1(0x871)]),_0x611423=_0x4088f1(0x3d8);_0x209f66[_0x4088f1(0xa8b)]=Math[_0x4088f1(0xafc)](_0x209f66[_0x4088f1(0x36a)]/0x2),_0x209f66[_0x4088f1(0xa72)]=_0x209f66['slices'],_0x209f66[_0x4088f1(0x75d)]=!![];for(const _0xf9ea55 of _0x39b791){if(!_0xf9ea55)continue;_0xf9ea55['setHorrorEffectSettings'](_0x611423,_0x209f66);}$gamePlayer[_0x4088f1(0x7ff)]();}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x8d9),_0x45081f=>{const _0x5af7f7=_0x58cf34;if(!Imported[_0x5af7f7(0x488)])return;if(!SceneManager[_0x5af7f7(0x3d3)]())return;VisuMZ[_0x5af7f7(0x1e7)](_0x45081f,_0x45081f);const _0x391dcd=VisuMZ[_0x5af7f7(0x2af)](_0x45081f[_0x5af7f7(0x871)]);for(const _0x6519a6 of _0x391dcd){if(!_0x6519a6)continue;_0x6519a6[_0x5af7f7(0x5db)](_0x5af7f7(0x3d8));}$gamePlayer[_0x5af7f7(0x7ff)]();}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x690),_0x3e139e=>{const _0x37d356=_0x58cf34;if(!Imported[_0x37d356(0x488)])return;if(!SceneManager[_0x37d356(0x3d3)]())return;VisuMZ[_0x37d356(0x1e7)](_0x3e139e,_0x3e139e);const _0x1c1327=VisuMZ['CreateActionSequenceTargets'](_0x3e139e[_0x37d356(0x871)]),_0xbb50b4=_0x37d356(0x90d);for(const _0x30758a of _0x1c1327){if(!_0x30758a)continue;_0x30758a[_0x37d356(0x288)](_0xbb50b4,_0x3e139e);}$gamePlayer[_0x37d356(0x7ff)]();}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x510),_0x2eb6c4=>{const _0x3f086a=_0x58cf34;if(!Imported[_0x3f086a(0x488)])return;if(!SceneManager[_0x3f086a(0x3d3)]())return;VisuMZ['ConvertParams'](_0x2eb6c4,_0x2eb6c4);const _0x58121b=VisuMZ[_0x3f086a(0x2af)](_0x2eb6c4[_0x3f086a(0x871)]);for(const _0x539013 of _0x58121b){if(!_0x539013)continue;_0x539013['removeHorrorEffect'](_0x3f086a(0x90d));}$gamePlayer['refresh']();}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x955),_0x5d1261=>{const _0x5c43d3=_0x58cf34;if(!Imported[_0x5c43d3(0x488)])return;if(!SceneManager[_0x5c43d3(0x3d3)]())return;VisuMZ['ConvertParams'](_0x5d1261,_0x5d1261);const _0x287805=VisuMZ['CreateActionSequenceTargets'](_0x5d1261[_0x5c43d3(0x871)]),_0x2ed09b='tv';for(const _0x759822 of _0x287805){if(!_0x759822)continue;_0x759822[_0x5c43d3(0x288)](_0x2ed09b,_0x5d1261);}$gamePlayer[_0x5c43d3(0x7ff)]();}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x8a8),_0x4a5d85=>{const _0x4baa78=_0x58cf34;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x4baa78(0x3d3)]())return;VisuMZ[_0x4baa78(0x1e7)](_0x4a5d85,_0x4a5d85);const _0x1cc940=VisuMZ[_0x4baa78(0x2af)](_0x4a5d85[_0x4baa78(0x871)]);for(const _0xdc3759 of _0x1cc940){if(!_0xdc3759)continue;_0xdc3759[_0x4baa78(0x5db)]('tv');}$gamePlayer[_0x4baa78(0x7ff)]();}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],'ActSeq_Impact_BlueRedInvert',_0x32cef2=>{const _0x585e8e=_0x58cf34;if(!Imported[_0x585e8e(0xbe3)])return;const _0x2d1c28=SceneManager[_0x585e8e(0xb85)][_0x585e8e(0x5ae)];if(!_0x2d1c28)return;if(VisuMZ[_0x585e8e(0x4c8)][_0x585e8e(0x7d2)]<=1.04){alert(_0x585e8e(0x6eb)),SceneManager[_0x585e8e(0xcb5)]();return;}VisuMZ[_0x585e8e(0x1e7)](_0x32cef2,_0x32cef2);const _0xae2542=_0x32cef2[_0x585e8e(0x33f)];_0x2d1c28[_0x585e8e(0xb7d)](_0xae2542);}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x28c),_0x218531=>{const _0x238db9=_0x58cf34;if(!SceneManager[_0x238db9(0x3d3)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x46af39=SceneManager['_scene'][_0x238db9(0x5ae)];if(!_0x46af39)return;VisuMZ[_0x238db9(0x1e7)](_0x218531,_0x218531);const _0x5f406a=_0x218531['Intensity']||0x1,_0x4ebf7a=_0x218531[_0x238db9(0x660)]||0x1,_0x586257=_0x218531['EasingType']||_0x238db9(0x7e6);_0x46af39[_0x238db9(0xb7b)](_0x5f406a,_0x4ebf7a,_0x586257);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x5ef),_0x5c3df3=>{const _0x59510d=_0x58cf34;if(!Imported[_0x59510d(0xbe3)])return;const _0x53fee7=SceneManager[_0x59510d(0xb85)]['_spriteset'];if(!_0x53fee7)return;if(VisuMZ[_0x59510d(0x4c8)][_0x59510d(0x7d2)]<=1.04){alert(_0x59510d(0x6eb)),SceneManager[_0x59510d(0xcb5)]();return;}VisuMZ[_0x59510d(0x1e7)](_0x5c3df3,_0x5c3df3);const _0x8ee727=_0x5c3df3[_0x59510d(0x33f)];_0x53fee7[_0x59510d(0xa9e)](_0x8ee727);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x965),_0x5ef75d=>{const _0x21b954=_0x58cf34;if(!SceneManager[_0x21b954(0x3d3)]())return;if(!Imported[_0x21b954(0xbe3)])return;const _0xdda19e=SceneManager['_scene'][_0x21b954(0x5ae)];if(!_0xdda19e)return;VisuMZ[_0x21b954(0x1e7)](_0x5ef75d,_0x5ef75d);const _0x206996=Number(_0x5ef75d['Angle'])||0x0,_0x3685c0=Number(_0x5ef75d[_0x21b954(0xcde)]),_0x395215=_0x5ef75d[_0x21b954(0x660)]||0x1,_0x30b122=_0x5ef75d['EasingType']||'Linear';_0xdda19e[_0x21b954(0x838)](_0x206996,_0x3685c0,_0x395215,_0x30b122);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x9e7),_0xd9e315=>{const _0xa6c482=_0x58cf34;if(!SceneManager[_0xa6c482(0x3d3)]())return;if(!Imported[_0xa6c482(0xbe3)])return;const _0x247db2=SceneManager[_0xa6c482(0xb85)][_0xa6c482(0x5ae)];if(!_0x247db2)return;VisuMZ[_0xa6c482(0x1e7)](_0xd9e315,_0xd9e315);const _0x317553=Number(_0xd9e315['Angle'])||0x0,_0x3ef02b=Number(_0xd9e315[_0xa6c482(0xcde)]),_0x402ba6=_0xd9e315[_0xa6c482(0x660)]||0x1,_0x48022c=_0xd9e315[_0xa6c482(0x5d2)]||_0xa6c482(0x7e6),_0x5acb15=VisuMZ[_0xa6c482(0x2af)](_0xd9e315[_0xa6c482(0x871)]);for(const _0x3de0da of _0x5acb15){if(!_0x3de0da)continue;if(!_0x3de0da[_0xa6c482(0x399)]())continue;_0x3de0da[_0xa6c482(0x399)]()[_0xa6c482(0x838)](_0x317553,_0x3ef02b,_0x402ba6,_0x48022c);}}),PluginManager['registerCommand'](pluginData['name'],_0x58cf34(0xcb4),_0x3a69f7=>{const _0x481f41=_0x58cf34;if(!SceneManager[_0x481f41(0x3d3)]())return;if(!Imported[_0x481f41(0xbe3)])return;VisuMZ[_0x481f41(0x1e7)](_0x3a69f7,_0x3a69f7);const _0x381471={'delay':_0x3a69f7[_0x481f41(0x581)],'duration':_0x3a69f7[_0x481f41(0xa88)],'hue':_0x3a69f7[_0x481f41(0x1f6)],'opacityStart':_0x3a69f7['opacityStart'],'tone':_0x3a69f7[_0x481f41(0x460)],'visible':!![]},_0x32abdb=VisuMZ['CreateActionSequenceTargets'](_0x3a69f7[_0x481f41(0x871)]);for(const _0x21db8a of _0x32abdb){if(!_0x21db8a)continue;_0x21db8a[_0x481f41(0x501)](_0x381471);}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x983),_0x7ad39=>{const _0x50bb44=_0x58cf34;if(!SceneManager[_0x50bb44(0x3d3)]())return;if(!Imported[_0x50bb44(0xbe3)])return;VisuMZ['ConvertParams'](_0x7ad39,_0x7ad39);const _0x4d363a=VisuMZ[_0x50bb44(0x2af)](_0x7ad39['Targets']);for(const _0x25d274 of _0x4d363a){if(!_0x25d274)continue;_0x25d274[_0x50bb44(0x48e)]();}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x8c7),_0x113be2=>{const _0x3b619b=_0x58cf34;if(!Imported[_0x3b619b(0xbe3)])return;const _0x287f21=SceneManager[_0x3b619b(0xb85)][_0x3b619b(0x5ae)];if(!_0x287f21)return;if(VisuMZ[_0x3b619b(0x4c8)][_0x3b619b(0x7d2)]<=1.04){alert(_0x3b619b(0x6eb)),SceneManager['exit']();return;}VisuMZ[_0x3b619b(0x1e7)](_0x113be2,_0x113be2);const _0x22414e=_0x113be2[_0x3b619b(0x33f)];_0x287f21['setupNegativeImpactFilter'](_0x22414e);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x55a),_0x1b9117=>{const _0x53317e=_0x58cf34;if(!Imported[_0x53317e(0xbe3)])return;const _0x16b1c7=SceneManager['_scene'][_0x53317e(0x5ae)];if(!_0x16b1c7)return;if(VisuMZ[_0x53317e(0x4c8)][_0x53317e(0x7d2)]<=1.04){alert(_0x53317e(0x6eb)),SceneManager[_0x53317e(0xcb5)]();return;}VisuMZ[_0x53317e(0x1e7)](_0x1b9117,_0x1b9117);const _0x231397=_0x1b9117[_0x53317e(0x33f)];_0x16b1c7[_0x53317e(0x42d)](_0x231397);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],'ActSeq_Impact_ShockwavePoint',_0x47d2f2=>{const _0x10df59=_0x58cf34;if(!Imported[_0x10df59(0xbe3)])return;const _0x244758=SceneManager[_0x10df59(0xb85)][_0x10df59(0x5ae)];if(!_0x244758)return;VisuMZ[_0x10df59(0x1e7)](_0x47d2f2,_0x47d2f2);const _0x1dac09=_0x47d2f2['X']||0x0,_0x4df779=_0x47d2f2['Y']||0x0,_0x161bda=_0x47d2f2['Amp']||0x0,_0x3d515c=_0x47d2f2[_0x10df59(0x1f0)]||0x0,_0x4f971a=_0x47d2f2[_0x10df59(0x660)]||0x1;_0x244758[_0x10df59(0x64a)](_0x1dac09,_0x4df779,_0x161bda,_0x3d515c,_0x4f971a);}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x525),_0xef02b1=>{const _0x2756b0=_0x58cf34;if(!SceneManager[_0x2756b0(0x3d3)]())return;if(!Imported[_0x2756b0(0xbe3)])return;const _0xb7b010=SceneManager[_0x2756b0(0xb85)][_0x2756b0(0x5ae)];if(!_0xb7b010)return;VisuMZ[_0x2756b0(0x1e7)](_0xef02b1,_0xef02b1);const _0x4084f9=VisuMZ[_0x2756b0(0x2af)](_0xef02b1['Targets']),_0x5f059b=_0xef02b1[_0x2756b0(0x624)],_0x28b9ed=_0xef02b1[_0x2756b0(0x6da)]||0x0,_0x344ff7=_0xef02b1['OffsetY']||0x0,_0x274921=_0xef02b1['Amp']||0x0,_0xbfc4e2=_0xef02b1[_0x2756b0(0x1f0)]||0x0,_0x39470a=_0xef02b1[_0x2756b0(0x660)]||0x1;for(const _0x2321fa of _0x4084f9){if(!_0x2321fa)continue;if(!_0x2321fa['battler']())continue;const _0x39997=_0x2321fa['battler']();let _0x115794=_0x39997['_baseX'],_0x4bf4bf=_0x39997[_0x2756b0(0xa73)];_0x115794+=(Graphics['width']-Graphics[_0x2756b0(0x9ad)])/0x2,_0x4bf4bf+=(Graphics[_0x2756b0(0x725)]-Graphics[_0x2756b0(0x1cb)])/0x2;if(_0x5f059b['match'](/front/i))_0x115794+=(_0x2321fa[_0x2756b0(0x2d8)]()?0x1:-0x1)*_0x39997[_0x2756b0(0x654)]()/0x2;else _0x5f059b['match'](/back/i)&&(_0x115794+=(_0x2321fa['isEnemy']()?-0x1:0x1)*_0x39997['mainSpriteWidth']()/0x2);if(_0x5f059b[_0x2756b0(0xcbb)](/head/i))_0x4bf4bf-=_0x39997[_0x2756b0(0x420)]();else _0x5f059b['match'](/center/i)&&(_0x4bf4bf-=_0x39997[_0x2756b0(0x420)]()/0x2);_0x115794+=_0x28b9ed,_0x4bf4bf+=_0x344ff7,_0xb7b010[_0x2756b0(0x64a)](_0x115794,_0x4bf4bf,_0x274921,_0xbfc4e2,_0x39470a);}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x7a7),_0x2477bf=>{const _0x5dfa53=_0x58cf34;if(!SceneManager[_0x5dfa53(0x3d3)]())return;if(!Imported[_0x5dfa53(0xbe3)])return;const _0x29d6e1=SceneManager[_0x5dfa53(0xb85)]['_spriteset'];if(!_0x29d6e1)return;VisuMZ['ConvertParams'](_0x2477bf,_0x2477bf);const _0x224ca4=VisuMZ['CreateActionSequenceTargets'](_0x2477bf['Targets']),_0xf61422=_0x2477bf[_0x5dfa53(0x624)],_0x4312c1=_0x2477bf[_0x5dfa53(0x6da)]||0x0,_0x1cdf82=_0x2477bf[_0x5dfa53(0x5fb)]||0x0,_0x4f745e=_0x2477bf[_0x5dfa53(0x380)]||0x0,_0x35667e=_0x2477bf[_0x5dfa53(0x1f0)]||0x0,_0x3acb21=_0x2477bf[_0x5dfa53(0x660)]||0x1,_0x226327=Math[_0x5dfa53(0xa8f)](..._0x224ca4[_0x5dfa53(0x5a0)](_0x4df123=>_0x4df123['battler']()['_baseX']-_0x4df123['battler']()[_0x5dfa53(0x654)]()/0x2)),_0x45a0a1=Math[_0x5dfa53(0x238)](..._0x224ca4[_0x5dfa53(0x5a0)](_0x36f3c3=>_0x36f3c3[_0x5dfa53(0x399)]()[_0x5dfa53(0xc19)]+_0x36f3c3[_0x5dfa53(0x399)]()[_0x5dfa53(0x654)]()/0x2)),_0x42579c=Math[_0x5dfa53(0xa8f)](..._0x224ca4[_0x5dfa53(0x5a0)](_0x4d36e1=>_0x4d36e1[_0x5dfa53(0x399)]()[_0x5dfa53(0xa73)]-_0x4d36e1[_0x5dfa53(0x399)]()[_0x5dfa53(0x420)]())),_0x3bc697=Math[_0x5dfa53(0x238)](..._0x224ca4['map'](_0x35cbfa=>_0x35cbfa[_0x5dfa53(0x399)]()[_0x5dfa53(0xa73)])),_0x1d738f=_0x224ca4[_0x5dfa53(0x8b3)](_0x5c1508=>_0x5c1508[_0x5dfa53(0x40c)]())[_0x5dfa53(0x3eb)],_0x462333=_0x224ca4[_0x5dfa53(0x8b3)](_0x1c4aa9=>_0x1c4aa9[_0x5dfa53(0x2d8)]())[_0x5dfa53(0x3eb)];let _0x1d8967=0x0,_0x5751b5=0x0;if(_0xf61422[_0x5dfa53(0xcbb)](/front/i))_0x1d8967=_0x1d738f>=_0x462333?_0x226327:_0x45a0a1;else{if(_0xf61422[_0x5dfa53(0xcbb)](/middle/i))_0x1d8967=(_0x226327+_0x45a0a1)/0x2,melee=-0x1;else _0xf61422[_0x5dfa53(0xcbb)](/back/i)&&(_0x1d8967=_0x1d738f>=_0x462333?_0x45a0a1:_0x226327);}if(_0xf61422['match'](/head/i))_0x5751b5=_0x42579c;else{if(_0xf61422['match'](/center/i))_0x5751b5=(_0x42579c+_0x3bc697)/0x2;else _0xf61422['match'](/base/i)&&(_0x5751b5=_0x3bc697);}_0x1d8967+=(Graphics['width']-Graphics[_0x5dfa53(0x9ad)])/0x2,_0x5751b5+=(Graphics[_0x5dfa53(0x725)]-Graphics[_0x5dfa53(0x1cb)])/0x2,_0x1d8967+=_0x4312c1,_0x5751b5+=_0x1cdf82,_0x29d6e1[_0x5dfa53(0x64a)](_0x1d8967,_0x5751b5,_0x4f745e,_0x35667e,_0x3acb21);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x3c6),_0x1f65a2=>{const _0x4989a1=_0x58cf34;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x47573e=SceneManager['_scene'][_0x4989a1(0x5ae)];if(!_0x47573e)return;if(VisuMZ['ActSeqImpact'][_0x4989a1(0x7d2)]<=1.04){alert(_0x4989a1(0x6eb)),SceneManager[_0x4989a1(0xcb5)]();return;}VisuMZ['ConvertParams'](_0x1f65a2,_0x1f65a2);const _0x2e142c=$gameTemp[_0x4989a1(0x20b)](),_0x45a8de=Math[_0x4989a1(0x238)](0.01,_0x1f65a2[_0x4989a1(0x91e)]);$gameTemp['setBattleImpactTimeScale'](_0x45a8de,_0x2e142c);}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xcac),_0x3e6441=>{const _0x16aa33=_0x58cf34;if(!Imported[_0x16aa33(0xbe3)])return;const _0xaf27bd=SceneManager[_0x16aa33(0xb85)][_0x16aa33(0x5ae)];if(!_0xaf27bd)return;if(VisuMZ[_0x16aa33(0x4c8)][_0x16aa33(0x7d2)]<=1.04){alert(_0x16aa33(0x6eb)),SceneManager[_0x16aa33(0xcb5)]();return;}VisuMZ['ConvertParams'](_0x3e6441,_0x3e6441);const _0x4426eb=$gameTemp[_0x16aa33(0x20b)](),_0x582d9a=_0x3e6441['ms']||0x1;VisuMZ['ActSeqImpact'][_0x16aa33(0x5a1)](_0x582d9a,_0x4426eb);}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xb34),_0x1bd3f8=>{const _0x2de525=_0x58cf34;if(!Imported[_0x2de525(0xbe3)])return;const _0x4827e3=SceneManager['_scene']['_spriteset'];if(!_0x4827e3)return;VisuMZ[_0x2de525(0x1e7)](_0x1bd3f8,_0x1bd3f8);const _0x1d6b2e=_0x1bd3f8['X']||0x0,_0x3cb4a2=_0x1bd3f8['Y']||0x0,_0x3fcb8e=_0x1bd3f8['Strength']||0x0,_0x41c130=_0x1bd3f8[_0x2de525(0xc28)]||0x0,_0x5d3b21=_0x1bd3f8[_0x2de525(0x660)]||0x1,_0x240d43=_0x1bd3f8[_0x2de525(0x5d2)]||'Linear';_0x4827e3['setupZoomBlurImpactFilter'](_0x3fcb8e,_0x1d6b2e,_0x3cb4a2,_0x41c130,_0x5d3b21,_0x240d43);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x882),_0x493e4d=>{const _0xd822db=_0x58cf34;if(!Imported[_0xd822db(0xbe3)])return;const _0x171ce6=SceneManager[_0xd822db(0xb85)][_0xd822db(0x5ae)];if(!_0x171ce6)return;VisuMZ[_0xd822db(0x1e7)](_0x493e4d,_0x493e4d);const _0x46c485=VisuMZ['CreateActionSequenceTargets'](_0x493e4d[_0xd822db(0x871)]),_0x5803d1=_0x493e4d['TargetLocation'],_0x313d75=_0x493e4d[_0xd822db(0x6da)]||0x0,_0xbe3d63=_0x493e4d[_0xd822db(0x5fb)]||0x0,_0x187bbe=_0x493e4d[_0xd822db(0xc9f)]||0x0,_0x2dd2ef=_0x493e4d[_0xd822db(0xc28)]||0x0,_0x2df27e=_0x493e4d[_0xd822db(0x660)]||0x1,_0x3c3ffb=_0x493e4d[_0xd822db(0x5d2)]||_0xd822db(0x7e6),_0x45280a=Math[_0xd822db(0xa8f)](..._0x46c485[_0xd822db(0x5a0)](_0xa5f44d=>_0xa5f44d['battler']()[_0xd822db(0xc19)]-_0xa5f44d[_0xd822db(0x399)]()['mainSpriteWidth']()/0x2)),_0x49e9e6=Math['max'](..._0x46c485[_0xd822db(0x5a0)](_0x5036a1=>_0x5036a1[_0xd822db(0x399)]()[_0xd822db(0xc19)]+_0x5036a1[_0xd822db(0x399)]()[_0xd822db(0x654)]()/0x2)),_0x462749=Math[_0xd822db(0xa8f)](..._0x46c485['map'](_0x315b31=>_0x315b31[_0xd822db(0x399)]()[_0xd822db(0xa73)]-_0x315b31[_0xd822db(0x399)]()[_0xd822db(0x420)]())),_0x48b2bb=Math[_0xd822db(0x238)](..._0x46c485['map'](_0x55fbb8=>_0x55fbb8[_0xd822db(0x399)]()[_0xd822db(0xa73)])),_0x9654f=_0x46c485[_0xd822db(0x8b3)](_0x2bd7ef=>_0x2bd7ef[_0xd822db(0x40c)]())['length'],_0x9248fd=_0x46c485['filter'](_0x5cfd7a=>_0x5cfd7a['isEnemy']())[_0xd822db(0x3eb)];let _0x5e4643=0x0,_0x4d03cb=0x0;if(_0x5803d1[_0xd822db(0xcbb)](/front/i))_0x5e4643=_0x9654f>=_0x9248fd?_0x45280a:_0x49e9e6;else{if(_0x5803d1['match'](/middle/i))_0x5e4643=(_0x45280a+_0x49e9e6)/0x2,melee=-0x1;else _0x5803d1[_0xd822db(0xcbb)](/back/i)&&(_0x5e4643=_0x9654f>=_0x9248fd?_0x49e9e6:_0x45280a);}if(_0x5803d1[_0xd822db(0xcbb)](/head/i))_0x4d03cb=_0x462749;else{if(_0x5803d1[_0xd822db(0xcbb)](/center/i))_0x4d03cb=(_0x462749+_0x48b2bb)/0x2;else _0x5803d1['match'](/base/i)&&(_0x4d03cb=_0x48b2bb);}_0x5e4643+=(Graphics[_0xd822db(0xc78)]-Graphics[_0xd822db(0x9ad)])/0x2,_0x4d03cb+=(Graphics[_0xd822db(0x725)]-Graphics[_0xd822db(0x1cb)])/0x2,_0x5e4643+=_0x313d75,_0x4d03cb+=_0xbe3d63,_0x171ce6['setupZoomBlurImpactFilter'](_0x187bbe,_0x5e4643,_0x4d03cb,_0x2dd2ef,_0x2df27e,_0x3c3ffb);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],'ActSeq_Inject_AnimationStart',_0x507848=>{const _0x26bc3b=_0x58cf34;if(!Imported[_0x26bc3b(0xbe3)])return;const _0x48b955=SceneManager['_scene'][_0x26bc3b(0x5ae)];if(!_0x48b955)return;if(VisuMZ[_0x26bc3b(0x4c8)][_0x26bc3b(0x7d2)]<=1.05){alert(_0x26bc3b(0x6eb)),SceneManager[_0x26bc3b(0xcb5)]();return;}VisuMZ[_0x26bc3b(0x1e7)](_0x507848,_0x507848);const _0x889884=VisuMZ[_0x26bc3b(0x2af)](_0x507848[_0x26bc3b(0x871)]),_0x448f06={'filename':_0x507848[_0x26bc3b(0xb7f)],'horzCells':_0x507848[_0x26bc3b(0x2d5)]||0x1,'vertCells':_0x507848[_0x26bc3b(0x5ac)]||0x1,'frameDelay':_0x507848[_0x26bc3b(0x4af)]||0x1,'smooth':_0x507848[_0x26bc3b(0x78d)]||![],'anchorX':_0x507848[_0x26bc3b(0xca0)]||0x0,'anchorY':_0x507848[_0x26bc3b(0x633)]||0x0,'offsetX':_0x507848[_0x26bc3b(0x7ce)]||0x0,'offsetY':_0x507848['offsetY']||0x0};for(const _0x5274a4 of _0x889884){if(!_0x5274a4)continue;if(!_0x5274a4[_0x26bc3b(0x399)]())continue;_0x5274a4[_0x26bc3b(0x399)]()['startInjectAnimation'](_0x448f06);}const _0xa2e29f=$gameTemp[_0x26bc3b(0x20b)]();_0xa2e29f&&_0xa2e29f[_0x26bc3b(0x9d6)](_0x26bc3b(0x672));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x87d),_0x986e74=>{const _0x42a797=_0x58cf34;if(!Imported[_0x42a797(0xbe3)])return;const _0x57392f=SceneManager[_0x42a797(0xb85)]['_spriteset'];if(!_0x57392f)return;if(VisuMZ[_0x42a797(0x4c8)][_0x42a797(0x7d2)]<=1.05){alert(_0x42a797(0x6eb)),SceneManager[_0x42a797(0xcb5)]();return;}VisuMZ[_0x42a797(0x1e7)](_0x986e74,_0x986e74);const _0x5871c8=VisuMZ[_0x42a797(0x2af)](_0x986e74[_0x42a797(0x871)]);for(const _0x401b41 of _0x5871c8){if(!_0x401b41)continue;if(!_0x401b41[_0x42a797(0x399)]())continue;_0x401b41[_0x42a797(0x399)]()['stopInjectAnimation']();}}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0xbb3),_0x5f4f42=>{const _0x34c942=_0x58cf34;if(!Imported[_0x34c942(0xbe3)])return;const _0x21ea7b=SceneManager[_0x34c942(0xb85)][_0x34c942(0x5ae)];if(!_0x21ea7b)return;if(VisuMZ[_0x34c942(0x4c8)][_0x34c942(0x7d2)]<=1.05){alert(_0x34c942(0x6eb)),SceneManager[_0x34c942(0xcb5)]();return;}VisuMZ[_0x34c942(0x1e7)](_0x5f4f42,_0x5f4f42);const _0x311a07=VisuMZ[_0x34c942(0x2af)](_0x5f4f42[_0x34c942(0x871)]),_0x2995cb=_0x5f4f42[_0x34c942(0x321)];for(const _0x2b1714 of _0x311a07){if(!_0x2b1714)continue;if(!_0x2b1714[_0x34c942(0x399)]())continue;_0x2b1714['battler']()[_0x34c942(0x6c3)](_0x2995cb);}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x532),_0x26b99b=>{const _0xba95e4=_0x58cf34;if(!SceneManager[_0xba95e4(0x3d3)]())return;const _0x53ecfe=$gameTemp[_0xba95e4(0x20b)]();if(!_0x53ecfe)return;_0x53ecfe[_0xba95e4(0x9d6)](_0xba95e4(0x6ee));}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0xba0),_0x2363bb=>{const _0x58ad8e=_0x58cf34;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2363bb,_0x2363bb);const _0x1f1408=$gameTemp[_0x58ad8e(0x20b)](),_0x167ddd=BattleManager['_action'],_0x568fd0=BattleManager[_0x58ad8e(0x6f1)],_0x4e3aa3=BattleManager[_0x58ad8e(0x55c)];if(!_0x1f1408||!_0x167ddd||!_0x568fd0)return;if(!_0x167ddd['item']())return;const _0x479c4b=VisuMZ[_0x58ad8e(0x2af)](_0x2363bb[_0x58ad8e(0x871)]);for(const _0x286414 of _0x479c4b){if(!_0x286414)continue;_0x4e3aa3[_0x58ad8e(0x6db)](_0x58ad8e(0x723),_0x568fd0,_0x286414);}_0x1f1408[_0x58ad8e(0x9d6)](_0x58ad8e(0x738));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],'ActSeq_Mechanics_ActiveChainInputDisable',_0x31f9f3=>{const _0x2a439a=_0x58cf34;if(!SceneManager[_0x2a439a(0x3d3)]())return;if(!Imported[_0x2a439a(0x452)])return;$gameTemp[_0x2a439a(0x6d0)]=!![];}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xb12),_0x23aa23=>{const _0x2f6524=_0x58cf34;if(!SceneManager[_0x2f6524(0x3d3)]())return;VisuMZ[_0x2f6524(0x1e7)](_0x23aa23,_0x23aa23);const _0x101f5b=[_0x2f6524(0xcb6),_0x2f6524(0x1e3),'ATK',_0x2f6524(0x4d9),_0x2f6524(0x985),_0x2f6524(0xa75),'AGI','LUK'],_0x1ce3ec=_0x23aa23[_0x2f6524(0x3e4)],_0x29a24f=_0x23aa23['Debuffs'],_0x23ba14=_0x23aa23[_0x2f6524(0xc3c)],_0x543fbb=VisuMZ[_0x2f6524(0x2af)](_0x23aa23[_0x2f6524(0x871)]);for(const _0x57a59b of _0x543fbb){if(!_0x57a59b)continue;for(const _0x467496 of _0x1ce3ec){const _0x2c889c=_0x101f5b[_0x2f6524(0xccf)](_0x467496['toUpperCase']()[_0x2f6524(0x989)]());_0x2c889c>=0x0&&_0x2c889c<=0x7&&_0x57a59b[_0x2f6524(0x1e5)](_0x2c889c,_0x23ba14);}for(const _0x2f6f1c of _0x29a24f){const _0x20d1f5=_0x101f5b[_0x2f6524(0xccf)](_0x2f6f1c[_0x2f6524(0x6f5)]()[_0x2f6524(0x989)]());_0x20d1f5>=0x0&&_0x20d1f5<=0x7&&_0x57a59b[_0x2f6524(0x934)](_0x20d1f5,_0x23ba14);}}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],'ActSeq_Mechanics_AddState',_0x38821e=>{const _0x5555ee=_0x58cf34;if(!SceneManager[_0x5555ee(0x3d3)]())return;VisuMZ['ConvertParams'](_0x38821e,_0x38821e);const _0x42df3f=_0x38821e[_0x5555ee(0x8de)],_0x565e85=VisuMZ[_0x5555ee(0x2af)](_0x38821e[_0x5555ee(0x871)]);for(const _0x1bd86d of _0x565e85){if(!_0x1bd86d)continue;for(const _0x41870d of _0x42df3f){_0x1bd86d[_0x5555ee(0x604)](_0x41870d);}}}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],'ActSeq_Mechanics_ArmorPenetration',_0xa90559=>{const _0x4ed2fa=_0x58cf34;if(!SceneManager[_0x4ed2fa(0x3d3)]())return;VisuMZ[_0x4ed2fa(0x1e7)](_0xa90559,_0xa90559);const _0x5253a4=BattleManager[_0x4ed2fa(0x5fc)],_0x520081={'arPenRate':_0xa90559[_0x4ed2fa(0xa31)],'arPenFlat':_0xa90559[_0x4ed2fa(0xbcd)],'arRedRate':_0xa90559['ArRedRate'],'arRedFlat':_0xa90559[_0x4ed2fa(0x2c5)]};_0x5253a4['_armorPenetration']=_0x520081;}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xaea),_0x53cc1d=>{const _0x3f940c=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3f940c(0x8db)])return;VisuMZ['ConvertParams'](_0x53cc1d,_0x53cc1d);const _0x3e9b6b=VisuMZ[_0x3f940c(0x2af)](_0x53cc1d[_0x3f940c(0x871)]),_0x516291=_0x53cc1d[_0x3f940c(0x3df)]||0x1;for(const _0x2e1683 of _0x3e9b6b){if(!_0x2e1683)continue;if(!_0x2e1683[_0x3f940c(0x2d8)]())continue;_0x2e1683[_0x3f940c(0x3e1)](_0x516291);}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],'ActSeq_Mechanics_AtbGauge',_0x53aad9=>{const _0x1e8245=_0x58cf34;if(!SceneManager[_0x1e8245(0x3d3)]())return;if(!Imported[_0x1e8245(0x4ae)])return;if(!BattleManager[_0x1e8245(0x939)]())return;VisuMZ[_0x1e8245(0x1e7)](_0x53aad9,_0x53aad9);const _0x4c7458=VisuMZ['CreateActionSequenceTargets'](_0x53aad9[_0x1e8245(0x871)]),_0x4e3d80=_0x53aad9[_0x1e8245(0x225)],_0x1ff5a7=_0x53aad9['ChargeRate'],_0x2fb061=_0x53aad9[_0x1e8245(0x72f)];for(const _0x3aa1d3 of _0x4c7458){if(!_0x3aa1d3)continue;if(_0x3aa1d3[_0x1e8245(0x910)]())_0x3aa1d3[_0x1e8245(0x7f1)](_0x4e3d80);else{if(_0x3aa1d3['isAtbCastingState']()){_0x3aa1d3['changeAtbCastTime'](_0x1ff5a7);if(_0x2fb061)_0x3aa1d3[_0x1e8245(0x511)]();}}}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x32b),_0x1dd7ad=>{const _0x12d796=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x12d796(0x88c)])return;VisuMZ[_0x12d796(0x1e7)](_0x1dd7ad,_0x1dd7ad);const _0x1d910a=VisuMZ[_0x12d796(0x2af)](_0x1dd7ad['Targets']),_0x2882a4=_0x1dd7ad['BoostPoints'];for(const _0x5305cc of _0x1d910a){if(!_0x5305cc)continue;_0x5305cc[_0x12d796(0xc51)](_0x2882a4);}}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0xc30),_0x5762dc=>{const _0x327c4a=_0x58cf34;if(!SceneManager[_0x327c4a(0x3d3)]())return;if(!Imported[_0x327c4a(0x88c)])return;if(!BattleManager[_0x327c4a(0x6f1)])return;VisuMZ[_0x327c4a(0x1e7)](_0x5762dc,_0x5762dc);const _0x5a7a3a=_0x5762dc['VariableID'];$gameVariables[_0x327c4a(0x584)](_0x5a7a3a,BattleManager[_0x327c4a(0x6f1)]['toUseBoostPoints']());}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x9eb),_0x49fe6a=>{const _0x184f33=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x184f33(0x879)])return;VisuMZ[_0x184f33(0x1e7)](_0x49fe6a,_0x49fe6a);const _0x48015e=VisuMZ[_0x184f33(0x2af)](_0x49fe6a[_0x184f33(0x871)]),_0x4d200f=_0x49fe6a[_0x184f33(0xc8e)];for(const _0x26e52e of _0x48015e){if(!_0x26e52e)continue;if(_0x26e52e[_0x184f33(0x732)]())continue;if(!_0x26e52e[_0x184f33(0x912)]())continue;_0x26e52e['alterBreakShield'](_0x4d200f);}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x864),_0x5bbd4c=>{const _0x1a4f15=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1a4f15(0x879)])return;VisuMZ[_0x1a4f15(0x1e7)](_0x5bbd4c,_0x5bbd4c);const _0x1e9329=VisuMZ[_0x1a4f15(0x2af)](_0x5bbd4c[_0x1a4f15(0x871)]);for(const _0x42dc68 of _0x1e9329){if(!_0x42dc68)continue;if(_0x42dc68['isBreakStunned']())continue;if(!_0x42dc68[_0x1a4f15(0x912)]())continue;_0x42dc68[_0x1a4f15(0x82c)]();}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_BtbGain',_0x5c793d=>{const _0x3ce91d=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3ce91d(0x708)])return;if(!BattleManager[_0x3ce91d(0x2bf)]())return;VisuMZ['ConvertParams'](_0x5c793d,_0x5c793d);const _0x3e42d4=VisuMZ[_0x3ce91d(0x2af)](_0x5c793d[_0x3ce91d(0x871)]),_0x44c272=_0x5c793d[_0x3ce91d(0x998)];for(const _0x2875aa of _0x3e42d4){if(!_0x2875aa)continue;_0x2875aa[_0x3ce91d(0x92a)](_0x44c272);}}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],'ActSeq_Mechanics_Collapse',_0x2fda34=>{const _0x5ec09b=_0x58cf34;if(!SceneManager[_0x5ec09b(0x3d3)]())return;VisuMZ[_0x5ec09b(0x1e7)](_0x2fda34,_0x2fda34);const _0x2398d6=$gameTemp[_0x5ec09b(0x20b)](),_0xd49099=BattleManager['_action'],_0x19d781=BattleManager['_subject'];if(!_0x2398d6||!_0xd49099||!_0x19d781)return;if(!_0xd49099[_0x5ec09b(0xb8a)]())return;const _0x46871f=VisuMZ[_0x5ec09b(0x2af)](_0x2fda34[_0x5ec09b(0x871)]);for(const _0x10515a of _0x46871f){if(!_0x10515a)continue;_0x2fda34['ForceDeath']&&(_0x10515a[_0x5ec09b(0xc94)](),_0x10515a[_0x5ec09b(0x604)](_0x10515a[_0x5ec09b(0xcbd)]())),_0x10515a[_0x5ec09b(0x4c0)]()&&_0x10515a[_0x5ec09b(0xccc)]();}_0x2398d6['setWaitMode'](_0x5ec09b(0x6f2));}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x296),_0x518d5c=>{const _0x463b36=_0x58cf34;if(!SceneManager[_0x463b36(0x3d3)]())return;if(!Imported[_0x463b36(0x528)])return;if(!BattleManager[_0x463b36(0x8a3)]())return;VisuMZ[_0x463b36(0x1e7)](_0x518d5c,_0x518d5c);const _0x5021ea=VisuMZ[_0x463b36(0x2af)](_0x518d5c['Targets']),_0x3ad1b0=_0x518d5c[_0x463b36(0x48d)];for(const _0x9904f1 of _0x5021ea){if(!_0x9904f1)continue;_0x9904f1[_0x463b36(0x9c9)](_0x3ad1b0);}}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0xb5b),_0x56d0d5=>{const _0x9756ee=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x9756ee(0x8a3)]())return;VisuMZ['ConvertParams'](_0x56d0d5,_0x56d0d5);const _0xa8c3f2=VisuMZ[_0x9756ee(0x2af)](_0x56d0d5['Targets']),_0xda24f3=_0x56d0d5[_0x9756ee(0x225)],_0x24bb6b=_0x56d0d5[_0x9756ee(0x225)];for(const _0x5a67c8 of _0xa8c3f2){if(!_0x5a67c8)continue;if(_0x5a67c8['_tpbState']===_0x9756ee(0x255))_0x5a67c8[_0x9756ee(0xbe8)](_0xda24f3);else _0x5a67c8[_0x9756ee(0x3a7)]===_0x9756ee(0x310)&&_0x5a67c8[_0x9756ee(0x3f8)](_0x24bb6b);}}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x46b),_0xc05a83=>{const _0x23f650=_0x58cf34;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x23f650(0x1e7)](_0xc05a83,_0xc05a83);const _0x29f802=BattleManager[_0x23f650(0x5fc)];if(!_0x29f802)return;let _0x5b155d=_0xc05a83[_0x23f650(0x2f7)];_0x29f802['setCustomDamageFormula'](_0x5b155d);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x49c),_0x32feb3=>{const _0x3ccf3d=_0x58cf34;if(!SceneManager[_0x3ccf3d(0x3d3)]())return;VisuMZ[_0x3ccf3d(0x1e7)](_0x32feb3,_0x32feb3);const _0x155b06=VisuMZ[_0x3ccf3d(0x2af)](_0x32feb3[_0x3ccf3d(0x871)]);for(const _0x2523e0 of _0x155b06){if(!_0x2523e0)continue;if(_0x2523e0['shouldPopupDamage']())_0x2523e0[_0x3ccf3d(0xb44)]();}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_DeathBreak',_0x3120c6=>{const _0x155037=_0x58cf34;if(!SceneManager[_0x155037(0x3d3)]())return;VisuMZ[_0x155037(0x1e7)](_0x3120c6,_0x3120c6);const _0x2751e4=$gameTemp[_0x155037(0x20b)](),_0x550bf3=BattleManager['_subject'],_0x2e64d9=_0x3120c6[_0x155037(0x728)];if(!_0x2751e4)return;if(!_0x550bf3)return;_0x550bf3&&_0x550bf3[_0x155037(0xc87)]()&&_0x2e64d9['toUpperCase']()[_0x155037(0x989)]()!==_0x155037(0x665)&&_0x2751e4[_0x155037(0xad5)]([_0x2e64d9]);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],'ActSeq_Mechanics_EmulateAttackEffect',_0x443aa2=>{const _0x2abafc=_0x58cf34;if(!SceneManager[_0x2abafc(0x3d3)]())return;VisuMZ[_0x2abafc(0x1e7)](_0x443aa2,_0x443aa2);const _0xd53bb5=$gameTemp[_0x2abafc(0x20b)](),_0x31efed=BattleManager['_logWindow'];if(!_0xd53bb5)return;const _0x4ed007=VisuMZ['CreateActionSequenceTargets'](_0x443aa2[_0x2abafc(0xaf1)]),_0x120563=VisuMZ[_0x2abafc(0x2af)](_0x443aa2[_0x2abafc(0x871)]);for(const _0x5f3e16 of _0x4ed007){for(const _0x1575d8 of _0x120563){if(!_0x1575d8)continue;const _0x2ce146=$dataSkills[_0x5f3e16[_0x2abafc(0x326)]()];_0x31efed[_0x2abafc(0x6db)](_0x2abafc(0x8b2),_0x5f3e16,_0x1575d8,_0x2ce146);}}_0xd53bb5[_0x2abafc(0x9d6)](_0x2abafc(0x738));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x284),_0x530ea1=>{const _0x18d98b=_0x58cf34;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x18d98b(0x1e7)](_0x530ea1,_0x530ea1);const _0x1a7361=$gameTemp[_0x18d98b(0x20b)](),_0x46b1e0=BattleManager['_logWindow'];if(!_0x1a7361)return;const _0x1454b5=VisuMZ['CreateActionSequenceTargets'](_0x530ea1['Users']),_0x520aed=VisuMZ[_0x18d98b(0x2af)](_0x530ea1[_0x18d98b(0x871)]);for(const _0x41b327 of _0x1454b5){for(const _0x697216 of _0x520aed){if(!_0x697216)continue;const _0x29e56f=$dataSkills[_0x41b327[_0x18d98b(0x74c)]()];_0x46b1e0[_0x18d98b(0x6db)]('emulateActionEffect',_0x41b327,_0x697216,_0x29e56f);}}_0x1a7361['setWaitMode'](_0x18d98b(0x738));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x7fd),_0x5592f1=>{const _0x54fa45=_0x58cf34;if(!SceneManager[_0x54fa45(0x3d3)]())return;VisuMZ[_0x54fa45(0x1e7)](_0x5592f1,_0x5592f1);const _0x4aa254=$gameTemp[_0x54fa45(0x20b)](),_0x423bb5=BattleManager[_0x54fa45(0x55c)],_0xbc608e=Number(_0x5592f1[_0x54fa45(0xaa2)]||0x1),_0x5e2cbb=$dataItems[_0xbc608e];if(!_0x4aa254)return;if(!_0x5e2cbb)return;const _0x48d8f6=VisuMZ[_0x54fa45(0x2af)](_0x5592f1['Users']),_0x3145d1=VisuMZ[_0x54fa45(0x2af)](_0x5592f1[_0x54fa45(0x871)]);for(const _0x364d5b of _0x48d8f6){for(const _0x43384a of _0x3145d1){if(!_0x43384a)continue;_0x423bb5[_0x54fa45(0x6db)](_0x54fa45(0x8b2),_0x364d5b,_0x43384a,_0x5e2cbb);}}_0x4aa254[_0x54fa45(0x9d6)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xbca),_0x1333ee=>{const _0xd05c0e=_0x58cf34;if(!SceneManager[_0xd05c0e(0x3d3)]())return;VisuMZ['ConvertParams'](_0x1333ee,_0x1333ee);let _0x451c4e=Number(_0x1333ee[_0xd05c0e(0x5b5)]||0x0);if(_0x451c4e<=0x0){const _0x3de9cb=BattleManager['_action'];if(_0x3de9cb&&_0x3de9cb[_0xd05c0e(0xcad)]())_0x451c4e=_0x3de9cb['item']()['id'];else return;}const _0x160372=$dataSkills[_0x451c4e];if(!_0x160372)return;const _0x21b5d0=VisuMZ['CreateActionSequenceTargets'](_0x1333ee[_0xd05c0e(0xaf1)]);for(const _0x4253a5 of _0x21b5d0){_0x4253a5[_0xd05c0e(0x3a6)](_0x160372);}}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x307),_0x45a0cf=>{const _0x2c8228=_0x58cf34;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2c8228(0x1e7)](_0x45a0cf,_0x45a0cf);const _0x4811d7=$gameTemp[_0x2c8228(0x20b)](),_0x568ecf=BattleManager['_logWindow'],_0xc785e6=Number(_0x45a0cf['SkillID']||0x1),_0x30acd1=$dataSkills[_0xc785e6];if(!_0x4811d7)return;if(!_0x30acd1)return;const _0x27f849=VisuMZ[_0x2c8228(0x2af)](_0x45a0cf[_0x2c8228(0xaf1)]),_0xea9c2d=VisuMZ[_0x2c8228(0x2af)](_0x45a0cf['Targets']);for(const _0x113665 of _0x27f849){for(const _0x2b48b4 of _0xea9c2d){if(!_0x2b48b4)continue;_0x568ecf['push'](_0x2c8228(0x8b2),_0x113665,_0x2b48b4,_0x30acd1);}}_0x4811d7['setWaitMode']('battlelog');}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],'ActSeq_Mechanics_EnemyEscape',_0x38e828=>{const _0x2f9578=_0x58cf34;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2f9578(0x1e7)](_0x38e828,_0x38e828);const _0x54fee0=VisuMZ[_0x2f9578(0x2af)](_0x38e828[_0x2f9578(0x871)]);for(const _0x437cca of _0x54fee0){if(!_0x437cca)continue;if(!_0x437cca[_0x2f9578(0x2d8)]())continue;_0x437cca[_0x2f9578(0x6f3)]();}}),PluginManager['registerCommand'](pluginData['name'],_0x58cf34(0x1dd),_0x48520f=>{const _0x5439d0=_0x58cf34;if(!SceneManager[_0x5439d0(0x3d3)]())return;if(!Imported[_0x5439d0(0xb68)])return;if(!BattleManager[_0x5439d0(0xc25)]())return;VisuMZ['ConvertParams'](_0x48520f,_0x48520f);const _0x37703f=_0x48520f[_0x5439d0(0x227)];BattleManager[_0x5439d0(0x6f1)]&&BattleManager[_0x5439d0(0x6f1)][_0x5439d0(0x8d8)]()['gainCurrentActionsETB'](_0x37703f);}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],'ActSeq_Mechanics_FtbAction',_0x2b4e62=>{const _0x3f4585=_0x58cf34;if(!SceneManager[_0x3f4585(0x3d3)]())return;if(!Imported[_0x3f4585(0x42c)])return;if(!BattleManager['isFTB']())return;VisuMZ[_0x3f4585(0x1e7)](_0x2b4e62,_0x2b4e62);const _0x30bb2b=_0x2b4e62['ActionCount'];BattleManager[_0x3f4585(0x6f1)]&&BattleManager['_subject'][_0x3f4585(0x8d8)]()[_0x3f4585(0x74b)](_0x30bb2b);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x3f2),_0xd49e5c=>{const _0x257a16=_0x58cf34;if(!SceneManager[_0x257a16(0x3d3)]())return;VisuMZ[_0x257a16(0x1e7)](_0xd49e5c,_0xd49e5c);const _0x98ff4f=VisuMZ['CreateActionSequenceTargets'](_0xd49e5c['Targets']),_0x558c2f=_0xd49e5c[_0x257a16(0xa5e)],_0x32379d=_0xd49e5c[_0x257a16(0x867)],_0x760243=_0xd49e5c['MP_Rate'],_0x42d1ef=_0xd49e5c['MP_Flat'],_0x200469=_0xd49e5c[_0x257a16(0x267)],_0x516a63=_0xd49e5c['TP_Flat'],_0x1be79d=_0xd49e5c[_0x257a16(0x3b9)];for(const _0x55ab8c of _0x98ff4f){if(!_0x55ab8c)continue;const _0x4a69f5=_0x55ab8c[_0x257a16(0x328)](),_0x47c70a=Math[_0x257a16(0x92e)](_0x558c2f*_0x55ab8c[_0x257a16(0xa45)]+_0x32379d),_0x5423eb=Math[_0x257a16(0x92e)](_0x760243*_0x55ab8c[_0x257a16(0x967)]+_0x42d1ef),_0x49812c=Math[_0x257a16(0x92e)](_0x200469*_0x55ab8c[_0x257a16(0xc5f)]()+_0x516a63);if(_0x47c70a!==0x0)_0x55ab8c[_0x257a16(0x5f9)](_0x47c70a);if(_0x5423eb!==0x0)_0x55ab8c[_0x257a16(0xc81)](_0x5423eb);if(_0x49812c!==0x0)_0x55ab8c[_0x257a16(0x4ac)](_0x49812c);if(_0x1be79d)_0x55ab8c[_0x257a16(0xb44)]();_0x4a69f5&&_0x55ab8c['isDead']()&&_0x55ab8c[_0x257a16(0xccc)]();}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xc56),_0x40458a=>{const _0xea66f9=_0x58cf34;if(!SceneManager[_0xea66f9(0x3d3)]())return;VisuMZ[_0xea66f9(0x1e7)](_0x40458a,_0x40458a);const _0x63c42f=VisuMZ[_0xea66f9(0x2af)](_0x40458a['Targets']);for(const _0x227491 of _0x63c42f){if(!_0x227491)continue;_0x227491[_0xea66f9(0xb42)](_0x40458a[_0xea66f9(0x35d)]);}}),PluginManager['registerCommand'](pluginData['name'],_0x58cf34(0x84f),_0x2524d1=>{const _0x297c28=_0x58cf34;if(!SceneManager[_0x297c28(0x3d3)]())return;VisuMZ[_0x297c28(0x1e7)](_0x2524d1,_0x2524d1);const _0x2fbed7=BattleManager[_0x297c28(0x5fc)],_0x3ad3d1={'criticalHitRate':_0x2524d1[_0x297c28(0xca9)],'criticalHitFlat':_0x2524d1[_0x297c28(0xb30)],'criticalDmgRate':_0x2524d1['CriticalDmgRate'],'criticalDmgFlat':_0x2524d1['CriticalDmgFlat'],'damageRate':_0x2524d1['DamageRate'],'damageFlat':_0x2524d1[_0x297c28(0x52f)],'hitRate':_0x2524d1['HitRate'],'hitFlat':_0x2524d1[_0x297c28(0xc52)]};_0x2fbed7['_multipliers']=_0x3ad3d1;}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xc24),_0x26fbf8=>{const _0x32e505=_0x58cf34;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x32e505(0x1e7)](_0x26fbf8,_0x26fbf8);const _0x563c39=_0x26fbf8[_0x32e505(0xbab)];SceneManager[_0x32e505(0xb85)]['playOnceParallelInterpreter'](_0x563c39);}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],'ActSeq_Mechanics_OtbOrder',_0x2babc6=>{const _0x37b4cf=_0x58cf34;if(!SceneManager[_0x37b4cf(0x3d3)]())return;if(!Imported[_0x37b4cf(0x6a8)])return;if(!BattleManager['isOTB']())return;VisuMZ[_0x37b4cf(0x1e7)](_0x2babc6,_0x2babc6);const _0x41a062=VisuMZ[_0x37b4cf(0x2af)](_0x2babc6['Targets']);for(const _0x96fe5d of _0x41a062){if(!_0x96fe5d)continue;let _0x2c138d=_0x2babc6[_0x37b4cf(0xb80)],_0x122a3c=_0x2babc6[_0x37b4cf(0x9f9)],_0x13e7e8=_0x2babc6[_0x37b4cf(0xc03)];BattleManager[_0x37b4cf(0x4d8)][_0x37b4cf(0x375)](_0x96fe5d)?_0x2c138d+=_0x13e7e8:_0x122a3c+=_0x13e7e8,BattleManager[_0x37b4cf(0x8ff)](_0x96fe5d,-_0x2c138d,![]),BattleManager['turnOrderChangeOTB'](_0x96fe5d,-_0x122a3c,!![]);}}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0xae0),_0x1d7ad5=>{const _0xa9767f=_0x58cf34;if(!SceneManager[_0xa9767f(0x3d3)]())return;if(!Imported[_0xa9767f(0xbf3)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0xa9767f(0x1e7)](_0x1d7ad5,_0x1d7ad5);const _0x31786d=BattleManager[_0xa9767f(0x6f1)][_0xa9767f(0x8d8)](),_0x4fb648=_0x1d7ad5[_0xa9767f(0xa9d)],_0x307fe2=_0x1d7ad5[_0xa9767f(0x5a4)]||_0xa9767f(0x2eb),_0x3ed937=_0x1d7ad5[_0xa9767f(0x78e)]||'unchanged',_0x555d66=_0x1d7ad5['alterCost']||0x0,_0x1eeb91=_0x1d7ad5['alterPriority']||0x0;(_0x31786d[_0xa9767f(0xbf0)]()||_0x4fb648)&&(_0x4fb648&&(_0x31786d[_0xa9767f(0xc9b)]=_0x31786d[_0xa9767f(0xc9b)]||{},_0x31786d['_ptbActionCost'][_0xa9767f(0x350)]=0x0),_0x31786d[_0xa9767f(0x2c1)](_0x307fe2,_0x3ed937,_0x555d66,_0x1eeb91));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],'ActSeq_Mechanics_PtbConvert',_0x5564c5=>{const _0x2275df=_0x58cf34;if(!SceneManager[_0x2275df(0x3d3)]())return;if(!Imported[_0x2275df(0xbf3)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x2275df(0x1e7)](_0x5564c5,_0x5564c5);const _0x14e3d0=BattleManager[_0x2275df(0x6f1)][_0x2275df(0x8d8)]();let _0x39e3fc=Math[_0x2275df(0x238)](_0x5564c5[_0x2275df(0x3d0)],0x0),_0x51108f=_0x14e3d0[_0x2275df(0xb90)](),_0x17a2ee=_0x14e3d0[_0x2275df(0xbc3)]();while(_0x39e3fc--){if(_0x51108f<=0x0&&_0x17a2ee<=0x0)break;else _0x51108f>0x0?(_0x51108f--,_0x17a2ee++):_0x17a2ee--;}_0x14e3d0[_0x2275df(0x840)](_0x51108f),_0x14e3d0[_0x2275df(0x3ea)](_0x17a2ee);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],'ActSeq_Mechanics_PtbFullHalfAction',_0x366df9=>{const _0x327c0a=_0x58cf34;if(!SceneManager[_0x327c0a(0x3d3)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x327c0a(0xb40)]())return;VisuMZ[_0x327c0a(0x1e7)](_0x366df9,_0x366df9);const _0xe9a96a=BattleManager[_0x327c0a(0x6f1)][_0x327c0a(0x8d8)]();let _0x3b4650=_0x366df9['FullActions'],_0x50e9cd=_0x366df9[_0x327c0a(0xc80)];_0xe9a96a[_0x327c0a(0x908)](_0x3b4650),_0xe9a96a[_0x327c0a(0x9dc)](_0x50e9cd);}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x795),_0x3fd2e2=>{const _0x5c7692=_0x58cf34;if(!SceneManager[_0x5c7692(0x3d3)]())return;VisuMZ['ConvertParams'](_0x3fd2e2,_0x3fd2e2);const _0x48cbda=[_0x5c7692(0xcb6),'MAXMP',_0x5c7692(0xb97),'DEF',_0x5c7692(0x985),'MDF',_0x5c7692(0x412),_0x5c7692(0x2a0)],_0xce6243=_0x3fd2e2[_0x5c7692(0x3e4)],_0x195f05=_0x3fd2e2[_0x5c7692(0x1c0)],_0x2cd3c5=VisuMZ[_0x5c7692(0x2af)](_0x3fd2e2['Targets']);for(const _0x35009f of _0x2cd3c5){if(!_0x35009f)continue;for(const _0x217d14 of _0xce6243){const _0x1cacaf=_0x48cbda[_0x5c7692(0xccf)](_0x217d14[_0x5c7692(0x6f5)]()[_0x5c7692(0x989)]());_0x1cacaf>=0x0&&_0x1cacaf<=0x7&&_0x35009f[_0x5c7692(0x7b3)](_0x1cacaf)&&_0x35009f[_0x5c7692(0xba9)](_0x1cacaf);}for(const _0x5ad0b6 of _0x195f05){const _0x49c7ba=_0x48cbda['indexOf'](_0x5ad0b6[_0x5c7692(0x6f5)]()[_0x5c7692(0x989)]());_0x49c7ba>=0x0&&_0x49c7ba<=0x7&&_0x35009f[_0x5c7692(0xa1f)](_0x49c7ba)&&_0x35009f[_0x5c7692(0xba9)](_0x49c7ba);}}}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0xaae),_0x4e74b4=>{const _0x5b3bc5=_0x58cf34;if(!SceneManager[_0x5b3bc5(0x3d3)]())return;VisuMZ['ConvertParams'](_0x4e74b4,_0x4e74b4);const _0x2b0063=_0x4e74b4['States'],_0x1ae1a6=VisuMZ['CreateActionSequenceTargets'](_0x4e74b4[_0x5b3bc5(0x871)]);for(const _0x587bff of _0x1ae1a6){if(!_0x587bff)continue;for(const _0x2766f9 of _0x2b0063){_0x587bff[_0x5b3bc5(0x58c)](_0x2766f9);}}}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0xae4),_0x2e5e18=>{const _0x5c2048=_0x58cf34;if(!SceneManager[_0x5c2048(0x3d3)]())return;if(!Imported[_0x5c2048(0x62f)])return;VisuMZ[_0x5c2048(0x1e7)](_0x2e5e18,_0x2e5e18);const _0x52aa87=VisuMZ[_0x5c2048(0x2af)](_0x2e5e18[_0x5c2048(0x871)]),_0x1ac07d=Number(_0x2e5e18[_0x5c2048(0x4eb)]),_0x380382=Number(_0x2e5e18[_0x5c2048(0xc3c)]),_0x5e18b5=_0x2e5e18[_0x5c2048(0x99b)];for(const _0x2b72db of _0x52aa87){if(!_0x2b72db)continue;_0x5e18b5&&!_0x2b72db[_0x5c2048(0xab9)](_0x1ac07d)?(_0x2b72db['addState'](_0x1ac07d),_0x2b72db[_0x5c2048(0xb08)](_0x1ac07d,_0x380382)):_0x2b72db[_0x5c2048(0x50e)](_0x1ac07d,_0x380382);}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x621),_0x2c9732=>{const _0x5be17d=_0x58cf34;if(!SceneManager[_0x5be17d(0x3d3)]())return;if(!Imported[_0x5be17d(0x62f)])return;VisuMZ[_0x5be17d(0x1e7)](_0x2c9732,_0x2c9732);const _0x4c6c57=VisuMZ['CreateActionSequenceTargets'](_0x2c9732['Targets']),_0x5a82c2=Number(_0x2c9732['StateID']),_0x1ab9a0=Math[_0x5be17d(0x238)](Number(_0x2c9732[_0x5be17d(0xc3c)]),0x0),_0x205e1a=_0x2c9732[_0x5be17d(0x99b)];for(const _0x13cb8a of _0x4c6c57){if(!_0x13cb8a)continue;_0x205e1a&&!_0x13cb8a[_0x5be17d(0xab9)](_0x5a82c2)&&_0x13cb8a[_0x5be17d(0x604)](_0x5a82c2),_0x13cb8a[_0x5be17d(0xb08)](_0x5a82c2,_0x1ab9a0);}}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x1fc),_0x44f2b9=>{const _0x417957=_0x58cf34;if(!SceneManager[_0x417957(0x3d3)]())return;if(!Imported[_0x417957(0x7a2)])return;if(!BattleManager[_0x417957(0xa62)]())return;VisuMZ[_0x417957(0x1e7)](_0x44f2b9,_0x44f2b9);const _0x13a357=_0x44f2b9[_0x417957(0x442)],_0x40726e=VisuMZ[_0x417957(0x2af)](_0x44f2b9[_0x417957(0x871)]),_0x3487e1=_0x44f2b9[_0x417957(0x1c2)],_0x5c41f0=_0x44f2b9[_0x417957(0xb09)],_0x35ecaf=_0x44f2b9['ForceExploiter'],_0x2f988f=BattleManager['_action'];if(_0x13a357)for(const _0xb422b0 of _0x40726e){if(!_0xb422b0)continue;if(_0xb422b0===BattleManager[_0x417957(0x6f1)])continue;if(_0x3487e1)_0xb422b0['setSTBExploited'](![]);_0xb422b0[_0x417957(0x4f9)](BattleManager['_subject'],_0x2f988f);}if(_0x5c41f0&&BattleManager[_0x417957(0x6f1)]){if(_0x35ecaf)BattleManager[_0x417957(0x6f1)]['setSTBExploited'](![]);const _0x1adcf3=_0x40726e[0x0];BattleManager['_subject']['performSTBExploiter'](_0x1adcf3,_0x2f988f);}}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xade),_0x26a563=>{const _0x493f6c=_0x58cf34;if(!SceneManager[_0x493f6c(0x3d3)]())return;if(!Imported[_0x493f6c(0x7a2)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x493f6c(0x1e7)](_0x26a563,_0x26a563);const _0x55735b=_0x26a563[_0x493f6c(0xb10)];BattleManager['_subject']&&BattleManager[_0x493f6c(0x6f1)][_0x493f6c(0x683)](_0x55735b);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x446),_0x480cc1=>{const _0x1cc08f=_0x58cf34;if(!SceneManager[_0x1cc08f(0x3d3)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager['isSTB']())return;VisuMZ['ConvertParams'](_0x480cc1,_0x480cc1);let _0x41ff1b=_0x480cc1[_0x1cc08f(0xb10)];if(BattleManager[_0x1cc08f(0x6f1)]){BattleManager['_subject']['_actions']=BattleManager[_0x1cc08f(0x6f1)][_0x1cc08f(0x1f4)]||[];while(_0x41ff1b--){if(BattleManager[_0x1cc08f(0x6f1)][_0x1cc08f(0x1f4)]['length']<=0x0)break;BattleManager[_0x1cc08f(0x6f1)][_0x1cc08f(0x1f4)][_0x1cc08f(0x403)]();}}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x9ac),_0x52447b=>{const _0x1b0f4d=_0x58cf34;if(!SceneManager[_0x1b0f4d(0x3d3)]())return;if(!Imported[_0x1b0f4d(0x8c0)])return;VisuMZ[_0x1b0f4d(0x1e7)](_0x52447b,_0x52447b);const _0x544bf9=VisuMZ[_0x1b0f4d(0x2af)](_0x52447b[_0x1b0f4d(0x871)]),_0x2e42be=_0x52447b[_0x1b0f4d(0xa06)];for(const _0x38a31b of _0x544bf9){if(!_0x38a31b)continue;if(!_0x38a31b[_0x1b0f4d(0x40c)]())continue;_0x38a31b[_0x1b0f4d(0x336)](_0x2e42be);}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x86b),_0x227287=>{const _0x54ff4=_0x58cf34;if(!SceneManager[_0x54ff4(0x3d3)]())return;VisuMZ[_0x54ff4(0x1e7)](_0x227287,_0x227287);const _0x3ab5bf=VisuMZ[_0x54ff4(0x2af)](_0x227287['Targets']),_0x4e7ac1=_0x227287[_0x54ff4(0xacc)],_0x3f36d2={'textColor':ColorManager[_0x54ff4(0x3a4)](_0x227287[_0x54ff4(0xbc8)]),'flashColor':_0x227287[_0x54ff4(0xb51)],'flashDuration':_0x227287['FlashDuration']};for(const _0x29cc2b of _0x3ab5bf){if(!_0x29cc2b)continue;_0x29cc2b[_0x54ff4(0x797)](_0x4e7ac1,_0x3f36d2);}}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],'ActSeq_Mechanics_VariablePopup',_0x2529a8=>{const _0x6baa61=_0x58cf34;if(!SceneManager[_0x6baa61(0x3d3)]())return;VisuMZ[_0x6baa61(0x1e7)](_0x2529a8,_0x2529a8);const _0x4cd844=VisuMZ[_0x6baa61(0x2af)](_0x2529a8['Targets']);let _0xbc8554=$gameVariables[_0x6baa61(0x772)](_0x2529a8['Variable']);Imported[_0x6baa61(0xaa1)]&&_0x2529a8[_0x6baa61(0x971)]&&(_0xbc8554=VisuMZ['GroupDigits'](_0xbc8554));const _0x3df73c=String(_0xbc8554),_0x278bf3={'textColor':ColorManager['getColor'](_0x2529a8[_0x6baa61(0xbc8)]),'flashColor':_0x2529a8[_0x6baa61(0xb51)],'flashDuration':_0x2529a8[_0x6baa61(0x33e)]};for(const _0x31d7a3 of _0x4cd844){if(!_0x31d7a3)continue;_0x31d7a3[_0x6baa61(0x797)](_0x3df73c,_0x278bf3);}}),PluginManager['registerCommand'](pluginData['name'],_0x58cf34(0x53a),_0x599377=>{const _0x158430=_0x58cf34;if(!SceneManager[_0x158430(0x3d3)]())return;const _0x2753df=$gameTemp[_0x158430(0x20b)]();if(!_0x2753df)return;_0x2753df[_0x158430(0x9d6)](_0x158430(0x6f2));}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x587),_0x43594c=>{const _0x2cef15=_0x58cf34;if(!SceneManager[_0x2cef15(0x3d3)]())return;VisuMZ[_0x2cef15(0x1e7)](_0x43594c,_0x43594c);const _0x122cef=VisuMZ[_0x2cef15(0x2af)](_0x43594c['Targets']);for(const _0x51ec83 of _0x122cef){if(!_0x51ec83)continue;_0x51ec83['clearFreezeMotion']();}}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],'ActSeq_Motion_FreezeMotionFrame',_0x157eb3=>{const _0x1fe301=_0x58cf34;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1fe301(0x1e7)](_0x157eb3,_0x157eb3);const _0x26c5f8=VisuMZ[_0x1fe301(0x2af)](_0x157eb3[_0x1fe301(0x871)]),_0x5f5324=_0x157eb3[_0x1fe301(0x23f)]['toLowerCase']()[_0x1fe301(0x989)]();let _0x2bc59a=_0x157eb3[_0x1fe301(0x6a5)];const _0x394b3d=_0x157eb3[_0x1fe301(0xb52)];!['attack',_0x1fe301(0xce1),'swing',_0x1fe301(0xa6f)][_0x1fe301(0x375)](_0x5f5324)&&(_0x2bc59a=![]);for(const _0x120c55 of _0x26c5f8){if(!_0x120c55)continue;_0x120c55[_0x1fe301(0xb26)](_0x5f5324,_0x2bc59a,_0x394b3d);}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x65d),_0x222238=>{const _0x25e475=_0x58cf34;if(!SceneManager[_0x25e475(0x3d3)]())return;VisuMZ[_0x25e475(0x1e7)](_0x222238,_0x222238);const _0x521c8e=VisuMZ[_0x25e475(0x2af)](_0x222238['Targets']),_0x31e9de=_0x222238[_0x25e475(0x23f)]['toLowerCase']()['trim'](),_0x175551=_0x222238[_0x25e475(0x6a5)];for(const _0x161bdf of _0x521c8e){if(!_0x161bdf)continue;_0x161bdf[_0x25e475(0x3be)]=_0x175551;if(_0x31e9de[_0x25e475(0xcbb)](/ATTACK[ ](\d+)/i))_0x161bdf[_0x25e475(0xba7)](Number(RegExp['$1']));else _0x31e9de===_0x25e475(0x873)?_0x161bdf['performAttack']():_0x161bdf[_0x25e475(0x780)](_0x31e9de);if(!_0x175551)_0x161bdf[_0x25e475(0xbec)](0x0);else{if(_0x175551&&['thrust',_0x25e475(0xca6),'missle']['includes'](_0x31e9de)){}}_0x161bdf['_showWeapon']=undefined;}}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],'ActSeq_Motion_PerformAction',_0x3844a2=>{const _0x490bd7=_0x58cf34;if(!SceneManager[_0x490bd7(0x3d3)]())return;VisuMZ[_0x490bd7(0x1e7)](_0x3844a2,_0x3844a2);const _0x521e9a=BattleManager[_0x490bd7(0x5fc)];if(!_0x521e9a)return;if(!_0x521e9a[_0x490bd7(0xb8a)]())return;const _0x56a96c=VisuMZ[_0x490bd7(0x2af)](_0x3844a2[_0x490bd7(0x871)]);for(const _0x32688f of _0x56a96c){if(!_0x32688f)continue;_0x32688f[_0x490bd7(0xad8)](_0x521e9a);}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x3c1),_0x341501=>{const _0x3fa014=_0x58cf34;if(!SceneManager[_0x3fa014(0x3d3)]())return;VisuMZ[_0x3fa014(0x1e7)](_0x341501,_0x341501);const _0x172ba5=VisuMZ['CreateActionSequenceTargets'](_0x341501['Targets']);for(const _0x295d91 of _0x172ba5){if(!_0x295d91)continue;if(!_0x295d91['battler']())continue;_0x295d91['battler']()[_0x3fa014(0x7d9)]();}}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x5bc),_0x15df3a=>{const _0x223e94=_0x58cf34;if(!SceneManager[_0x223e94(0x3d3)]())return;VisuMZ['ConvertParams'](_0x15df3a,_0x15df3a);const _0x45906c=$gameTemp[_0x223e94(0x20b)](),_0x2b5e7f=_0x15df3a[_0x223e94(0xb38)]*Sprite_Battler['_motionSpeed'];_0x45906c[_0x223e94(0xa15)](_0x2b5e7f);}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x270),_0x283279=>{const _0x50ebc4=_0x58cf34;if(!SceneManager[_0x50ebc4(0x3d3)]())return;VisuMZ[_0x50ebc4(0x1e7)](_0x283279,_0x283279);const _0x1716a0=$gameTemp[_0x50ebc4(0x20b)](),_0x24f49b=BattleManager[_0x50ebc4(0x5fc)];if(!_0x1716a0||!_0x24f49b)return;if(!_0x24f49b[_0x50ebc4(0xb8a)]())return;const _0x2aed4e=VisuMZ['CreateActionSequenceTargets'](_0x283279['Targets']);for(const _0x4621b5 of _0x2aed4e){if(!_0x4621b5)continue;_0x4621b5[_0x50ebc4(0xb8b)](_0x24f49b);}if(_0x283279[_0x50ebc4(0x831)])_0x1716a0[_0x50ebc4(0x9d6)](_0x50ebc4(0x443));}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x7c3),_0x2b0b25=>{const _0x2ef03a=_0x58cf34;if(!SceneManager[_0x2ef03a(0x3d3)]())return;if(!$gameSystem[_0x2ef03a(0xc41)]())return;VisuMZ[_0x2ef03a(0x1e7)](_0x2b0b25,_0x2b0b25);const _0x1f0258=$gameTemp[_0x2ef03a(0x20b)](),_0x4c4383=VisuMZ[_0x2ef03a(0x2af)](_0x2b0b25['Targets']),_0xb59b18=_0x2b0b25[_0x2ef03a(0x47d)],_0x2b21c9=_0x2b0b25[_0x2ef03a(0x3cb)],_0x4338f5=_0x2b0b25[_0x2ef03a(0x538)],_0x4225f3=_0x2b0b25[_0x2ef03a(0x660)],_0x56d11d=_0x2b0b25['FaceDirection'],_0x5a6902=_0x2b0b25[_0x2ef03a(0x5d2)],_0x4f1db8=_0x2b0b25[_0x2ef03a(0x23f)],_0x55fc07=_0x2b0b25[_0x2ef03a(0x831)];if(!_0x1f0258)return;for(const _0x33f06c of _0x4c4383){if(!_0x33f06c)continue;let _0x3e6e07=_0x2b21c9,_0x31e4ce=_0x4338f5;if(_0xb59b18[_0x2ef03a(0xcbb)](/horz/i))_0x3e6e07*=_0x33f06c[_0x2ef03a(0x40c)]()?-0x1:0x1;if(_0xb59b18[_0x2ef03a(0xcbb)](/vert/i))_0x31e4ce*=_0x33f06c[_0x2ef03a(0x40c)]()?-0x1:0x1;_0x33f06c['moveBattlerHomeDistance'](_0x3e6e07,_0x31e4ce,_0x4225f3,_0x56d11d,_0x5a6902),_0x33f06c['requestMotion'](_0x4f1db8);}if(_0x55fc07)_0x1f0258['setWaitMode'](_0x2ef03a(0x443));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x7a8),_0x33b7bf=>{const _0x38a3ba=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x38a3ba(0x1e7)](_0x33b7bf,_0x33b7bf);const _0x5d444e=$gameTemp[_0x38a3ba(0x20b)](),_0x4373c5=VisuMZ[_0x38a3ba(0x2af)](_0x33b7bf[_0x38a3ba(0x871)]),_0x12e897=_0x33b7bf['OffsetAdjust'],_0x7c2e71=_0x33b7bf[_0x38a3ba(0x6da)],_0x221623=_0x33b7bf['OffsetY'],_0x3eb044=_0x33b7bf[_0x38a3ba(0x660)],_0x55ab40=_0x33b7bf[_0x38a3ba(0x5d4)],_0x3c7e8a=_0x33b7bf[_0x38a3ba(0x5d2)],_0x28f2da=_0x33b7bf[_0x38a3ba(0x23f)],_0x28a27b=_0x33b7bf[_0x38a3ba(0x831)];if(!_0x5d444e)return;for(const _0x5f3d6b of _0x4373c5){if(!_0x5f3d6b)continue;const _0x446580=_0x33b7bf['DestinationJS'](_0x5f3d6b)||{'x':0x0,'y':0x0};let _0x786b7c=_0x446580['x'],_0x334138=_0x446580['y'];if(_0x12e897[_0x38a3ba(0xcbb)](/none/i))_0x786b7c+=_0x7c2e71,_0x334138+=_0x221623;else{if(_0x12e897[_0x38a3ba(0xcbb)](/horz/i)&&_0x12e897['match'](/vert/i))_0x786b7c+=_0x5f3d6b[_0x38a3ba(0x40c)]()?-_0x7c2e71:_0x7c2e71,_0x334138+=_0x5f3d6b[_0x38a3ba(0x40c)]()?-_0x221623:_0x221623;else{if(_0x12e897['match'](/horz/i))_0x786b7c+=_0x5f3d6b[_0x38a3ba(0x40c)]()?-_0x7c2e71:_0x7c2e71,_0x334138+=_0x221623;else _0x12e897[_0x38a3ba(0xcbb)](/vert/i)&&(_0x786b7c+=_0x7c2e71,_0x334138+=_0x5f3d6b[_0x38a3ba(0x40c)]()?-_0x221623:_0x221623);}}_0x5f3d6b[_0x38a3ba(0x937)](_0x786b7c,_0x334138,_0x3eb044,_0x55ab40,_0x3c7e8a,-0x1),_0x5f3d6b[_0x38a3ba(0x780)](_0x28f2da);}if(_0x28a27b)_0x5d444e[_0x38a3ba(0x9d6)](_0x38a3ba(0x443));}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],'ActSeq_Movement_HomeMoveToPoint',_0x3de62b=>{const _0x1e2bc7=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x1e2bc7(0xc41)]())return;VisuMZ['ConvertParams'](_0x3de62b,_0x3de62b);const _0x3df61e=$gameTemp['getLastPluginCommandInterpreter'](),_0x165942=VisuMZ['CreateActionSequenceTargets'](_0x3de62b[_0x1e2bc7(0x871)]),_0x1ea296=_0x3de62b[_0x1e2bc7(0x5f1)],_0x4e0fd1=_0x3de62b[_0x1e2bc7(0xbd0)],_0x12e2e6=_0x3de62b[_0x1e2bc7(0x6da)],_0x4ee0ed=_0x3de62b[_0x1e2bc7(0x5fb)],_0x42b5a4=_0x3de62b[_0x1e2bc7(0x660)],_0x878a21=_0x3de62b[_0x1e2bc7(0x5d4)],_0x238416=_0x3de62b[_0x1e2bc7(0x5d2)],_0xc1fb5=_0x3de62b[_0x1e2bc7(0x23f)],_0x5bd0eb=_0x3de62b[_0x1e2bc7(0x831)];if(!_0x3df61e)return;for(const _0x23c926 of _0x165942){if(!_0x23c926)continue;let _0x59aac7=_0x23c926['battler']()['_baseX'],_0x36c4b4=_0x23c926[_0x1e2bc7(0x399)]()[_0x1e2bc7(0xa73)];if(_0x1ea296[_0x1e2bc7(0xcbb)](/home/i))_0x59aac7=_0x23c926['battler']()['_homeX'],_0x36c4b4=_0x23c926[_0x1e2bc7(0x399)]()['_homeY'];else{if(_0x1ea296[_0x1e2bc7(0xcbb)](/center/i))_0x59aac7=Graphics[_0x1e2bc7(0x9ad)]/0x2,_0x36c4b4=Graphics[_0x1e2bc7(0x1cb)]/0x2;else _0x1ea296[_0x1e2bc7(0xcbb)](/point (\d+), (\d+)/i)&&(_0x59aac7=Number(RegExp['$1']),_0x36c4b4=Number(RegExp['$2']));}if(_0x4e0fd1[_0x1e2bc7(0xcbb)](/none/i))_0x59aac7+=_0x12e2e6,_0x36c4b4+=_0x4ee0ed;else{if(_0x4e0fd1[_0x1e2bc7(0xcbb)](/horz/i)&&_0x4e0fd1[_0x1e2bc7(0xcbb)](/vert/i))_0x59aac7+=_0x23c926['isActor']()?-_0x12e2e6:_0x12e2e6,_0x36c4b4+=_0x23c926[_0x1e2bc7(0x40c)]()?-_0x4ee0ed:_0x4ee0ed;else{if(_0x4e0fd1['match'](/horz/i))_0x59aac7+=_0x23c926[_0x1e2bc7(0x40c)]()?-_0x12e2e6:_0x12e2e6,_0x36c4b4+=_0x4ee0ed;else _0x4e0fd1[_0x1e2bc7(0xcbb)](/vert/i)&&(_0x59aac7+=_0x12e2e6,_0x36c4b4+=_0x23c926[_0x1e2bc7(0x40c)]()?-_0x4ee0ed:_0x4ee0ed);}}_0x23c926[_0x1e2bc7(0x937)](_0x59aac7,_0x36c4b4,_0x42b5a4,_0x878a21,_0x238416,-0x1),_0x23c926[_0x1e2bc7(0x780)](_0xc1fb5);}if(_0x5bd0eb)_0x3df61e['setWaitMode'](_0x1e2bc7(0x443));}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xc2f),_0x3d1b10=>{const _0x33dc9d=_0x58cf34;if(!SceneManager[_0x33dc9d(0x3d3)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x33dc9d(0x1e7)](_0x3d1b10,_0x3d1b10);const _0x45d630=$gameTemp[_0x33dc9d(0x20b)](),_0x25fd71=VisuMZ[_0x33dc9d(0x2af)](_0x3d1b10['Targets1']),_0x8c85c6=VisuMZ[_0x33dc9d(0x2af)](_0x3d1b10[_0x33dc9d(0x256)]),_0x3e7dcf=_0x3d1b10[_0x33dc9d(0x624)];let _0x36639e=_0x3d1b10[_0x33dc9d(0x1d1)];const _0x27a03e=_0x3d1b10[_0x33dc9d(0xbd0)],_0x422b86=_0x3d1b10[_0x33dc9d(0x6da)],_0x30613f=_0x3d1b10[_0x33dc9d(0x5fb)],_0x1dc587=_0x3d1b10[_0x33dc9d(0x660)],_0x5df7a7=_0x3d1b10[_0x33dc9d(0x5d4)],_0x2b42eb=_0x3d1b10[_0x33dc9d(0x5d2)],_0x1a5f1d=_0x3d1b10[_0x33dc9d(0x23f)],_0x2f3baa=_0x3d1b10[_0x33dc9d(0x831)],_0x529737=Math[_0x33dc9d(0xa8f)](..._0x8c85c6[_0x33dc9d(0x5a0)](_0x73e6fd=>_0x73e6fd['battler']()[_0x33dc9d(0xc19)]-_0x73e6fd[_0x33dc9d(0x399)]()[_0x33dc9d(0x654)]()/0x2)),_0x22a58e=Math[_0x33dc9d(0x238)](..._0x8c85c6[_0x33dc9d(0x5a0)](_0x634f9b=>_0x634f9b[_0x33dc9d(0x399)]()[_0x33dc9d(0xc19)]+_0x634f9b[_0x33dc9d(0x399)]()['mainSpriteWidth']()/0x2)),_0x41f83c=Math['min'](..._0x8c85c6[_0x33dc9d(0x5a0)](_0x3ec4aa=>_0x3ec4aa['battler']()[_0x33dc9d(0xa73)]-_0x3ec4aa['battler']()[_0x33dc9d(0x420)]())),_0x469498=Math[_0x33dc9d(0x238)](..._0x8c85c6[_0x33dc9d(0x5a0)](_0x3afbef=>_0x3afbef[_0x33dc9d(0x399)]()[_0x33dc9d(0xa73)])),_0x353197=_0x8c85c6[_0x33dc9d(0x8b3)](_0x7ea8b3=>_0x7ea8b3[_0x33dc9d(0x40c)]())[_0x33dc9d(0x3eb)],_0x4d292d=_0x8c85c6[_0x33dc9d(0x8b3)](_0x2f5645=>_0x2f5645[_0x33dc9d(0x2d8)]())[_0x33dc9d(0x3eb)];let _0x121152=0x0,_0x2a598e=0x0;if(_0x3e7dcf[_0x33dc9d(0xcbb)](/front/i))_0x121152=_0x353197>=_0x4d292d?_0x529737:_0x22a58e;else{if(_0x3e7dcf[_0x33dc9d(0xcbb)](/middle/i))_0x121152=(_0x529737+_0x22a58e)/0x2,_0x36639e=-0x1;else _0x3e7dcf['match'](/back/i)&&(_0x121152=_0x353197>=_0x4d292d?_0x22a58e:_0x529737);}if(_0x3e7dcf['match'](/head/i))_0x2a598e=_0x41f83c;else{if(_0x3e7dcf[_0x33dc9d(0xcbb)](/center/i))_0x2a598e=(_0x41f83c+_0x469498)/0x2;else _0x3e7dcf[_0x33dc9d(0xcbb)](/base/i)&&(_0x2a598e=_0x469498);}if(!_0x45d630)return;for(const _0x10cab6 of _0x25fd71){if(!_0x10cab6)continue;let _0x3419ec=_0x121152,_0x5c3ceb=_0x2a598e;if(_0x27a03e['match'](/none/i))_0x3419ec+=_0x422b86,_0x5c3ceb+=_0x30613f;else{if(_0x27a03e[_0x33dc9d(0xcbb)](/horz/i)&&_0x27a03e[_0x33dc9d(0xcbb)](/vert/i))_0x3419ec+=_0x10cab6[_0x33dc9d(0x40c)]()?-_0x422b86:_0x422b86,_0x5c3ceb+=_0x10cab6[_0x33dc9d(0x40c)]()?-_0x30613f:_0x30613f;else{if(_0x27a03e[_0x33dc9d(0xcbb)](/horz/i))_0x3419ec+=_0x10cab6[_0x33dc9d(0x40c)]()?-_0x422b86:_0x422b86,_0x5c3ceb+=_0x30613f;else _0x27a03e[_0x33dc9d(0xcbb)](/vert/i)&&(_0x3419ec+=_0x422b86,_0x5c3ceb+=_0x10cab6[_0x33dc9d(0x40c)]()?-_0x30613f:_0x30613f);}}_0x10cab6['moveBattlerHomeToPoint'](_0x3419ec,_0x5c3ceb,_0x1dc587,_0x5df7a7,_0x2b42eb,_0x36639e),_0x10cab6[_0x33dc9d(0x780)](_0x1a5f1d);}if(_0x2f3baa)_0x45d630[_0x33dc9d(0x9d6)](_0x33dc9d(0x443));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Movement_FaceDirection',_0x2c2c98=>{const _0x50eaa4=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x50eaa4(0x1e7)](_0x2c2c98,_0x2c2c98);const _0x1c1e75=VisuMZ[_0x50eaa4(0x2af)](_0x2c2c98[_0x50eaa4(0x871)]);let _0x143611=_0x2c2c98[_0x50eaa4(0x7c2)][_0x50eaa4(0xcbb)](/back/i);for(const _0x19157f of _0x1c1e75){if(!_0x19157f)continue;if(_0x2c2c98['Direction'][_0x50eaa4(0xcbb)](/rand/i))_0x143611=Math['randomInt'](0x2);_0x19157f[_0x50eaa4(0x8b5)](!!_0x143611);}}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x42a),_0x27d4e7=>{const _0x1b3e3f=_0x58cf34;if(!SceneManager[_0x1b3e3f(0x3d3)]())return;if(!$gameSystem[_0x1b3e3f(0xc41)]())return;VisuMZ[_0x1b3e3f(0x1e7)](_0x27d4e7,_0x27d4e7);const _0x415363=VisuMZ[_0x1b3e3f(0x2af)](_0x27d4e7[_0x1b3e3f(0x871)]),_0x5046f0=_0x27d4e7[_0x1b3e3f(0x368)];for(const _0x595dcd of _0x415363){if(!_0x595dcd)continue;const _0x1986c6=_0x27d4e7[_0x1b3e3f(0x315)](_0x595dcd)||{'x':0x0,'y':0x0};let _0x3107ed=_0x1986c6['x'],_0x4859b2=_0x1986c6['y'];_0x595dcd[_0x1b3e3f(0x678)](Math[_0x1b3e3f(0x92e)](_0x3107ed),Math[_0x1b3e3f(0x92e)](_0x4859b2),!!_0x5046f0);}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x7f9),_0x548954=>{const _0x57640d=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x57640d(0xc41)]())return;VisuMZ[_0x57640d(0x1e7)](_0x548954,_0x548954);const _0x389e9d=VisuMZ['CreateActionSequenceTargets'](_0x548954[_0x57640d(0x871)]);let _0x1d4fc2=_0x548954['Point'];const _0x3b84a1=_0x548954[_0x57640d(0x368)];for(const _0x47e8e2 of _0x389e9d){if(!_0x47e8e2)continue;let _0x3665f2=_0x47e8e2[_0x57640d(0x399)]()['_baseX'],_0xdc7980=_0x47e8e2[_0x57640d(0x399)]()[_0x57640d(0xa73)];if(_0x1d4fc2['match'](/home/i))_0x3665f2=_0x47e8e2[_0x57640d(0x399)]()['_homeX'],_0xdc7980=_0x47e8e2[_0x57640d(0x399)]()[_0x57640d(0xb73)];else{if(_0x1d4fc2[_0x57640d(0xcbb)](/center/i))_0x3665f2=Graphics[_0x57640d(0x9ad)]/0x2,_0xdc7980=Graphics[_0x57640d(0x1cb)]/0x2;else _0x1d4fc2[_0x57640d(0xcbb)](/point (\d+), (\d+)/i)&&(_0x3665f2=Number(RegExp['$1']),_0xdc7980=Number(RegExp['$2']));}_0x47e8e2[_0x57640d(0x678)](Math[_0x57640d(0x92e)](_0x3665f2),Math['round'](_0xdc7980),!!_0x3b84a1);}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xb23),_0x4e5149=>{const _0x22659f=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x22659f(0x1e7)](_0x4e5149,_0x4e5149);const _0x3e42e6=VisuMZ[_0x22659f(0x2af)](_0x4e5149[_0x22659f(0x739)]),_0x41646a=VisuMZ[_0x22659f(0x2af)](_0x4e5149[_0x22659f(0x256)]),_0x590447=_0x41646a[_0x22659f(0x5a0)](_0x41cbfb=>_0x41cbfb&&_0x41cbfb[_0x22659f(0x399)]()?_0x41cbfb[_0x22659f(0x399)]()[_0x22659f(0xc19)]:0x0)/(_0x41646a[_0x22659f(0x3eb)]||0x1),_0x48f72f=_0x41646a[_0x22659f(0x5a0)](_0x566fff=>_0x566fff&&_0x566fff[_0x22659f(0x399)]()?_0x566fff[_0x22659f(0x399)]()[_0x22659f(0xa73)]:0x0)/(_0x41646a[_0x22659f(0x3eb)]||0x1),_0x770eb4=_0x4e5149[_0x22659f(0x368)];for(const _0x46235b of _0x3e42e6){if(!_0x46235b)continue;_0x46235b[_0x22659f(0x678)](Math[_0x22659f(0x92e)](_0x590447),Math[_0x22659f(0x92e)](_0x48f72f),!!_0x770eb4);}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x5f8),_0x5a9971=>{const _0x38e878=_0x58cf34;if(!SceneManager[_0x38e878(0x3d3)]())return;VisuMZ[_0x38e878(0x1e7)](_0x5a9971,_0x5a9971);const _0x24f9d1=$gameTemp[_0x38e878(0x20b)](),_0xb42fca=VisuMZ['CreateActionSequenceTargets'](_0x5a9971['Targets']),_0x5c81f5=_0x5a9971['Height'],_0x4562bb=_0x5a9971[_0x38e878(0x660)],_0x834953=_0x5a9971[_0x38e878(0x5d2)],_0x51f5a1=_0x5a9971['WaitForFloat'];if(!_0x24f9d1)return;for(const _0x4a24b4 of _0xb42fca){if(!_0x4a24b4)continue;_0x4a24b4[_0x38e878(0x48c)](_0x5c81f5,_0x4562bb,_0x834953);}if(_0x51f5a1)_0x24f9d1[_0x38e878(0x9d6)](_0x38e878(0x9bf));}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xa99),_0x30eac4=>{const _0x38e69f=_0x58cf34;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x38e69f(0x1e7)](_0x30eac4,_0x30eac4);const _0x872e1a=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x872e1a)return;const _0x47bebb=VisuMZ[_0x38e69f(0x2af)](_0x30eac4['Targets']);for(const _0x4c5c30 of _0x47bebb){if(!_0x4c5c30)continue;_0x4c5c30[_0x38e69f(0xa87)]();}BattleManager[_0x38e69f(0x6f1)]&&BattleManager[_0x38e69f(0x6f1)]['performActionEnd']();if(_0x30eac4['WaitForMovement'])_0x872e1a[_0x38e69f(0x9d6)](_0x38e69f(0x443));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x232),_0x46293e=>{const _0x33cf06=_0x58cf34;if(!SceneManager[_0x33cf06(0x3d3)]())return;VisuMZ[_0x33cf06(0x1e7)](_0x46293e,_0x46293e);const _0x5a3fa8=$gameTemp[_0x33cf06(0x20b)](),_0x4b9ce0=VisuMZ[_0x33cf06(0x2af)](_0x46293e['Targets']),_0x480648=_0x46293e['Height'],_0x6d633=_0x46293e['Duration'],_0x26b71d=_0x46293e[_0x33cf06(0x544)];if(!_0x5a3fa8)return;for(const _0x1eced0 of _0x4b9ce0){if(!_0x1eced0)continue;_0x1eced0['jumpBattler'](_0x480648,_0x6d633);}if(_0x26b71d)_0x5a3fa8[_0x33cf06(0x9d6)]('battleJump');}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0xa5d),_0xad4f0d=>{const _0x3bc2de=_0x58cf34;if(!SceneManager[_0x3bc2de(0x3d3)]())return;if(!$gameSystem[_0x3bc2de(0xc41)]())return;VisuMZ[_0x3bc2de(0x1e7)](_0xad4f0d,_0xad4f0d);const _0x8235e7=$gameTemp[_0x3bc2de(0x20b)](),_0x46112a=VisuMZ[_0x3bc2de(0x2af)](_0xad4f0d['Targets']),_0x28a768=_0xad4f0d['DistanceAdjust'],_0x2dc872=_0xad4f0d[_0x3bc2de(0x3cb)],_0x2935f7=_0xad4f0d[_0x3bc2de(0x538)],_0x4c1b70=_0xad4f0d['Duration'],_0x2cd133=_0xad4f0d[_0x3bc2de(0x5d4)],_0x2a4b4d=_0xad4f0d[_0x3bc2de(0x5d2)],_0x4859a4=_0xad4f0d[_0x3bc2de(0x23f)],_0xab627f=_0xad4f0d[_0x3bc2de(0x831)];if(!_0x8235e7)return;for(const _0x33c052 of _0x46112a){if(!_0x33c052)continue;let _0x13acd9=_0x2dc872,_0x17c33f=_0x2935f7;if(_0x28a768[_0x3bc2de(0xcbb)](/horz/i))_0x13acd9*=_0x33c052['isActor']()?-0x1:0x1;if(_0x28a768[_0x3bc2de(0xcbb)](/vert/i))_0x17c33f*=_0x33c052['isActor']()?-0x1:0x1;_0x33c052['moveBattlerDistance'](_0x13acd9,_0x17c33f,_0x4c1b70,_0x2cd133,_0x2a4b4d),_0x33c052[_0x3bc2de(0x780)](_0x4859a4);}if(_0xab627f)_0x8235e7[_0x3bc2de(0x9d6)](_0x3bc2de(0x443));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x97f),_0x69ab16=>{const _0x10866d=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x10866d(0xc41)]())return;VisuMZ[_0x10866d(0x1e7)](_0x69ab16,_0x69ab16);const _0x3688a5=$gameTemp[_0x10866d(0x20b)](),_0x2b2b85=VisuMZ[_0x10866d(0x2af)](_0x69ab16['Targets']),_0x2b8020=_0x69ab16[_0x10866d(0xbd0)],_0xe25e7=_0x69ab16[_0x10866d(0x6da)],_0x4140c6=_0x69ab16[_0x10866d(0x5fb)],_0x35b2ff=_0x69ab16[_0x10866d(0x660)],_0x266c74=_0x69ab16[_0x10866d(0x5d4)],_0x9252fd=_0x69ab16[_0x10866d(0x5d2)],_0x5a4fba=_0x69ab16[_0x10866d(0x23f)],_0x106cc9=_0x69ab16[_0x10866d(0x831)];if(!_0x3688a5)return;for(const _0x4462c4 of _0x2b2b85){if(!_0x4462c4)continue;const _0xb76b53=_0x69ab16['DestinationJS'](_0x4462c4)||{'x':0x0,'y':0x0};let _0x5ccfb7=_0xb76b53['x'],_0xe41448=_0xb76b53['y'];if(_0x2b8020[_0x10866d(0xcbb)](/none/i))_0x5ccfb7+=_0xe25e7,_0xe41448+=_0x4140c6;else{if(_0x2b8020[_0x10866d(0xcbb)](/horz/i)&&_0x2b8020[_0x10866d(0xcbb)](/vert/i))_0x5ccfb7+=_0x4462c4[_0x10866d(0x40c)]()?-_0xe25e7:_0xe25e7,_0xe41448+=_0x4462c4[_0x10866d(0x40c)]()?-_0x4140c6:_0x4140c6;else{if(_0x2b8020[_0x10866d(0xcbb)](/horz/i))_0x5ccfb7+=_0x4462c4[_0x10866d(0x40c)]()?-_0xe25e7:_0xe25e7,_0xe41448+=_0x4140c6;else _0x2b8020[_0x10866d(0xcbb)](/vert/i)&&(_0x5ccfb7+=_0xe25e7,_0xe41448+=_0x4462c4[_0x10866d(0x40c)]()?-_0x4140c6:_0x4140c6);}}_0x4462c4[_0x10866d(0x749)](_0x5ccfb7,_0xe41448,_0x35b2ff,_0x266c74,_0x9252fd,-0x1),_0x4462c4[_0x10866d(0x780)](_0x5a4fba);}if(_0x106cc9)_0x3688a5[_0x10866d(0x9d6)](_0x10866d(0x443));}),PluginManager['registerCommand'](pluginData['name'],_0x58cf34(0x1e0),_0x553547=>{const _0x2bd2c9=_0x58cf34;if(!SceneManager[_0x2bd2c9(0x3d3)]())return;if(!$gameSystem[_0x2bd2c9(0xc41)]())return;VisuMZ[_0x2bd2c9(0x1e7)](_0x553547,_0x553547);const _0x12e72b=$gameTemp[_0x2bd2c9(0x20b)](),_0x572930=VisuMZ[_0x2bd2c9(0x2af)](_0x553547[_0x2bd2c9(0x871)]),_0x373afa=_0x553547[_0x2bd2c9(0x5f1)],_0x3491ca=_0x553547[_0x2bd2c9(0xbd0)],_0x3a9fca=_0x553547['OffsetX'],_0x3ed2ed=_0x553547['OffsetY'],_0x5978e9=_0x553547['Duration'],_0x3a44b6=_0x553547['FaceDirection'],_0x30b2cf=_0x553547['EasingType'],_0x4bcbe5=_0x553547['MotionType'],_0x46da66=_0x553547[_0x2bd2c9(0x831)];if(!_0x12e72b)return;for(const _0x5ef318 of _0x572930){if(!_0x5ef318)continue;let _0xbde0d2=_0x5ef318['battler']()['_baseX'],_0x44971a=_0x5ef318[_0x2bd2c9(0x399)]()[_0x2bd2c9(0xa73)];if(_0x373afa[_0x2bd2c9(0xcbb)](/home/i))_0xbde0d2=_0x5ef318[_0x2bd2c9(0x399)]()[_0x2bd2c9(0x43b)],_0x44971a=_0x5ef318['battler']()[_0x2bd2c9(0xb73)];else{if(_0x373afa[_0x2bd2c9(0xcbb)](/center/i))_0xbde0d2=Graphics[_0x2bd2c9(0x9ad)]/0x2,_0x44971a=Graphics[_0x2bd2c9(0x1cb)]/0x2;else _0x373afa['match'](/point (\d+), (\d+)/i)&&(_0xbde0d2=Number(RegExp['$1']),_0x44971a=Number(RegExp['$2']));}if(_0x3491ca[_0x2bd2c9(0xcbb)](/none/i))_0xbde0d2+=_0x3a9fca,_0x44971a+=_0x3ed2ed;else{if(_0x3491ca[_0x2bd2c9(0xcbb)](/horz/i)&&_0x3491ca[_0x2bd2c9(0xcbb)](/vert/i))_0xbde0d2+=_0x5ef318[_0x2bd2c9(0x40c)]()?-_0x3a9fca:_0x3a9fca,_0x44971a+=_0x5ef318[_0x2bd2c9(0x40c)]()?-_0x3ed2ed:_0x3ed2ed;else{if(_0x3491ca[_0x2bd2c9(0xcbb)](/horz/i))_0xbde0d2+=_0x5ef318[_0x2bd2c9(0x40c)]()?-_0x3a9fca:_0x3a9fca,_0x44971a+=_0x3ed2ed;else _0x3491ca[_0x2bd2c9(0xcbb)](/vert/i)&&(_0xbde0d2+=_0x3a9fca,_0x44971a+=_0x5ef318['isActor']()?-_0x3ed2ed:_0x3ed2ed);}}_0x5ef318[_0x2bd2c9(0x749)](_0xbde0d2,_0x44971a,_0x5978e9,_0x3a44b6,_0x30b2cf,-0x1),_0x5ef318[_0x2bd2c9(0x780)](_0x4bcbe5);}if(_0x46da66)_0x12e72b[_0x2bd2c9(0x9d6)]('battleMove');}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x7a5),_0xaaba3f=>{const _0x4ed8bb=_0x58cf34;if(!SceneManager[_0x4ed8bb(0x3d3)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x4ed8bb(0x1e7)](_0xaaba3f,_0xaaba3f);const _0x2a9f3f=$gameTemp[_0x4ed8bb(0x20b)](),_0x25f3c5=VisuMZ[_0x4ed8bb(0x2af)](_0xaaba3f['Targets1']),_0x236c66=VisuMZ[_0x4ed8bb(0x2af)](_0xaaba3f[_0x4ed8bb(0x256)]),_0x245c31=_0xaaba3f[_0x4ed8bb(0x624)];let _0x4ced8e=_0xaaba3f[_0x4ed8bb(0x1d1)];const _0x26d738=_0xaaba3f['OffsetAdjust'],_0x174fb2=_0xaaba3f[_0x4ed8bb(0x6da)],_0x1e3643=_0xaaba3f[_0x4ed8bb(0x5fb)],_0x1fcfdb=_0xaaba3f[_0x4ed8bb(0x660)],_0xb047ce=_0xaaba3f[_0x4ed8bb(0x5d4)],_0x33b6c7=_0xaaba3f[_0x4ed8bb(0x5d2)],_0x28b96b=_0xaaba3f[_0x4ed8bb(0x23f)],_0xee597c=_0xaaba3f['WaitForMovement'],_0x5782f3=Math[_0x4ed8bb(0xa8f)](..._0x236c66[_0x4ed8bb(0x5a0)](_0xbcbfd1=>_0xbcbfd1['battler']()['_baseX']-_0xbcbfd1[_0x4ed8bb(0x399)]()[_0x4ed8bb(0x654)]()/0x2)),_0x1ca0fb=Math[_0x4ed8bb(0x238)](..._0x236c66['map'](_0x4d012a=>_0x4d012a[_0x4ed8bb(0x399)]()['_baseX']+_0x4d012a['battler']()['mainSpriteWidth']()/0x2)),_0x167c6b=Math[_0x4ed8bb(0xa8f)](..._0x236c66[_0x4ed8bb(0x5a0)](_0x3d191f=>_0x3d191f[_0x4ed8bb(0x399)]()[_0x4ed8bb(0xa73)]-_0x3d191f['battler']()[_0x4ed8bb(0x420)]())),_0x2238af=Math['max'](..._0x236c66['map'](_0x328bfc=>_0x328bfc[_0x4ed8bb(0x399)]()[_0x4ed8bb(0xa73)])),_0xd07c6d=_0x236c66[_0x4ed8bb(0x8b3)](_0x23b9d1=>_0x23b9d1[_0x4ed8bb(0x40c)]())[_0x4ed8bb(0x3eb)],_0x534482=_0x236c66[_0x4ed8bb(0x8b3)](_0x4a7cbf=>_0x4a7cbf[_0x4ed8bb(0x2d8)]())['length'];let _0x4d7ac3=0x0,_0xa08b21=0x0;if(_0x245c31[_0x4ed8bb(0xcbb)](/front/i))_0x4d7ac3=_0xd07c6d>=_0x534482?_0x5782f3:_0x1ca0fb;else{if(_0x245c31[_0x4ed8bb(0xcbb)](/middle/i))_0x4d7ac3=(_0x5782f3+_0x1ca0fb)/0x2,_0x4ced8e=-0x1;else _0x245c31[_0x4ed8bb(0xcbb)](/back/i)&&(_0x4d7ac3=_0xd07c6d>=_0x534482?_0x1ca0fb:_0x5782f3);}if(_0x245c31[_0x4ed8bb(0xcbb)](/head/i))_0xa08b21=_0x167c6b;else{if(_0x245c31[_0x4ed8bb(0xcbb)](/center/i))_0xa08b21=(_0x167c6b+_0x2238af)/0x2;else _0x245c31[_0x4ed8bb(0xcbb)](/base/i)&&(_0xa08b21=_0x2238af);}if(!_0x2a9f3f)return;for(const _0x396d84 of _0x25f3c5){if(!_0x396d84)continue;let _0x237d61=_0x4d7ac3,_0x4d7f1c=_0xa08b21;if(_0x26d738['match'](/none/i))_0x237d61+=_0x174fb2,_0x4d7f1c+=_0x1e3643;else{if(_0x26d738[_0x4ed8bb(0xcbb)](/horz/i)&&_0x26d738[_0x4ed8bb(0xcbb)](/vert/i))_0x237d61+=_0x396d84[_0x4ed8bb(0x40c)]()?-_0x174fb2:_0x174fb2,_0x4d7f1c+=_0x396d84[_0x4ed8bb(0x40c)]()?-_0x1e3643:_0x1e3643;else{if(_0x26d738[_0x4ed8bb(0xcbb)](/horz/i))_0x237d61+=_0x396d84[_0x4ed8bb(0x40c)]()?-_0x174fb2:_0x174fb2,_0x4d7f1c+=_0x1e3643;else _0x26d738['match'](/vert/i)&&(_0x237d61+=_0x174fb2,_0x4d7f1c+=_0x396d84[_0x4ed8bb(0x40c)]()?-_0x1e3643:_0x1e3643);}}_0x396d84[_0x4ed8bb(0x749)](_0x237d61,_0x4d7f1c,_0x1fcfdb,_0xb047ce,_0x33b6c7,_0x4ced8e),_0x396d84['requestMotion'](_0x28b96b);}if(_0xee597c)_0x2a9f3f['setWaitMode']('battleMove');}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],'ActSeq_Movement_Opacity',_0x3bc301=>{const _0x2ad4c7=_0x58cf34;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2ad4c7(0x1e7)](_0x3bc301,_0x3bc301);const _0x4d465b=$gameTemp[_0x2ad4c7(0x20b)](),_0x521940=VisuMZ[_0x2ad4c7(0x2af)](_0x3bc301[_0x2ad4c7(0x871)]),_0x1baff0=_0x3bc301[_0x2ad4c7(0x745)],_0x541d99=_0x3bc301[_0x2ad4c7(0x660)],_0x3b87a0=_0x3bc301[_0x2ad4c7(0x5d2)],_0x169c3c=_0x3bc301[_0x2ad4c7(0xbd3)];if(!_0x4d465b)return;for(const _0x369be5 of _0x521940){if(!_0x369be5)continue;_0x369be5['changeBattlerOpacity'](_0x1baff0,_0x541d99,_0x3b87a0);}if(_0x169c3c)_0x4d465b[_0x2ad4c7(0x9d6)](_0x2ad4c7(0x37e));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x2be),_0x2d6660=>{const _0x3cf2cb=_0x58cf34;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2d6660,_0x2d6660);const _0x4d2b7e=$gameTemp[_0x3cf2cb(0x20b)](),_0x4d8fd0=VisuMZ[_0x3cf2cb(0x2af)](_0x2d6660[_0x3cf2cb(0x871)]),_0x2f4927=_0x2d6660['ScaleX'],_0x3c4732=_0x2d6660[_0x3cf2cb(0xb75)],_0x593000=_0x2d6660[_0x3cf2cb(0x660)],_0x1be883=_0x2d6660[_0x3cf2cb(0x5d2)],_0x5b0d77=_0x2d6660[_0x3cf2cb(0x392)];if(!_0x4d2b7e)return;for(const _0x49a1f2 of _0x4d8fd0){if(!_0x49a1f2)continue;_0x49a1f2[_0x3cf2cb(0x5ad)](_0x2f4927,_0x3c4732,_0x593000,_0x1be883);}if(_0x5b0d77)_0x4d2b7e[_0x3cf2cb(0x9d6)]('battleGrow');}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],'ActSeq_Movement_Skew',_0x3f0a5c=>{const _0x5db344=_0x58cf34;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5db344(0x1e7)](_0x3f0a5c,_0x3f0a5c);const _0x352ead=$gameTemp[_0x5db344(0x20b)](),_0x3f9716=VisuMZ['CreateActionSequenceTargets'](_0x3f0a5c[_0x5db344(0x871)]),_0x43e95b=_0x3f0a5c['SkewX'],_0x5297eb=_0x3f0a5c[_0x5db344(0x3de)],_0x2c7353=_0x3f0a5c['Duration'],_0x326c81=_0x3f0a5c[_0x5db344(0x5d2)],_0x2e24dc=_0x3f0a5c[_0x5db344(0x9f7)];if(!_0x352ead)return;for(const _0x44c530 of _0x3f9716){if(!_0x44c530)continue;_0x44c530['skewBattler'](_0x43e95b,_0x5297eb,_0x2c7353,_0x326c81);}if(_0x2e24dc)_0x352ead[_0x5db344(0x9d6)](_0x5db344(0x802));}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x55d),_0x5bd5af=>{const _0x4266eb=_0x58cf34;if(!SceneManager[_0x4266eb(0x3d3)]())return;VisuMZ['ConvertParams'](_0x5bd5af,_0x5bd5af);const _0x179252=$gameTemp[_0x4266eb(0x20b)](),_0x1bcca3=VisuMZ['CreateActionSequenceTargets'](_0x5bd5af['Targets']),_0xa81a6b=_0x5bd5af[_0x4266eb(0x614)],_0x48332c=_0x5bd5af[_0x4266eb(0x660)],_0x3a702a=_0x5bd5af[_0x4266eb(0x5d2)],_0x4708d1=_0x5bd5af[_0x4266eb(0x6f6)],_0x39af76=_0x5bd5af[_0x4266eb(0x3ca)];if(!_0x179252)return;for(const _0x22a5fc of _0x1bcca3){if(!_0x22a5fc)continue;_0x22a5fc[_0x4266eb(0x30c)](_0xa81a6b,_0x48332c,_0x3a702a,_0x4708d1);}if(_0x39af76)_0x179252[_0x4266eb(0x9d6)]('battleSpin');}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x2a8),_0x240bf7=>{const _0x4cc636=_0x58cf34;if(!SceneManager['isSceneBattle']())return;const _0x2e4166=$gameTemp[_0x4cc636(0x20b)]();if(!_0x2e4166)return;_0x2e4166[_0x4cc636(0x9d6)](_0x4cc636(0x9bf));}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0xce3),_0xe9a67f=>{const _0x1c6b1f=_0x58cf34;if(!SceneManager[_0x1c6b1f(0x3d3)]())return;const _0x3af58d=$gameTemp[_0x1c6b1f(0x20b)]();if(!_0x3af58d)return;_0x3af58d[_0x1c6b1f(0x9d6)]('battleJump');}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xa2a),_0x717f12=>{const _0x320245=_0x58cf34;if(!SceneManager['isSceneBattle']())return;const _0x13487e=$gameTemp[_0x320245(0x20b)]();if(!_0x13487e)return;_0x13487e[_0x320245(0x9d6)](_0x320245(0x443));}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],'ActSeq_Movement_WaitForOpacity',_0x2436d9=>{const _0x198305=_0x58cf34;if(!SceneManager[_0x198305(0x3d3)]())return;const _0x326d3e=$gameTemp[_0x198305(0x20b)]();if(!_0x326d3e)return;_0x326d3e[_0x198305(0x9d6)](_0x198305(0x37e));}),PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xb0f),_0x4f7e62=>{const _0x185140=_0x58cf34;if(!SceneManager['isSceneBattle']())return;const _0x4b21f2=$gameTemp[_0x185140(0x20b)]();if(!_0x4b21f2)return;_0x4b21f2[_0x185140(0x9d6)]('battleGrow');}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xa2d),_0x67dbd8=>{const _0x2c72b0=_0x58cf34;if(!SceneManager[_0x2c72b0(0x3d3)]())return;const _0x474fdf=$gameTemp[_0x2c72b0(0x20b)]();if(!_0x474fdf)return;_0x474fdf[_0x2c72b0(0x9d6)](_0x2c72b0(0x802));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x580),_0x3b780f=>{const _0x2e3105=_0x58cf34;if(!SceneManager[_0x2e3105(0x3d3)]())return;const _0x4e1fc1=$gameTemp[_0x2e3105(0x20b)]();if(!_0x4e1fc1)return;_0x4e1fc1[_0x2e3105(0x9d6)]('battleSpin');}),VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x756)]=function(){const _0x1d422=_0x58cf34;if(!Imported[_0x1d422(0x876)])return;if(VisuMZ[_0x1d422(0xc95)][_0x1d422(0x7d2)]<1.08){let _0x226581='';_0x226581+=_0x1d422(0x539),_0x226581+=_0x1d422(0xc67),alert(_0x226581),SceneManager[_0x1d422(0xcb5)]();}},PluginManager['registerCommand'](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x67e),_0x332c9c=>{const _0x10b42a=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x10b42a(0x876)])return;VisuMZ[_0x10b42a(0x1e7)](_0x332c9c,_0x332c9c),VisuMZ[_0x10b42a(0xa6b)][_0x10b42a(0x756)]();const _0x2fd727=$gameTemp['getLastPluginCommandInterpreter'](),_0x4316be=_0x332c9c[_0x10b42a(0xa12)];if(!_0x2fd727)return;const _0x351b2e=BattleManager[_0x10b42a(0x5ae)];if(!_0x351b2e)return;_0x351b2e[_0x10b42a(0x6df)](_0x332c9c);if(_0x4316be)_0x2fd727['setWaitMode'](_0x10b42a(0xc34));}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],'ActSeq_Projectile_Icon',_0x3e148b=>{const _0x5ba628=_0x58cf34;if(!SceneManager[_0x5ba628(0x3d3)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x5ba628(0x1e7)](_0x3e148b,_0x3e148b),VisuMZ[_0x5ba628(0xa6b)][_0x5ba628(0x756)]();const _0x468bd6=$gameTemp[_0x5ba628(0x20b)](),_0x156321=_0x3e148b[_0x5ba628(0xa12)];if(!_0x468bd6)return;const _0x58b44c=BattleManager['_spriteset'];if(!_0x58b44c)return;_0x58b44c[_0x5ba628(0x6df)](_0x3e148b);if(_0x156321)_0x468bd6[_0x5ba628(0x9d6)](_0x5ba628(0xc34));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x2bb),_0xa77e66=>{const _0x2fd8bf=_0x58cf34;if(!SceneManager[_0x2fd8bf(0x3d3)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x2fd8bf(0x1e7)](_0xa77e66,_0xa77e66),VisuMZ['BattleCore'][_0x2fd8bf(0x756)]();const _0x8a729d=$gameTemp[_0x2fd8bf(0x20b)](),_0xcf6719=_0xa77e66[_0x2fd8bf(0xa12)];if(!_0x8a729d)return;const _0x18f984=BattleManager['_spriteset'];if(!_0x18f984)return;_0x18f984['createActionSequenceProjectile'](_0xa77e66);if(_0xcf6719)_0x8a729d['setWaitMode'](_0x2fd8bf(0xc34));}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x778),_0x3dc1fd=>{const _0x43e2b1=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x43e2b1(0x5d3)])return;VisuMZ['ConvertParams'](_0x3dc1fd,_0x3dc1fd);const _0x4953f4=$gameTemp['getLastPluginCommandInterpreter'](),_0x9b0b7=_0x3dc1fd[_0x43e2b1(0x9f7)];if(!_0x4953f4)return;$gameScreen[_0x43e2b1(0x6bb)](_0x3dc1fd['SkewX'],_0x3dc1fd[_0x43e2b1(0x3de)],_0x3dc1fd['Duration'],_0x3dc1fd[_0x43e2b1(0x5d2)]);if(_0x9b0b7)_0x4953f4[_0x43e2b1(0x9d6)](_0x43e2b1(0x2e0));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],'ActSeq_Skew_Reset',_0x1595fd=>{const _0x4ac424=_0x58cf34;if(!SceneManager[_0x4ac424(0x3d3)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x4ac424(0x1e7)](_0x1595fd,_0x1595fd);const _0x30238a=$gameTemp[_0x4ac424(0x20b)](),_0x542abf=_0x1595fd[_0x4ac424(0x9f7)];if(!_0x30238a)return;$gameScreen[_0x4ac424(0x6bb)](0x0,0x0,_0x1595fd[_0x4ac424(0x660)],_0x1595fd[_0x4ac424(0x5d2)]);if(_0x542abf)_0x30238a[_0x4ac424(0x9d6)](_0x4ac424(0x2e0));}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x81c),_0x45f180=>{const _0x3855db=_0x58cf34;if(!SceneManager[_0x3855db(0x3d3)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x189d24=$gameTemp[_0x3855db(0x20b)]();if(!_0x189d24)return;_0x189d24[_0x3855db(0x9d6)]('battleSkew');}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x724),_0xe75f=>{const _0x1bc44e=_0x58cf34;if(!SceneManager[_0x1bc44e(0x3d3)]())return;VisuMZ[_0x1bc44e(0x1e7)](_0xe75f,_0xe75f);const _0x38ea8f=$gameTemp[_0x1bc44e(0x20b)](),_0x4851a8=_0xe75f[_0x1bc44e(0x54e)],_0x19f943=_0xe75f[_0x1bc44e(0x728)];if(!_0x38ea8f)return;BattleManager[_0x1bc44e(0x704)]=_0x4851a8,BattleManager[_0x1bc44e(0xb2a)]=BattleManager['_allTargets']?BattleManager[_0x1bc44e(0x779)][BattleManager['_targetIndex']]||null:null,BattleManager[_0x1bc44e(0xb2a)]&&_0x19f943[_0x1bc44e(0x6f5)]()[_0x1bc44e(0x989)]()!==_0x1bc44e(0x665)&&_0x38ea8f[_0x1bc44e(0xad5)]([_0x19f943]);}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x7b6),_0x1fd449=>{const _0xacd93a=_0x58cf34;if(!SceneManager[_0xacd93a(0x3d3)]())return;VisuMZ[_0xacd93a(0x1e7)](_0x1fd449,_0x1fd449);const _0x205335=$gameTemp['getLastPluginCommandInterpreter'](),_0x6ecc10=_0x1fd449[_0xacd93a(0x728)];if(!_0x205335)return;BattleManager[_0xacd93a(0x704)]++,BattleManager[_0xacd93a(0xb2a)]=BattleManager[_0xacd93a(0x779)][BattleManager[_0xacd93a(0x704)]]||null,BattleManager[_0xacd93a(0xb2a)]&&_0x6ecc10['toUpperCase']()['trim']()!=='UNTITLED'&&_0x205335[_0xacd93a(0xad5)]([_0x6ecc10]);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xc77),_0x4bec35=>{const _0x3aa56a=_0x58cf34;if(!SceneManager[_0x3aa56a(0x3d3)]())return;VisuMZ[_0x3aa56a(0x1e7)](_0x4bec35,_0x4bec35);const _0x59efd8=$gameTemp[_0x3aa56a(0x20b)](),_0x4ae4d0=_0x4bec35[_0x3aa56a(0x728)];if(!_0x59efd8)return;BattleManager[_0x3aa56a(0x704)]--,BattleManager[_0x3aa56a(0xb2a)]=BattleManager['_allTargets'][BattleManager[_0x3aa56a(0x704)]]||null,BattleManager[_0x3aa56a(0xb2a)]&&_0x4ae4d0[_0x3aa56a(0x6f5)]()[_0x3aa56a(0x989)]()!=='UNTITLED'&&_0x59efd8[_0x3aa56a(0xad5)]([_0x4ae4d0]);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0xc58),_0x3c0d6f=>{const _0x557eb7=_0x58cf34;if(!SceneManager[_0x557eb7(0x3d3)]())return;VisuMZ[_0x557eb7(0x1e7)](_0x3c0d6f,_0x3c0d6f);const _0x1af484=$gameTemp['getLastPluginCommandInterpreter'](),_0x2efa13=_0x3c0d6f[_0x557eb7(0xab5)],_0x2e35dc=_0x3c0d6f[_0x557eb7(0x728)];if(!_0x1af484)return;const _0x904c4e=BattleManager[_0x557eb7(0x704)];for(;;){BattleManager[_0x557eb7(0x704)]=Math[_0x557eb7(0x8cb)](BattleManager[_0x557eb7(0x779)][_0x557eb7(0x3eb)]);if(!_0x2efa13)break;if(BattleManager[_0x557eb7(0x704)]!==_0x904c4e)break;if(BattleManager[_0x557eb7(0x779)][_0x557eb7(0x3eb)]<=0x1){BattleManager[_0x557eb7(0x704)]=0x0;break;}}BattleManager[_0x557eb7(0xb2a)]=BattleManager[_0x557eb7(0x779)][BattleManager[_0x557eb7(0x704)]]||null,BattleManager[_0x557eb7(0xb2a)]&&_0x2e35dc['toUpperCase']()[_0x557eb7(0x989)]()!==_0x557eb7(0x665)&&_0x1af484[_0x557eb7(0xad5)]([_0x2e35dc]);}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x301),_0x36e614=>{const _0x822671=_0x58cf34;if(!SceneManager[_0x822671(0x3d3)]())return;if(!Imported[_0x822671(0x6a0)])return;if(!ConfigManager[_0x822671(0x804)])return;VisuMZ['ConvertParams'](_0x36e614,_0x36e614);const _0x2cf864=VisuMZ[_0x822671(0x2af)](_0x36e614[_0x822671(0x871)]);let _0x1ac920=_0x36e614[_0x822671(0x37f)]||'';for(const _0x313094 of _0x2cf864){if(!_0x313094)continue;_0x313094[_0x822671(0xaa3)](_0x1ac920);}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],'ActSeq_BattleVoice_PlaySpecialLine',_0x1a33e0=>{const _0x528702=_0x58cf34;if(!SceneManager[_0x528702(0x3d3)]())return;if(!Imported['VisuMZ_3_BattleVoices'])return;if(!ConfigManager['battleVoices'])return;VisuMZ[_0x528702(0x1e7)](_0x1a33e0,_0x1a33e0);const _0x28db2a=VisuMZ[_0x528702(0x2af)](_0x1a33e0[_0x528702(0x871)]);let _0x3d579c=(_0x1a33e0[_0x528702(0x4f6)]||'')+(_0x1a33e0[_0x528702(0x73d)]||'');for(const _0x140734 of _0x28db2a){if(!_0x140734)continue;_0x140734[_0x528702(0xaa3)](_0x3d579c);}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x96d),_0x2c24b4=>{const _0x1e05c7=_0x58cf34;if(!SceneManager[_0x1e05c7(0x3d3)]())return;VisuMZ['ConvertParams'](_0x2c24b4,_0x2c24b4);const _0x464225=VisuMZ[_0x1e05c7(0x2af)](_0x2c24b4[_0x1e05c7(0x871)]);for(const _0x42a50d of _0x464225){if(!_0x42a50d)continue;if(!_0x42a50d['isActor']())continue;_0x42a50d['clearActiveWeaponSlot']();}}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x9e2),_0x3db8b2=>{const _0x34c441=_0x58cf34;if(!SceneManager[_0x34c441(0x3d3)]())return;VisuMZ[_0x34c441(0x1e7)](_0x3db8b2,_0x3db8b2);const _0x3af60b=$gameTemp['getLastPluginCommandInterpreter']();let _0x2e3902=![];const _0x3427a4=_0x3db8b2[_0x34c441(0x728)],_0x11d119=VisuMZ['CreateActionSequenceTargets'](_0x3db8b2[_0x34c441(0x871)]);for(const _0x3c7f06 of _0x11d119){if(!_0x3c7f06)continue;if(!_0x3c7f06[_0x34c441(0x40c)]())continue;_0x3c7f06[_0x34c441(0x83b)](),_0x3c7f06[_0x34c441(0x981)]()[_0x34c441(0x3eb)]>0x0?_0x2e3902=!![]:_0x3c7f06[_0x34c441(0xa35)]();}_0x2e3902&&_0x3427a4[_0x34c441(0x6f5)]()[_0x34c441(0x989)]()!==_0x34c441(0x665)&&_0x3af60b[_0x34c441(0xad5)]([_0x3427a4]);}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x5e2),_0x386a1e=>{const _0x1ab0f5=_0x58cf34;if(!SceneManager[_0x1ab0f5(0x3d3)]())return;VisuMZ[_0x1ab0f5(0x1e7)](_0x386a1e,_0x386a1e);let _0x520742=_0x386a1e['SlotID'];_0x520742--,_0x520742=Math['max'](_0x520742,0x0);const _0x5a1447=VisuMZ['CreateActionSequenceTargets'](_0x386a1e['Targets']);for(const _0x58af7b of _0x5a1447){if(!_0x58af7b)continue;if(!_0x58af7b[_0x1ab0f5(0x40c)]())continue;_0x58af7b[_0x1ab0f5(0x39a)](_0x520742);}}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0x898),_0x12c5a8=>{const _0x5e6f83=_0x58cf34;if(!SceneManager[_0x5e6f83(0x3d3)]())return;if(!Imported[_0x5e6f83(0x5d3)])return;VisuMZ[_0x5e6f83(0x1e7)](_0x12c5a8,_0x12c5a8);const _0xb98151=$gameTemp[_0x5e6f83(0x20b)](),_0x1539a4=_0x12c5a8[_0x5e6f83(0x88f)];if(!_0xb98151)return;$gameScreen['setBattleZoom'](_0x12c5a8[_0x5e6f83(0x91e)],_0x12c5a8[_0x5e6f83(0x660)],_0x12c5a8[_0x5e6f83(0x5d2)]);if(_0x1539a4)_0xb98151[_0x5e6f83(0x9d6)]('battleZoom');}),PluginManager[_0x58cf34(0x3a8)](pluginData['name'],_0x58cf34(0xcb3),_0x1d8735=>{const _0x4b1f4f=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4b1f4f(0x5d3)])return;VisuMZ[_0x4b1f4f(0x1e7)](_0x1d8735,_0x1d8735);const _0x15bc31=$gameTemp[_0x4b1f4f(0x20b)](),_0x23aca7=_0x1d8735[_0x4b1f4f(0x88f)];if(!_0x15bc31)return;$gameScreen[_0x4b1f4f(0x759)](0x1,_0x1d8735[_0x4b1f4f(0x660)],_0x1d8735[_0x4b1f4f(0x5d2)]);if(_0x23aca7)_0x15bc31['setWaitMode'](_0x4b1f4f(0x1c8));}),PluginManager[_0x58cf34(0x3a8)](pluginData[_0x58cf34(0xc22)],_0x58cf34(0x9c5),_0xedab81=>{const _0x5c9ee2=_0x58cf34;if(!SceneManager[_0x5c9ee2(0x3d3)]())return;if(!Imported[_0x5c9ee2(0x5d3)])return;const _0x5473ee=$gameTemp[_0x5c9ee2(0x20b)]();if(!_0x5473ee)return;_0x5473ee[_0x5c9ee2(0x9d6)](_0x5c9ee2(0x1c8));}),VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x95a)]=Scene_Boot[_0x58cf34(0x8ef)][_0x58cf34(0x486)],Scene_Boot[_0x58cf34(0x8ef)][_0x58cf34(0x486)]=function(){const _0x2c284f=_0x58cf34;this[_0x2c284f(0x41c)](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x2c284f(0x4b4)](),this[_0x2c284f(0xc01)](),VisuMZ[_0x2c284f(0xa6b)]['Scene_Boot_onDatabaseLoaded'][_0x2c284f(0x9a4)](this),this[_0x2c284f(0x208)](),this[_0x2c284f(0x950)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this[_0x2c284f(0xb53)]();},Scene_Boot[_0x58cf34(0x8ef)][_0x58cf34(0x208)]=function(){const _0x6aa0b9=_0x58cf34;if(VisuMZ[_0x6aa0b9(0xb46)])return;this[_0x6aa0b9(0x66d)](),this[_0x6aa0b9(0x649)](),this[_0x6aa0b9(0xa01)]();},Scene_Boot[_0x58cf34(0x8ef)][_0x58cf34(0x41c)]=function(){const _0x2f293b=_0x58cf34,_0x2ce89b=$dataSystem[_0x2f293b(0x7c7)][_0x2f293b(0x3eb)];for(let _0x156dc8=0x0;_0x156dc8<_0x2ce89b;_0x156dc8++){const _0x441b0d=$dataSystem[_0x2f293b(0x98b)][_0x156dc8];if(_0x441b0d)continue;$dataSystem[_0x2f293b(0x98b)][_0x156dc8]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x58cf34(0x8ef)][_0x58cf34(0x1fb)]=function(){const _0x9425a6=_0x58cf34,_0x407b09=VisuMZ['BattleCore'][_0x9425a6(0xb05)];_0x407b09[_0x9425a6(0x693)][_0x9425a6(0x9d8)]===undefined&&(_0x407b09[_0x9425a6(0x693)]['PopupPosition']=_0x9425a6(0xc4e)),_0x407b09[_0x9425a6(0xb3d)][_0x9425a6(0x27e)]===undefined&&(_0x407b09[_0x9425a6(0xb3d)]['SmoothImage']=![]),_0x407b09[_0x9425a6(0x48b)][_0x9425a6(0x27e)]===undefined&&(_0x407b09[_0x9425a6(0x48b)][_0x9425a6(0x27e)]=!![]),_0x407b09['Actor']['PrioritySortActive']===undefined&&(_0x407b09['Actor'][_0x9425a6(0x319)]=![]),_0x407b09['Actor'][_0x9425a6(0x594)]===undefined&&(_0x407b09['Actor'][_0x9425a6(0x594)]=!![]);},VisuMZ[_0x58cf34(0x764)]={},Scene_Boot[_0x58cf34(0x8ef)]['process_VisuMZ_BattleCore_DamageStyles']=function(){const _0x166ce4=_0x58cf34;for(const _0x38bb0c of VisuMZ['BattleCore'][_0x166ce4(0xb05)][_0x166ce4(0x693)][_0x166ce4(0x8d4)]){if(!_0x38bb0c)continue;const _0x3e017e=_0x38bb0c[_0x166ce4(0x7c1)][_0x166ce4(0x6f5)]()[_0x166ce4(0x989)]();VisuMZ[_0x166ce4(0x764)][_0x3e017e]=_0x38bb0c;}},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x32a)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot[_0x58cf34(0x8ef)][_0x58cf34(0xc01)]=function(){const _0x15da4a=_0x58cf34,_0x2100cc=VisuMZ['BattleCore']['RegExp'],_0x33fe2c=_0x15da4a(0xa05),_0xa66df1=[[_0x15da4a(0x305),_0x15da4a(0x8d5)],[_0x15da4a(0x4fd),_0x15da4a(0xa86)]],_0x2e8833=[[_0x15da4a(0x7c0),_0x15da4a(0x85f)],[_0x15da4a(0x480),_0x15da4a(0x5f7)]],_0x57ee38=[['',''],[_0x15da4a(0x441),_0x15da4a(0x953)],['AsTarget',_0x15da4a(0x85d)]];for(const _0x4f5c88 of _0x2e8833){for(const _0x3cfb7c of _0x57ee38){for(const _0x1dad82 of _0xa66df1){const _0xd90a89=_0x4f5c88[0x0][_0x15da4a(0x1d3)](_0x1dad82[0x0],_0x3cfb7c[0x0]),_0x1c7a8b=_0x4f5c88[0x1][_0x15da4a(0x1d3)](_0x1dad82[0x1],_0x3cfb7c[0x1])[_0x15da4a(0x989)](),_0x3b7d3e=new RegExp(_0x33fe2c[_0x15da4a(0x1d3)](_0x1c7a8b),'i');_0x2100cc[_0xd90a89]=_0x3b7d3e;}}}const _0x2b6b1d=[['%1StartActionJS',_0x15da4a(0x58f)],[_0x15da4a(0x371),'JS\x20%1END\x20ACTION']];for(const _0x2547b5 of _0x2b6b1d){for(const _0x43860f of _0xa66df1){const _0x5e2346=_0x2547b5[0x0][_0x15da4a(0x1d3)](_0x43860f[0x0]),_0x32741e=_0x2547b5[0x1][_0x15da4a(0x1d3)](_0x43860f[0x1]),_0x1d446e=new RegExp(_0x33fe2c[_0x15da4a(0x1d3)](_0x32741e),'i');_0x2100cc[_0x5e2346]=_0x1d446e;}}const _0x457fac=[[_0x15da4a(0xa17),_0x15da4a(0x530)],[_0x15da4a(0x7e0),_0x15da4a(0x228)],[_0x15da4a(0xa0e),'JS\x20BATTLE\x20VICTORY'],[_0x15da4a(0x322),_0x15da4a(0x5df)],[_0x15da4a(0x40f),'JS\x20ESCAPE\x20SUCCESS'],[_0x15da4a(0x47e),'JS\x20ESCAPE\x20FAILURE'],['%1StartTurnJS',_0x15da4a(0x391)],['%1EndTurnJS',_0x15da4a(0x413)],[_0x15da4a(0x776),'JS\x20%1REGENERATE']];for(const _0x44f7aa of _0x457fac){for(const _0x185cd6 of _0xa66df1){const _0x519830=_0x44f7aa[0x0][_0x15da4a(0x1d3)](_0x185cd6[0x0]),_0x3c7c04=_0x44f7aa[0x1][_0x15da4a(0x1d3)](_0x185cd6[0x1]),_0x5b9101=new RegExp(_0x33fe2c['format'](_0x3c7c04),'i');_0x2100cc[_0x519830]=_0x5b9101;}}},Scene_Boot[_0x58cf34(0x8ef)]['process_VisuMZ_BattleCore_Action_Notetags']=function(){const _0x1c3ed6=_0x58cf34,_0x528e9e=$dataSkills[_0x1c3ed6(0xb59)]($dataItems);for(const _0x1c4496 of _0x528e9e){if(!_0x1c4496)continue;VisuMZ[_0x1c3ed6(0xa6b)][_0x1c3ed6(0x731)](_0x1c4496);}},Scene_Boot[_0x58cf34(0x8ef)][_0x58cf34(0x649)]=function(){const _0x259fd2=_0x58cf34,_0x149ec3=$dataActors[_0x259fd2(0xb59)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x5697c4 of _0x149ec3){if(!_0x5697c4)continue;VisuMZ[_0x259fd2(0xa6b)][_0x259fd2(0x635)](_0x5697c4),_0x5697c4[_0x259fd2(0x69b)]!==undefined&&VisuMZ[_0x259fd2(0xa6b)][_0x259fd2(0xc13)](_0x5697c4);}},Scene_Boot[_0x58cf34(0x8ef)]['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x408a63=_0x58cf34,_0x3c67de=VisuMZ[_0x408a63(0xa6b)]['Settings']['Mechanics']['BaseTroopIDs'],_0x2149b9=[];for(const _0x50f621 of _0x3c67de){const _0x55a06f=$dataTroops[_0x50f621];if(_0x55a06f)_0x2149b9[_0x408a63(0x6db)](JsonEx[_0x408a63(0x402)](_0x55a06f));}for(const _0x42e96e of $dataTroops){if(!_0x42e96e)continue;for(const _0xf650d1 of _0x2149b9){if(_0xf650d1['id']===_0x42e96e['id'])continue;_0x42e96e['pages']=_0x42e96e[_0x408a63(0x765)][_0x408a63(0xb59)](_0xf650d1[_0x408a63(0x765)]);}}},Scene_Boot['prototype'][_0x58cf34(0x64e)]=function(){const _0x2d3fa8=_0x58cf34,_0x3a3d4b=VisuMZ['BattleCore']['Settings']['Mechanics'];if(_0x3a3d4b['BattleStartEvent']>0x0&&$dataCommonEvents[_0x3a3d4b[_0x2d3fa8(0x401)]]){const _0x1ccd1b=$dataCommonEvents[_0x3a3d4b[_0x2d3fa8(0x401)]],_0x41f508=_0x1ccd1b[_0x2d3fa8(0x83e)][_0x2d3fa8(0x3eb)]-0x2,_0x505e83=_0x1ccd1b[_0x2d3fa8(0x83e)][_0x41f508];if(_0x505e83&&_0x505e83['code']!==0xe6){const _0x514d7f={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x537a87=_0x1ccd1b['list'][_0x2d3fa8(0x3a3)]();_0x1ccd1b[_0x2d3fa8(0x83e)]['unshift'](_0x514d7f),_0x1ccd1b['list'][_0x2d3fa8(0x2b1)](_0x537a87);}}},Scene_Boot[_0x58cf34(0x8ef)][_0x58cf34(0xb53)]=function(){const _0x29358e=_0x58cf34;VisuMZ[_0x29358e(0xa6b)]['CreateCommonEventKeys'](),VisuMZ[_0x29358e(0xa6b)][_0x29358e(0x264)]($dataSkills),VisuMZ[_0x29358e(0xa6b)][_0x29358e(0x264)]($dataItems);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x215)]=function(){const _0x392e48=_0x58cf34;VisuMZ[_0x392e48(0xa6b)][_0x392e48(0x856)]={};for(const _0x1e4876 of $dataCommonEvents){if(!_0x1e4876)continue;if(_0x1e4876[_0x392e48(0xc22)]['match'](/\[(.*)\]/i)){let _0x18de42=String(RegExp['$1'])['replace'](/,/g,'')[_0x392e48(0x6f5)]()[_0x392e48(0x989)]();VisuMZ[_0x392e48(0xa6b)][_0x392e48(0x856)][_0x18de42]=_0x1e4876['id'];}}},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x264)]=function(_0x10136d){const _0xde7a72=_0x58cf34;for(const _0x1c59c3 of _0x10136d){if(!_0x1c59c3)continue;VisuMZ['BattleCore'][_0xde7a72(0x47b)](_0x1c59c3);}},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x47b)]=function(_0x99638d){const _0x5e2d09=_0x58cf34;if(!_0x99638d)return;if(!_0x99638d[_0x5e2d09(0x88e)])return;VisuMZ['BattleCore'][_0x5e2d09(0x856)]=VisuMZ[_0x5e2d09(0xa6b)][_0x5e2d09(0x856)]||{};const _0x13e310=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x1907ef=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x57db86=[];const _0x5add3a=_0x99638d[_0x5e2d09(0x841)][_0x5e2d09(0xcbb)](_0x13e310);if(_0x5add3a){for(const _0x13137a of _0x5add3a){_0x13137a[_0x5e2d09(0xcbb)](_0x13e310);const _0x2f61e6=String(RegExp['$1'])[_0x5e2d09(0x69d)](',')[_0x5e2d09(0x5a0)](_0x2106a5=>String(_0x2106a5)[_0x5e2d09(0x6f5)]()[_0x5e2d09(0x989)]());_0x57db86=_0x57db86[_0x5e2d09(0xb59)](_0x2f61e6);}!_0x99638d['note'][_0x5e2d09(0xcbb)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x99638d[_0x5e2d09(0x841)]+=_0x5e2d09(0x72e));;}if(_0x99638d[_0x5e2d09(0x841)][_0x5e2d09(0xcbb)](_0x1907ef)){const _0x570194=String(RegExp['$1'])[_0x5e2d09(0x69d)](/[\r\n]+/)[_0x5e2d09(0x5a0)](_0x3f1734=>String(_0x3f1734)['toUpperCase']()['trim']());_0x57db86=_0x57db86[_0x5e2d09(0xb59)](_0x570194);!_0x99638d[_0x5e2d09(0x841)][_0x5e2d09(0xcbb)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x99638d['note']+=_0x5e2d09(0x72e));;}for(const _0x258d7f of _0x57db86){if(VisuMZ[_0x5e2d09(0xa6b)]['_commonEventKey'][_0x258d7f]){const _0x48cb01=VisuMZ[_0x5e2d09(0xa6b)][_0x5e2d09(0x856)][_0x258d7f],_0x5ace39={'code':0x2c,'dataId':_0x48cb01,'value1':0x1,'value2':0x0};_0x99638d['effects']['push'](_0x5ace39);}}},Scene_Boot[_0x58cf34(0x8ef)][_0x58cf34(0xa01)]=function(){const _0x5510a6=_0x58cf34,_0x4fd84c=$dataSkills['concat']($dataItems);for(const _0x4e361b of _0x4fd84c){if(!_0x4e361b)continue;VisuMZ[_0x5510a6(0xa6b)][_0x5510a6(0xb3f)](_0x4e361b);}},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x6cf)]=VisuMZ['ParseActorNotetags'],VisuMZ['ParseActorNotetags']=function(_0x57c094){const _0x308ca7=_0x58cf34;VisuMZ[_0x308ca7(0xa6b)][_0x308ca7(0x6cf)]&&VisuMZ[_0x308ca7(0xa6b)]['ParseActorNotetags'][_0x308ca7(0x9a4)](this,_0x57c094),VisuMZ[_0x308ca7(0xa6b)][_0x308ca7(0x635)](_0x57c094);},VisuMZ['BattleCore'][_0x58cf34(0xafa)]=VisuMZ[_0x58cf34(0xafa)],VisuMZ[_0x58cf34(0xafa)]=function(_0x35062d){const _0x28504a=_0x58cf34;VisuMZ[_0x28504a(0xa6b)][_0x28504a(0xafa)]&&VisuMZ['BattleCore'][_0x28504a(0xafa)]['call'](this,_0x35062d),VisuMZ['BattleCore'][_0x28504a(0x635)](_0x35062d);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xa95)]=VisuMZ[_0x58cf34(0xa95)],VisuMZ[_0x58cf34(0xa95)]=function(_0x1734b8){const _0x3c9452=_0x58cf34;VisuMZ['BattleCore']['ParseSkillNotetags']&&VisuMZ[_0x3c9452(0xa6b)]['ParseSkillNotetags'][_0x3c9452(0x9a4)](this,_0x1734b8),VisuMZ['BattleCore'][_0x3c9452(0x731)](_0x1734b8),VisuMZ[_0x3c9452(0xa6b)][_0x3c9452(0xb3f)](_0x1734b8);},VisuMZ[_0x58cf34(0xa6b)]['ParseItemNotetags']=VisuMZ[_0x58cf34(0x8fd)],VisuMZ['ParseItemNotetags']=function(_0x100d73){const _0x436e1b=_0x58cf34;VisuMZ[_0x436e1b(0xa6b)][_0x436e1b(0x8fd)]&&VisuMZ[_0x436e1b(0xa6b)][_0x436e1b(0x8fd)][_0x436e1b(0x9a4)](this,_0x100d73),VisuMZ['BattleCore']['Parse_Notetags_Action'](_0x100d73),VisuMZ[_0x436e1b(0xa6b)][_0x436e1b(0xb3f)](_0x100d73);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xbf7)]=VisuMZ[_0x58cf34(0xbf7)],VisuMZ['ParseWeaponNotetags']=function(_0x4bfdca){const _0x301757=_0x58cf34;VisuMZ[_0x301757(0xa6b)][_0x301757(0xbf7)]&&VisuMZ['BattleCore'][_0x301757(0xbf7)]['call'](this,_0x4bfdca),VisuMZ[_0x301757(0xa6b)]['Parse_Notetags_TraitObjects'](_0x4bfdca);},VisuMZ[_0x58cf34(0xa6b)]['ParseArmorNotetags']=VisuMZ[_0x58cf34(0x637)],VisuMZ['ParseArmorNotetags']=function(_0x43f422){const _0x165f5e=_0x58cf34;VisuMZ[_0x165f5e(0xa6b)]['ParseArmorNotetags']&&VisuMZ['BattleCore'][_0x165f5e(0x637)]['call'](this,_0x43f422),VisuMZ['BattleCore'][_0x165f5e(0x635)](_0x43f422);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x364)]=VisuMZ[_0x58cf34(0x364)],VisuMZ[_0x58cf34(0x364)]=function(_0x7b4548){const _0x253d19=_0x58cf34;VisuMZ[_0x253d19(0xa6b)][_0x253d19(0x364)]&&VisuMZ[_0x253d19(0xa6b)][_0x253d19(0x364)][_0x253d19(0x9a4)](this,_0x7b4548),VisuMZ['BattleCore'][_0x253d19(0x635)](_0x7b4548);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x4bd)]=VisuMZ[_0x58cf34(0x4bd)],VisuMZ['ParseStateNotetags']=function(_0x253bff){const _0x2a9cde=_0x58cf34;VisuMZ[_0x2a9cde(0xa6b)][_0x2a9cde(0x4bd)]&&VisuMZ['BattleCore'][_0x2a9cde(0x4bd)][_0x2a9cde(0x9a4)](this,_0x253bff),VisuMZ[_0x2a9cde(0xa6b)][_0x2a9cde(0x635)](_0x253bff),VisuMZ[_0x2a9cde(0xa6b)][_0x2a9cde(0xc13)](_0x253bff);},VisuMZ['BattleCore']['Parse_Notetags_Action']=function(_0x3388b3){const _0x53bae4=_0x58cf34,_0x3cf4a8=[_0x53bae4(0xc16),_0x53bae4(0xc37),_0x53bae4(0x5a8),_0x53bae4(0xada),'PreStartActionJS',_0x53bae4(0x850),_0x53bae4(0xc50),_0x53bae4(0xa22)];for(const _0x3049c9 of _0x3cf4a8){VisuMZ[_0x53bae4(0xa6b)][_0x53bae4(0x54f)](_0x3388b3,_0x3049c9);}const _0x49e26e=_0x3388b3[_0x53bae4(0x841)];_0x49e26e[_0x53bae4(0xcbb)](/<ALWAYS CRITICAL/i)&&(_0x3388b3[_0x53bae4(0xacd)][_0x53bae4(0x513)]=!![]),_0x49e26e[_0x53bae4(0xcbb)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x3388b3[_0x53bae4(0x603)]=Math[_0x53bae4(0x238)](0x1,Number(RegExp['$1']))),_0x49e26e[_0x53bae4(0xcbb)](/<TARGET:[ ](.*)>/i)&&(_0x3388b3[_0x53bae4(0x303)]=String(RegExp['$1'])[_0x53bae4(0x6f5)]()[_0x53bae4(0x989)]());},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x635)]=function(_0x481f0b){const _0x1d210f=_0x58cf34,_0x11d6ef=[_0x1d210f(0x96f),'PostApplyAsUserJS',_0x1d210f(0x8ad),_0x1d210f(0x31c),'PreApplyAsTargetJS','PostApplyAsTargetJS','PreDamageAsTargetJS',_0x1d210f(0xb4b),_0x1d210f(0x3b1),'PostStartActionJS',_0x1d210f(0xc50),_0x1d210f(0xa22),'PreStartBattleJS',_0x1d210f(0xc6e),_0x1d210f(0xc44),_0x1d210f(0x64c),_0x1d210f(0xa0e),_0x1d210f(0x322),_0x1d210f(0x40f),_0x1d210f(0x47e),_0x1d210f(0x41b),_0x1d210f(0x415),_0x1d210f(0x7de),_0x1d210f(0x5ea),_0x1d210f(0x1c9),'PostRegenerateJS'];for(const _0x40e4e1 of _0x11d6ef){VisuMZ[_0x1d210f(0xa6b)][_0x1d210f(0x54f)](_0x481f0b,_0x40e4e1);}const _0xa0eaaa=[_0x1d210f(0x24b),_0x1d210f(0xab1),_0x1d210f(0x4ea),'jsCritRateAsUser','jsCritRateAsTarget'];for(const _0x1b28b0 of _0xa0eaaa){VisuMZ[_0x1d210f(0xa6b)][_0x1d210f(0x575)](_0x481f0b,_0x1b28b0);}},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb3f)]=function(_0x4d22fd){const _0x5d669d=_0x58cf34,_0xdfb832=_0x4d22fd[_0x5d669d(0x841)];if(_0xdfb832[_0x5d669d(0xcbb)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x3ef7bc=String(RegExp['$1']),_0x14bf8f=VisuMZ[_0x5d669d(0xa6b)][_0x5d669d(0x2fa)](_0x4d22fd,_0x5d669d(0x871));VisuMZ[_0x5d669d(0xa6b)][_0x5d669d(0xbfa)](_0x3ef7bc,_0x14bf8f);}if(_0xdfb832[_0x5d669d(0xcbb)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x2b5ff3=String(RegExp['$1']),_0x1eec06=VisuMZ[_0x5d669d(0xa6b)][_0x5d669d(0x2fa)](_0x4d22fd,_0x5d669d(0x928));VisuMZ[_0x5d669d(0xa6b)][_0x5d669d(0x952)](_0x2b5ff3,_0x1eec06);}},VisuMZ[_0x58cf34(0xa6b)]['JS']={},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x54f)]=function(_0x24b070,_0x48d989){const _0x2dbc32=_0x58cf34,_0x1616f2=_0x24b070[_0x2dbc32(0x841)];if(_0x1616f2[_0x2dbc32(0xcbb)](VisuMZ[_0x2dbc32(0xa6b)][_0x2dbc32(0x32a)][_0x48d989])){const _0x321ccf=RegExp['$1'],_0x2f9c88=_0x2dbc32(0x96e)[_0x2dbc32(0x1d3)](_0x321ccf),_0x262547=VisuMZ[_0x2dbc32(0xa6b)]['createKeyJS'](_0x24b070,_0x48d989);VisuMZ[_0x2dbc32(0xa6b)]['JS'][_0x262547]=new Function(_0x2f9c88);}},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x2fa)]=function(_0x2378e7,_0x4f3f52){const _0x1f47ef=_0x58cf34;if(VisuMZ['createKeyJS'])return VisuMZ[_0x1f47ef(0x2fa)](_0x2378e7,_0x4f3f52);let _0xfa6b62='';if($dataActors[_0x1f47ef(0x375)](_0x2378e7))_0xfa6b62='Actor-%1-%2'[_0x1f47ef(0x1d3)](_0x2378e7['id'],_0x4f3f52);if($dataClasses[_0x1f47ef(0x375)](_0x2378e7))_0xfa6b62=_0x1f47ef(0x5a7)[_0x1f47ef(0x1d3)](_0x2378e7['id'],_0x4f3f52);if($dataSkills[_0x1f47ef(0x375)](_0x2378e7))_0xfa6b62=_0x1f47ef(0x740)[_0x1f47ef(0x1d3)](_0x2378e7['id'],_0x4f3f52);if($dataItems[_0x1f47ef(0x375)](_0x2378e7))_0xfa6b62=_0x1f47ef(0x37d)[_0x1f47ef(0x1d3)](_0x2378e7['id'],_0x4f3f52);if($dataWeapons[_0x1f47ef(0x375)](_0x2378e7))_0xfa6b62='Weapon-%1-%2'[_0x1f47ef(0x1d3)](_0x2378e7['id'],_0x4f3f52);if($dataArmors['includes'](_0x2378e7))_0xfa6b62='Armor-%1-%2'['format'](_0x2378e7['id'],_0x4f3f52);if($dataEnemies[_0x1f47ef(0x375)](_0x2378e7))_0xfa6b62=_0x1f47ef(0x5c5)[_0x1f47ef(0x1d3)](_0x2378e7['id'],_0x4f3f52);if($dataStates[_0x1f47ef(0x375)](_0x2378e7))_0xfa6b62=_0x1f47ef(0x4f7)[_0x1f47ef(0x1d3)](_0x2378e7['id'],_0x4f3f52);return _0xfa6b62;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xbfa)]=function(_0x22fea8,_0x2d0062){const _0x249e2e=_0x58cf34,_0x408647=_0x249e2e(0x821)['format'](_0x22fea8);VisuMZ[_0x249e2e(0xa6b)]['JS'][_0x2d0062]=new Function(_0x408647);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x952)]=function(_0x3bedda,_0xf8d08b){const _0x58000c=_0x58cf34,_0x1cff8a=_0x58000c(0x1dc)[_0x58000c(0x1d3)](_0x3bedda);VisuMZ[_0x58000c(0xa6b)]['JS'][_0xf8d08b]=new Function(_0x1cff8a);},VisuMZ['BattleCore'][_0x58cf34(0x575)]=function(_0x450245,_0x4cf33b){const _0x559a1c=_0x58cf34,_0x3056d2=_0x450245[_0x559a1c(0x841)];if(_0x3056d2[_0x559a1c(0xcbb)](VisuMZ['BattleCore'][_0x559a1c(0x32a)][_0x4cf33b])){const _0x127528=RegExp['$1'],_0x5e3d6e='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x559a1c(0x1d3)](_0x127528),_0x1c57d4=VisuMZ['BattleCore']['createKeyJS'](_0x450245,_0x4cf33b);VisuMZ[_0x559a1c(0xa6b)]['JS'][_0x1c57d4]=new Function(_0x5e3d6e);}},VisuMZ['BattleCore'][_0x58cf34(0xc13)]=function(_0x214036){const _0x1c6729=_0x58cf34;_0x214036[_0x1c6729(0x3c2)]='-';const _0x26c934=_0x214036[_0x1c6729(0x841)];_0x26c934['match'](/<(?:HELP|HELP DESCRIPTION|DESCRIPTION)>\s*([\s\S]*)\s*<\/(?:HELP|HELP DESCRIPTION|DESCRIPTION)>/i)&&(_0x214036[_0x1c6729(0x3c2)]=String(RegExp['$1'])[_0x1c6729(0x989)]()),_0x26c934[_0x1c6729(0xcbb)](/<(?:IN-BATTLE |)STATUS DESCRIPTION>\s*([\s\S]*)\s*<\/(?:IN-BATTLE |)STATUS DESCRIPTION>/i)&&(_0x214036[_0x1c6729(0x523)]=String(RegExp['$1'])['trim']()),_0x26c934['match'](/<EXCLUDE FROM (?:HELP|STATUS|STATUS LIST|LISTING)>/i)&&(_0x214036[_0x1c6729(0x770)]=!![]);},TextManager[_0x58cf34(0x8f0)]=VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x25c)][_0x58cf34(0x2fc)],TextManager['autoBattleStart']=VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x96a)][_0x58cf34(0x244)],TextManager[_0x58cf34(0x6b8)]=VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x96a)]['StyleName'],TextManager[_0x58cf34(0x818)]=VisuMZ[_0x58cf34(0xa6b)]['Settings']['HpGauge'][_0x58cf34(0x7c1)],ColorManager[_0x58cf34(0x3a4)]=function(_0x848d5){const _0x46f1d5=_0x58cf34;return _0x848d5=String(_0x848d5),_0x848d5[_0x46f1d5(0xcbb)](/#(.*)/i)?_0x46f1d5(0x6c8)[_0x46f1d5(0x1d3)](String(RegExp['$1'])):this[_0x46f1d5(0x6d1)](Number(_0x848d5));},DataManager[_0x58cf34(0x813)]=function(_0x1d8a95){const _0xe5034=_0x58cf34;if(_0x1d8a95[_0xe5034(0x841)][_0xe5034(0xcbb)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x8e1b72=String(RegExp['$1'])[_0xe5034(0x6f5)]()['trim']();if(_0x8e1b72===_0xe5034(0xc73))return _0xe5034(0xc73);if(VisuMZ['DamageStyles'][_0x8e1b72])return _0x8e1b72;}const _0x38d640=VisuMZ[_0xe5034(0xa6b)]['Settings'][_0xe5034(0x693)][_0xe5034(0x4f4)][_0xe5034(0x6f5)]()[_0xe5034(0x989)]();if(VisuMZ[_0xe5034(0x764)][_0x38d640])return _0x38d640;return _0xe5034(0xc73);},DataManager[_0x58cf34(0x915)]=function(_0x351cf7){const _0x1bf3bd=_0x58cf34;_0x351cf7=_0x351cf7[_0x1bf3bd(0x6f5)]()['trim'](),this[_0x1bf3bd(0x5e0)]=this[_0x1bf3bd(0x5e0)]||{};if(this[_0x1bf3bd(0x5e0)][_0x351cf7])return this[_0x1bf3bd(0x5e0)][_0x351cf7];for(let _0xdeeea4=0x1;_0xdeeea4<0x64;_0xdeeea4++){if(!$dataSystem['skillTypes'][_0xdeeea4])continue;let _0x3d7441=$dataSystem['skillTypes'][_0xdeeea4]['toUpperCase']()[_0x1bf3bd(0x989)]();_0x3d7441=_0x3d7441[_0x1bf3bd(0x6e4)](/\x1I\[(\d+)\]/gi,''),_0x3d7441=_0x3d7441[_0x1bf3bd(0x6e4)](/\\I\[(\d+)\]/gi,''),this[_0x1bf3bd(0x5e0)][_0x3d7441]=_0xdeeea4;}return this[_0x1bf3bd(0x5e0)][_0x351cf7]||0x0;},DataManager[_0x58cf34(0x4db)]=function(_0x41d9aa){const _0x350961=_0x58cf34;_0x41d9aa=_0x41d9aa[_0x350961(0x6f5)]()['trim'](),this['_skillIDs']=this['_skillIDs']||{};if(this[_0x350961(0x8f6)][_0x41d9aa])return this[_0x350961(0x8f6)][_0x41d9aa];for(const _0x584e4b of $dataSkills){if(!_0x584e4b)continue;this['_skillIDs'][_0x584e4b['name'][_0x350961(0x6f5)]()[_0x350961(0x989)]()]=_0x584e4b['id'];}return this[_0x350961(0x8f6)][_0x41d9aa]||0x0;},DataManager[_0x58cf34(0x883)]=function(_0x4549df){const _0x456cb2=_0x58cf34;_0x4549df=_0x4549df[_0x456cb2(0x6f5)]()[_0x456cb2(0x989)](),this[_0x456cb2(0x329)]=this[_0x456cb2(0x329)]||{};if(this[_0x456cb2(0x329)][_0x4549df])return this[_0x456cb2(0x329)][_0x4549df];for(const _0x1f6252 of $dataEnemies){if(!_0x1f6252)continue;this['_enemyIDs'][_0x1f6252['name']['toUpperCase']()['trim']()]=_0x1f6252['id'];}return this['_enemyIDs'][_0x4549df]||0x0;},DataManager[_0x58cf34(0xa5f)]=function(_0x3f3c4d){const _0x4f9ca1=_0x58cf34;_0x3f3c4d=_0x3f3c4d['toUpperCase']()['trim'](),this[_0x4f9ca1(0x548)]=this['_wtypeIDs']||{};if(this['_wtypeIDs'][_0x3f3c4d])return this[_0x4f9ca1(0x548)][_0x3f3c4d];for(let _0x1e2d07=0x1;_0x1e2d07<0x64;_0x1e2d07++){if(!$dataSystem[_0x4f9ca1(0x7c7)][_0x1e2d07])continue;let _0x386461=$dataSystem['weaponTypes'][_0x1e2d07][_0x4f9ca1(0x6f5)]()['trim']();_0x386461=_0x386461[_0x4f9ca1(0x6e4)](/\x1I\[(\d+)\]/gi,''),_0x386461=_0x386461['replace'](/\\I\[(\d+)\]/gi,''),this[_0x4f9ca1(0x548)][_0x386461]=_0x1e2d07;}return this[_0x4f9ca1(0x548)][_0x4f9ca1(0x2d1)]=0x0,this[_0x4f9ca1(0x548)][_0x3f3c4d]||0x0;},DataManager[_0x58cf34(0x65a)]=function(_0x34b3ea){const _0x575dba=_0x58cf34,_0x2f744a=_0x575dba(0x5c9);let _0x243232=_0x34b3ea[_0x575dba(0x899)],_0x1ba446=_0x34b3ea[_0x575dba(0xc22)];const _0x380ecd=_0x34b3ea[_0x575dba(0x841)];return _0x380ecd[_0x575dba(0xcbb)](/<DISPLAY ICON: (\d+)>/i)&&(_0x243232=Number(RegExp['$1'])),_0x380ecd[_0x575dba(0xcbb)](/<DISPLAY TEXT: (.*)>/i)&&(_0x1ba446=String(RegExp['$1'])),_0x2f744a['format'](_0x243232,_0x1ba446);},DataManager[_0x58cf34(0x7f3)]=function(_0x2cf933){const _0x13bd37=_0x58cf34;return _0x2cf933[_0x13bd37(0x841)]['match'](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x2cf933['name'];},DataManager[_0x58cf34(0xbe5)]=function(_0x40a237){const _0x5de19a=_0x58cf34;return _0x40a237[_0x5de19a(0x841)][_0x5de19a(0xcbb)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x40a237[_0x5de19a(0x899)];},DataManager['swapEnemyIDs']=function(_0x6c9b2){const _0x1f446e=_0x58cf34,_0x368bee=$dataEnemies[_0x6c9b2];if(_0x368bee){if(_0x368bee[_0x1f446e(0x841)][_0x1f446e(0xcbb)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x5c3149=String(RegExp['$1'])[_0x1f446e(0x69d)](/[\r\n]+/)[_0x1f446e(0x61f)](''),_0x51b752=this[_0x1f446e(0xac0)](_0x5c3149);_0x6c9b2=this['getEnemyIdWithName'](_0x51b752)||_0x6c9b2,_0x6c9b2=DataManager[_0x1f446e(0x5d7)](_0x6c9b2);}}return _0x6c9b2;},DataManager[_0x58cf34(0xac0)]=function(_0x48664d){const _0x276a99=_0x58cf34;let _0x16457b=0x0;const _0x4c3229={};for(const _0x358fd of _0x48664d){if(_0x358fd['match'](/(.*):[ ](\d+)/i)){const _0xecf84e=String(RegExp['$1'])['trim'](),_0x15719b=Number(RegExp['$2']);_0x4c3229[_0xecf84e]=_0x15719b,_0x16457b+=_0x15719b;}else{if(_0x358fd[_0x276a99(0xcbb)](/(.*):[ ](\d+\.?\d+)/i)){const _0x4d3fdb=String(RegExp['$1'])[_0x276a99(0x989)](),_0x52021f=Number(RegExp['$2']);_0x4c3229[_0x4d3fdb]=_0x52021f,_0x16457b+=_0x52021f;}else _0x358fd!==''&&(_0x4c3229[_0x358fd]=0x1,_0x16457b++);}}if(_0x16457b<=0x0)return'';let _0x4dc137=Math[_0x276a99(0x613)]()*_0x16457b;for(const _0x1f6f26 in _0x4c3229){_0x4dc137-=_0x4c3229[_0x1f6f26];if(_0x4dc137<=0x0)return _0x1f6f26;}return'';},DataManager[_0x58cf34(0x942)]=function(_0x3159cc){const _0x50892b=_0x58cf34;if(!_0x3159cc)return![];if(!VisuMZ[_0x50892b(0xa6b)][_0x50892b(0xb05)][_0x50892b(0x3f0)]['AutoNotetag'])return![];if(_0x3159cc['note'][_0x50892b(0xcbb)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x3159cc[_0x50892b(0x841)][_0x50892b(0xcbb)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0xb07c60 of _0x3159cc[_0x50892b(0x88e)]){if(!_0xb07c60)continue;if(_0xb07c60['code']===Game_Action[_0x50892b(0x75b)])return!![];}return![];},DataManager[_0x58cf34(0x41a)]=function(_0x54dbe2){const _0x11dbb4=_0x58cf34,_0x469f75=$dataTroops[_0x54dbe2];if(!_0x469f75)return'';let _0x32d6e7='';_0x32d6e7+=_0x469f75[_0x11dbb4(0xc22)];for(const _0x9ccc5c of _0x469f75[_0x11dbb4(0x765)]){for(const _0x42cda0 of _0x9ccc5c[_0x11dbb4(0x83e)]){[0x6c,0x198][_0x11dbb4(0x375)](_0x42cda0[_0x11dbb4(0xbe2)])&&(_0x32d6e7+='\x0a',_0x32d6e7+=_0x42cda0[_0x11dbb4(0xbce)][0x0]);}}return _0x32d6e7;},ConfigManager['autoBattleAtStart']=ConfigManager[_0x58cf34(0x996)]??![],ConfigManager['autoBattleUseSkills']=ConfigManager['autoBattleUseSkills']??![],ConfigManager[_0x58cf34(0x818)]=ConfigManager[_0x58cf34(0x818)]??!![],VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x27f)]=ConfigManager['makeData'],ConfigManager['makeData']=function(){const _0x284412=_0x58cf34,_0x247f6f=VisuMZ[_0x284412(0xa6b)]['ConfigManager_makeData']['call'](this);return _0x247f6f['autoBattleAtStart']=this[_0x284412(0x996)],_0x247f6f[_0x284412(0x471)]=this[_0x284412(0x471)],_0x247f6f['visualHpGauge']=this[_0x284412(0x818)],_0x247f6f;},VisuMZ['BattleCore'][_0x58cf34(0xa4f)]=ConfigManager['applyData'],ConfigManager[_0x58cf34(0x74e)]=function(_0x8b5b00){const _0x4a36ec=_0x58cf34;VisuMZ['BattleCore'][_0x4a36ec(0xa4f)][_0x4a36ec(0x9a4)](this,_0x8b5b00),'autoBattleAtStart'in _0x8b5b00?this['autoBattleAtStart']=_0x8b5b00[_0x4a36ec(0x996)]:this[_0x4a36ec(0x996)]=![],_0x4a36ec(0x471)in _0x8b5b00?this['autoBattleUseSkills']=_0x8b5b00[_0x4a36ec(0x471)]:this[_0x4a36ec(0x471)]=![],_0x4a36ec(0x818)in _0x8b5b00?this['visualHpGauge']=_0x8b5b00[_0x4a36ec(0x818)]:this[_0x4a36ec(0x818)]=!![];},ImageManager[_0x58cf34(0x8ac)]=ImageManager[_0x58cf34(0x8ac)]||0x9,ImageManager[_0x58cf34(0xce2)]=ImageManager[_0x58cf34(0xce2)]||0x6,VisuMZ['BattleCore'][_0x58cf34(0xc8a)]=BattleManager[_0x58cf34(0x6e1)],BattleManager['setup']=function(_0x1603a9,_0x58f772,_0x86061b){const _0xc57938=_0x58cf34;VisuMZ[_0xc57938(0xa6b)]['BattleManager_setup']['call'](this,_0x1603a9,_0x58f772,_0x86061b),this[_0xc57938(0x1c5)]={};},VisuMZ['BattleCore'][_0x58cf34(0xc4d)]=BattleManager[_0x58cf34(0x7c8)],BattleManager[_0x58cf34(0x7c8)]=function(){const _0x484f3a=_0x58cf34;VisuMZ[_0x484f3a(0xa6b)][_0x484f3a(0xc4d)][_0x484f3a(0x9a4)](this),this[_0x484f3a(0x266)]=[];},BattleManager[_0x58cf34(0x9b8)]=function(){const _0x48197e=_0x58cf34;if(!SceneManager[_0x48197e(0x3d3)]())return;const _0x10ac9a=SceneManager[_0x48197e(0xb85)][_0x48197e(0x4f1)];if(_0x10ac9a)_0x10ac9a[_0x48197e(0x347)]();},BattleManager[_0x58cf34(0x3c3)]=function(){if(BattleManager['isTpb']())return'TPB';return'DTB';},BattleManager[_0x58cf34(0x3d6)]=function(_0x4174cb){const _0x206959=_0x58cf34;return _0x4174cb=_0x4174cb['toUpperCase']()[_0x206959(0x989)](),this[_0x206959(0x3c3)]()===_0x4174cb;},BattleManager[_0x58cf34(0x4b1)]=function(){const _0x1ea468=_0x58cf34;return this['isBattleSys'](_0x1ea468(0x4c4));},BattleManager[_0x58cf34(0x55e)]=function(){const _0x482c74=_0x58cf34;return this[_0x482c74(0x4b1)]();},BattleManager['isTickBased']=function(){return!this['isTurnBased']();},BattleManager['isTeamBased']=function(){const _0x1a47a9=_0x58cf34;return!this[_0x1a47a9(0x55e)]()&&!this[_0x1a47a9(0xb57)]();},BattleManager['getBattlerFromKey']=function(_0x42c552){const _0x45f05d=_0x58cf34;this['_battlerKeyCache']=this['_battlerKeyCache']||{};if(this[_0x45f05d(0x1c5)][_0x42c552]!==undefined)return this[_0x45f05d(0x1c5)][_0x42c552];this['_battlerKeyCache'][_0x42c552]=null;const _0x35c413=this['allBattleMembers'](),_0x45208d=_0x35c413[_0x45f05d(0xa56)](_0x31c3e3=>_0x31c3e3[_0x45f05d(0xc64)]()===_0x42c552);if(_0x45208d)this[_0x45f05d(0x1c5)][_0x42c552]=_0x45208d;return this['_battlerKeyCache'][_0x42c552];},Game_BattlerBase['prototype'][_0x58cf34(0xc64)]=function(){const _0x2c0e19=_0x58cf34;return'%1-%2'[_0x2c0e19(0x1d3)](this[_0x2c0e19(0x40c)]()?_0x2c0e19(0x2fd):_0x2c0e19(0xc20),this['name']()+'-'+(this[_0x2c0e19(0x40c)]()?this[_0x2c0e19(0xb00)]():this[_0x2c0e19(0x94f)]()));},Game_Action['prototype'][_0x58cf34(0xba2)]=function(_0x158a9a){const _0x17b9d6=_0x58cf34;if(this[_0x17b9d6(0xa64)]!=='')return;typeof _0x158a9a==='string'?this[_0x17b9d6(0xa64)]=_0x158a9a['toLowerCase']()[_0x17b9d6(0x989)]():this[_0x17b9d6(0xa64)]=_0x158a9a['battlerKey']();},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x7b0)]=function(){const _0x35becb=_0x58cf34;return[this[_0x35becb(0x2dd)]()];},Game_Action['prototype']['getSpecificBattlerKeyTarget']=function(){const _0x31f4fb=_0x58cf34,_0x57632e=this[_0x31f4fb(0xa64)]||'',_0x56c536=BattleManager[_0x31f4fb(0xc63)](_0x57632e);if(!_0x56c536)return this[_0x31f4fb(0x44d)]();if(!_0x56c536['isAlive']())return this[_0x31f4fb(0x44d)]();return _0x56c536;},Game_Action[_0x58cf34(0x8ef)]['getBattlerKeyTargetReplacement']=function(){const _0x586e9b=_0x58cf34,_0x524d69=this[_0x586e9b(0xa64)];return _0x524d69['match'](/ACTOR/i)?this[_0x586e9b(0x8d8)]()[_0x586e9b(0x1ea)]():this[_0x586e9b(0x907)]()[_0x586e9b(0x1ea)]();},BattleManager['selectedBattlers']=function(){const _0x2022c0=_0x58cf34;return this[_0x2022c0(0xa58)]()[_0x2022c0(0x8b3)](_0x50e87a=>_0x50e87a['isSelected']());},BattleManager[_0x58cf34(0x2ef)]=function(_0x48cb31){const _0x32db4b=_0x58cf34;_0x48cb31===_0x32db4b(0xa0e)&&(this[_0x32db4b(0x8c6)]=!![]),$gameParty[_0x32db4b(0x2ef)](_0x48cb31),$gameTroop['processBattleCoreJS'](_0x48cb31);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x1c6)]=BattleManager[_0x58cf34(0xc6b)],BattleManager[_0x58cf34(0xc6b)]=function(){const _0x3ce246=_0x58cf34;this[_0x3ce246(0x536)]=![],this[_0x3ce246(0x7d4)]=ConfigManager[_0x3ce246(0x996)],this[_0x3ce246(0x8c6)]=![],this[_0x3ce246(0x2ef)](_0x3ce246(0x885)),VisuMZ[_0x3ce246(0xa6b)][_0x3ce246(0x1c6)][_0x3ce246(0x9a4)](this),this[_0x3ce246(0x2ef)](_0x3ce246(0xc6e));},BattleManager[_0x58cf34(0x249)]=function(_0x5300a4){const _0x542fe7=_0x58cf34,_0x1c4ea7=VisuMZ[_0x542fe7(0xa6b)]['Settings'][_0x542fe7(0x2ec)];_0x5300a4!==_0x542fe7(0x4a9)&&_0x1c4ea7['BattleEndEvent']&&VisuMZ[_0x542fe7(0xa6b)]['CheckMapBattleEventValid'](_0x1c4ea7['BattleEndEvent'])&&$gameTemp[_0x542fe7(0x75f)](_0x1c4ea7['BattleEndEvent']);const _0x9e9ef3='%1Event'[_0x542fe7(0x1d3)](_0x5300a4);_0x1c4ea7[_0x9e9ef3]&&VisuMZ[_0x542fe7(0xa6b)][_0x542fe7(0x27d)](_0x1c4ea7[_0x9e9ef3])&&$gameTemp[_0x542fe7(0x75f)](_0x1c4ea7[_0x9e9ef3]);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x87c)]=BattleManager[_0x58cf34(0x425)],BattleManager[_0x58cf34(0x425)]=function(){const _0x561422=_0x58cf34;VisuMZ[_0x561422(0xa6b)][_0x561422(0x87c)][_0x561422(0x9a4)](this),SceneManager['isSceneBattle']()&&BattleManager['updateEvent']();},VisuMZ[_0x58cf34(0xa6b)]['BattleManager_checkBattleEnd']=BattleManager[_0x58cf34(0x884)],BattleManager[_0x58cf34(0x884)]=function(){const _0xa94cf7=_0x58cf34;if(this[_0xa94cf7(0x5ed)]===_0xa94cf7(0xc53)){if($gameTemp['isCommonEventReserved']())return![];}return VisuMZ[_0xa94cf7(0xa6b)][_0xa94cf7(0x9e3)][_0xa94cf7(0x9a4)](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x3b6)]=BattleManager[_0x58cf34(0x222)],BattleManager[_0x58cf34(0x222)]=function(){const _0x41ec92=_0x58cf34;this[_0x41ec92(0x8c6)]=!![],this['processBattleCoreJS'](_0x41ec92(0xa0e)),VisuMZ[_0x41ec92(0xa6b)][_0x41ec92(0x3b6)][_0x41ec92(0x9a4)](this),this[_0x41ec92(0x249)]('Victory');},VisuMZ[_0x58cf34(0xa6b)]['BattleManager_processAbort']=BattleManager['processAbort'],BattleManager[_0x58cf34(0xaeb)]=function(){const _0x363125=_0x58cf34;this[_0x363125(0x8c6)]=!![],VisuMZ['BattleCore'][_0x363125(0xb82)][_0x363125(0x9a4)](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x64b)]=BattleManager[_0x58cf34(0x6ab)],BattleManager['processDefeat']=function(){const _0x18ca21=_0x58cf34;this['_endingBattle']=!![],this['processBattleCoreJS']('BattleDefeatJS'),VisuMZ['BattleCore'][_0x18ca21(0x64b)][_0x18ca21(0x9a4)](this),this[_0x18ca21(0x249)](_0x18ca21(0x1c1));},VisuMZ['BattleCore'][_0x58cf34(0x218)]=BattleManager[_0x58cf34(0x8f7)],BattleManager['endBattle']=function(_0xf0af25){const _0xfed4b7=_0x58cf34;this['_endBattle']=!![],this[_0xfed4b7(0x7d4)]=![],this[_0xfed4b7(0x2ef)]('PreEndBattleJS'),VisuMZ[_0xfed4b7(0xa6b)][_0xfed4b7(0x218)][_0xfed4b7(0x9a4)](this,_0xf0af25),this['processBattleCoreJS'](_0xfed4b7(0x64c));},VisuMZ['BattleCore'][_0x58cf34(0x5c3)]=BattleManager[_0x58cf34(0x553)],BattleManager[_0x58cf34(0x553)]=function(){const _0x5be169=_0x58cf34;if(this[_0x5be169(0x55e)]())this[_0x5be169(0x2ef)](_0x5be169(0x41b));VisuMZ[_0x5be169(0xa6b)][_0x5be169(0x5c3)]['call'](this);if(this['isTurnBased']())this['processBattleCoreJS']('PostStartTurnJS');},BattleManager[_0x58cf34(0xb43)]=function(){const _0x1e7a86=_0x58cf34,_0x53255a=this[_0x1e7a86(0x6f1)],_0x403299=_0x53255a[_0x1e7a86(0x559)]();_0x403299?(_0x403299[_0x1e7a86(0x626)](),_0x403299[_0x1e7a86(0x258)]()?(this[_0x1e7a86(0x65e)](),_0x53255a['removeCurrentAction']()):(_0x53255a[_0x1e7a86(0x6f9)](),this['endAction']())):(this['endAction'](),this[_0x1e7a86(0x6f1)]=null);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x30a)]=BattleManager[_0x58cf34(0x65e)],BattleManager[_0x58cf34(0x65e)]=function(){const _0x37cda5=_0x58cf34,_0x259d44=this['_subject'][_0x37cda5(0x559)](),_0x197300=this[_0x37cda5(0x6f1)];_0x259d44&&_0x259d44[_0x37cda5(0x28e)]()===_0x197300&&_0x259d44[_0x37cda5(0xae3)]('PreStartActionJS'),VisuMZ['BattleCore']['BattleManager_startAction'][_0x37cda5(0x9a4)](this),_0x259d44&&_0x259d44['subject']()===_0x197300&&_0x259d44[_0x37cda5(0xae3)]('PostStartActionJS');},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xbed)]=BattleManager[_0x58cf34(0xbb9)],BattleManager[_0x58cf34(0xbb9)]=function(){const _0x67f15b=_0x58cf34,_0x497043=this[_0x67f15b(0x5fc)],_0x1cabf2=this[_0x67f15b(0x6f1)];_0x497043&&_0x497043!==this[_0x67f15b(0x8a4)]&&_0x497043['subject']()===_0x1cabf2&&_0x497043[_0x67f15b(0xae3)](_0x67f15b(0xc50)),this['_subject']?VisuMZ['BattleCore']['BattleManager_endAction'][_0x67f15b(0x9a4)](this):this[_0x67f15b(0x5ed)]=_0x67f15b(0xc53),_0x497043&&_0x497043!==this['_lastAction']&&_0x497043[_0x67f15b(0x28e)]()===_0x1cabf2&&_0x497043['actionBattleCoreJS'](_0x67f15b(0xa22)),this[_0x67f15b(0x2cc)](this[_0x67f15b(0xa58)]()),this[_0x67f15b(0x8a4)]=this[_0x67f15b(0x5fc)];},BattleManager['refreshBattlerMotions']=function(_0x726e2f){const _0x19075c=_0x58cf34;for(const _0x16c932 of _0x726e2f){if(!_0x16c932)continue;if(!_0x16c932[_0x19075c(0x399)]())continue;_0x16c932['battler']()[_0x19075c(0x7d9)]();}},BattleManager['updateAction']=function(){const _0x5949bd=_0x58cf34;!this[_0x5949bd(0x55c)][_0x5949bd(0x68b)]()&&this[_0x5949bd(0xbb9)]();},Game_Battler['prototype']['onAllActionsEnd']=function(){const _0x544dc9=_0x58cf34;this[_0x544dc9(0x5dd)]();if(Imported[_0x544dc9(0x62f)]){const _0x29b5f2=VisuMZ[_0x544dc9(0x335)][_0x544dc9(0xb05)]['States'];_0x29b5f2&&_0x29b5f2[_0x544dc9(0xc3b)]===![]&&this[_0x544dc9(0x3f4)](0x1);}else this[_0x544dc9(0x3f4)](0x1);this[_0x544dc9(0x2f9)]();},VisuMZ['BattleCore'][_0x58cf34(0x455)]=BattleManager[_0x58cf34(0x490)],BattleManager[_0x58cf34(0x490)]=function(_0x3a1bc6,_0x50f987){const _0x6d375f=_0x58cf34;this[_0x6d375f(0x7fb)]=!![],VisuMZ[_0x6d375f(0xa6b)]['BattleManager_invokeCounterAttack']['call'](this,_0x3a1bc6,_0x50f987),this[_0x6d375f(0x7fb)]=undefined;},BattleManager['makeEscapeRatio']=function(){const _0x15d430=_0x58cf34;this[_0x15d430(0x449)]=VisuMZ[_0x15d430(0xa6b)]['Settings'][_0x15d430(0x2ec)]['CalcEscapeRatioJS'][_0x15d430(0x9a4)](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xa04)]=BattleManager[_0x58cf34(0x960)],BattleManager[_0x58cf34(0x960)]=function(){const _0x4f7452=_0x58cf34;this[_0x4f7452(0x2ef)](_0x4f7452(0x40f)),BattleManager[_0x4f7452(0x5ae)][_0x4f7452(0x2a4)](),VisuMZ[_0x4f7452(0xa6b)]['BattleManager_onEscapeSuccess'][_0x4f7452(0x9a4)](this),this[_0x4f7452(0x249)](_0x4f7452(0x58a));},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x828)]=BattleManager[_0x58cf34(0x719)],BattleManager[_0x58cf34(0x719)]=function(){const _0x23aba0=_0x58cf34;this[_0x23aba0(0x2ef)](_0x23aba0(0x47e));const _0x24a4b2=this['_escapeRatio'];VisuMZ[_0x23aba0(0xa6b)][_0x23aba0(0x828)][_0x23aba0(0x9a4)](this),this[_0x23aba0(0x449)]=_0x24a4b2+VisuMZ[_0x23aba0(0xa6b)][_0x23aba0(0xb05)][_0x23aba0(0x2ec)][_0x23aba0(0x694)][_0x23aba0(0x9a4)](this),this[_0x23aba0(0xab4)]=![],this['processPostBattleCommonEvents']('EscapeFail');},BattleManager[_0x58cf34(0x1fd)]=function(){const _0x4d7976=_0x58cf34;let _0x2266d2=![];if(this[_0x4d7976(0xbbd)]())for(const _0x342292 of $gameTroop['enemyNames']()){this[_0x4d7976(0x55c)]['push'](_0x4d7976(0x747),TextManager['emerge'][_0x4d7976(0x1d3)](_0x342292)),this[_0x4d7976(0x55c)]['push'](_0x4d7976(0xa15)),_0x2266d2=!![];}if(this[_0x4d7976(0x3f3)])this['_logWindow'][_0x4d7976(0x6db)](_0x4d7976(0x747),TextManager[_0x4d7976(0x881)][_0x4d7976(0x1d3)]($gameParty[_0x4d7976(0xc22)]())),this[_0x4d7976(0x55c)][_0x4d7976(0x6db)](_0x4d7976(0xa15));else this['_surprise']&&(this['_logWindow'][_0x4d7976(0x6db)](_0x4d7976(0x747),TextManager[_0x4d7976(0x8d2)][_0x4d7976(0x1d3)]($gameParty['name']())),this[_0x4d7976(0x55c)][_0x4d7976(0x6db)]('wait'));_0x2266d2&&(this[_0x4d7976(0x55c)]['push'](_0x4d7976(0xa15)),this[_0x4d7976(0x55c)][_0x4d7976(0x6db)]('clear')),this[_0x4d7976(0x2b7)]()&&this[_0x4d7976(0x300)]()&&(this[_0x4d7976(0xb87)]=![]);},BattleManager[_0x58cf34(0xbbd)]=function(){const _0x4339ee=_0x58cf34;if(BattleManager[_0x4339ee(0x7d4)])return![];return VisuMZ[_0x4339ee(0xa6b)][_0x4339ee(0xb05)][_0x4339ee(0x48b)]['EmergeText'];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xa27)]=BattleManager[_0x58cf34(0x5b1)],BattleManager['startInput']=function(){const _0x31f473=_0x58cf34;VisuMZ[_0x31f473(0xa6b)][_0x31f473(0xa27)][_0x31f473(0x9a4)](this),this['isDTB']()&&this[_0x31f473(0x300)]()&&!this[_0x31f473(0x289)]&&$gameParty['canInput']()&&this[_0x31f473(0x354)]();},BattleManager[_0x58cf34(0x300)]=function(){const _0x555065=_0x58cf34;return VisuMZ[_0x555065(0xa6b)][_0x555065(0xb05)]['PartyCmd'][_0x555065(0x7a1)];},BattleManager['checkTpbInputOpen']=function(){const _0x3971ba=_0x58cf34;this[_0x3971ba(0x8f4)]()&&this[_0x3971ba(0x354)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x209)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x643)],Scene_Battle['prototype'][_0x58cf34(0x643)]=function(){const _0xb6e1af=_0x58cf34;VisuMZ[_0xb6e1af(0xa6b)][_0xb6e1af(0x209)][_0xb6e1af(0x9a4)](this),BattleManager['isTpb']()&&BattleManager['_tpbNeedsPartyCommand']&&(BattleManager[_0xb6e1af(0xb87)]=![],this[_0xb6e1af(0x400)]());},BattleManager[_0x58cf34(0xc09)]=function(_0x71a867,_0x3ed8ea,_0x48e4c4){const _0x517e40=_0x58cf34;if(!_0x48e4c4)return;if(!_0x71a867)return;if(!_0x3ed8ea)return;const _0x335919=this[_0x517e40(0x5fc)];this[_0x517e40(0x5fc)]=new Game_Action(_0x71a867);if(DataManager[_0x517e40(0x6b9)](_0x48e4c4))this[_0x517e40(0x5fc)]['setItem'](_0x48e4c4['id']);if(DataManager[_0x517e40(0xcad)](_0x48e4c4))this[_0x517e40(0x5fc)][_0x517e40(0xb32)](_0x48e4c4['id']);if(this[_0x517e40(0x5fc)][_0x517e40(0xb8a)]())BattleManager[_0x517e40(0x464)](_0x71a867,_0x3ed8ea);this[_0x517e40(0x5fc)]=_0x335919;},BattleManager[_0x58cf34(0x914)]=function(_0x509e6e,_0x399081){const _0x404600=_0x58cf34;this['_action']['_reflectionTarget']=_0x399081,this[_0x404600(0x55c)][_0x404600(0x23b)](_0x399081),this['_logWindow'][_0x404600(0xc48)](_0x509e6e,this[_0x404600(0x5fc)]),this[_0x404600(0x5fc)]['apply'](_0x509e6e),this[_0x404600(0x55c)][_0x404600(0xa2b)](_0x509e6e,_0x509e6e);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xc35)]=BattleManager['makeActionOrders'],BattleManager[_0x58cf34(0xc08)]=function(){const _0x446215=_0x58cf34;VisuMZ[_0x446215(0xa6b)]['BattleManager_makeActionOrders'][_0x446215(0x9a4)](this),this[_0x446215(0x4d8)]=this['_actionBattlers'][_0x446215(0x8b3)](_0x188d5b=>_0x188d5b&&_0x188d5b[_0x446215(0x4a7)]());},VisuMZ['BattleCore'][_0x58cf34(0x4e8)]=BattleManager[_0x58cf34(0x919)],BattleManager[_0x58cf34(0x919)]=function(_0x3e2e08){const _0x4797db=_0x58cf34;if(this[_0x4797db(0x5ed)]===_0x4797db(0x3b0))this[_0x4797db(0x93e)]();else this[_0x4797db(0x5ed)]==='forceAction'?this[_0x4797db(0x66a)]():VisuMZ['BattleCore'][_0x4797db(0x4e8)]['call'](this,_0x3e2e08);},BattleManager[_0x58cf34(0x6ae)]=function(){const _0x1101c2=_0x58cf34;this['_allTargets']=this[_0x1101c2(0x922)][_0x1101c2(0x2c3)](0x0),this[_0x1101c2(0x704)]=0x0,this[_0x1101c2(0xb2a)]=this['_allTargets'][0x0]||null,this[_0x1101c2(0x5ed)]=_0x1101c2(0x3b0);},BattleManager[_0x58cf34(0x93e)]=function(){const _0x16bd1d=_0x58cf34;!this[_0x16bd1d(0x394)]()&&!this[_0x16bd1d(0x55c)][_0x16bd1d(0x68b)]()&&(this[_0x16bd1d(0x5ed)]=_0x16bd1d(0x36c));},BattleManager['forceAction']=function(_0x5b4b8a){const _0x4001ef=_0x58cf34;this['_actionBattlers'][_0x4001ef(0x61f)](_0x5b4b8a);if(_0x5b4b8a===this[_0x4001ef(0x6f1)])return;const _0x5a7069=JsonEx['makeDeepCopy'](_0x5b4b8a['currentAction']());this[_0x4001ef(0x266)]['push']([_0x5b4b8a,_0x5a7069]);},BattleManager[_0x58cf34(0xaff)]=function(){},BattleManager[_0x58cf34(0x701)]=function(){const _0x3d9151=_0x58cf34;if(this[_0x3d9151(0x2b7)]())this[_0x3d9151(0x5ed)]=_0x3d9151(0xc53);else this[_0x3d9151(0x266)][_0x3d9151(0x3eb)]>0x0?this['_phase']=_0x3d9151(0xc53):this['startInput']();},BattleManager[_0x58cf34(0xba8)]=function(){const _0x47f709=_0x58cf34,_0x2cafaf=this['_subject'];_0x2cafaf&&this['isTpb']()&&_0x2cafaf[_0x47f709(0xc59)](_0x47f709(0x7f4));for(;;){const _0x15cebe=this[_0x47f709(0xc66)]();if(!_0x15cebe)return null;if(_0x15cebe[_0x47f709(0x4b2)]()&&_0x15cebe[_0x47f709(0x328)]())return _0x15cebe;}},BattleManager[_0x58cf34(0xc66)]=function(){const _0x5dcda1=_0x58cf34;if(this[_0x5dcda1(0x266)][_0x5dcda1(0x3eb)]>0x0){const _0x3ad01c=this[_0x5dcda1(0x266)][_0x5dcda1(0x403)](),_0x3f14b2=_0x3ad01c[0x0];return _0x3f14b2[_0x5dcda1(0x1f4)]=_0x3f14b2[_0x5dcda1(0x1f4)]||[],_0x3f14b2['_actions'][0x0]=_0x3ad01c[0x1],_0x3f14b2;}else return this[_0x5dcda1(0x4d8)][_0x5dcda1(0x403)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x424)]=Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xc21)],Game_Battler[_0x58cf34(0x8ef)]['forceAction']=function(_0x274484,_0x26e44b){const _0x3837e0=_0x58cf34;VisuMZ['BattleCore'][_0x3837e0(0x424)][_0x3837e0(0x9a4)](this,_0x274484,_0x26e44b),this[_0x3837e0(0x1f4)][this[_0x3837e0(0x1f4)][_0x3837e0(0x3eb)]-0x1][_0x3837e0(0x406)]=!![];},Game_Interpreter['prototype'][_0x58cf34(0xad7)]=function(_0x22fee9){return this['iterateBattler'](_0x22fee9[0x0],_0x22fee9[0x1],_0x42ba27=>{const _0x75ada3=_0x16bc;!_0x42ba27[_0x75ada3(0x4c0)]()&&(_0x42ba27[_0x75ada3(0xc21)](_0x22fee9[0x2],_0x22fee9[0x3]),BattleManager['forceAction'](_0x42ba27));}),!![];},VisuMZ['BattleCore'][_0x58cf34(0x6de)]=Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x42e)],Game_Battler['prototype'][_0x58cf34(0x42e)]=function(){const _0x5eed25=_0x58cf34;VisuMZ[_0x5eed25(0xa6b)][_0x5eed25(0x6de)]['call'](this),this[_0x5eed25(0x1f4)][_0x5eed25(0x3eb)]<=0x0&&(this[_0x5eed25(0xa57)]=Number[_0x5eed25(0xb36)]);},BattleManager['shouldHideBattleEndPopups']=function(){const _0xbf2751=_0x58cf34;if(VisuMZ[_0xbf2751(0xa6b)][_0xbf2751(0xb05)]['Damage'][_0xbf2751(0x977)]??!![])return![];return SceneManager['isSceneBattle']()&&this[_0xbf2751(0x8c6)];},VisuMZ[_0x58cf34(0xa6b)]['BattleManager_selectNextCommand']=BattleManager[_0x58cf34(0x354)],BattleManager[_0x58cf34(0x354)]=function(){const _0x1d41e7=_0x58cf34;this['isTpb']()?this['selectNextCommandTpb']():VisuMZ['BattleCore'][_0x1d41e7(0x8e5)][_0x1d41e7(0x9a4)](this);},BattleManager[_0x58cf34(0x8ba)]=function(){const _0x147d72=_0x58cf34;if(this['_currentActor']){if(this[_0x147d72(0x87a)][_0x147d72(0x354)]())return;this[_0x147d72(0x9ae)](),this[_0x147d72(0x73c)](),!this[_0x147d72(0x6f1)]&&!this[_0x147d72(0x87a)]&&SceneManager['_scene'][_0x147d72(0x585)]();}else!this[_0x147d72(0x6f1)]&&this['selectNextActor']();},BattleManager[_0x58cf34(0x73c)]=function(){const _0x49d191=_0x58cf34;(!this[_0x49d191(0x8f4)]()||this[_0x49d191(0x92b)]())&&(this[_0x49d191(0x463)]&&(!$gameParty['battleMembers']()[_0x49d191(0x375)](this['_tpbSceneChangeCacheActor'])&&(this[_0x49d191(0x463)]=null)),!this[_0x49d191(0x463)]?(this['cancelActorInput'](),this['_currentActor']=null,this[_0x49d191(0xab4)]=![]):this['revertTpbCachedActor']());},BattleManager[_0x58cf34(0x20d)]=function(){const _0x52ca59=_0x58cf34;!$gameParty[_0x52ca59(0x623)]()[_0x52ca59(0x375)](this['_tpbSceneChangeCacheActor'])&&(this[_0x52ca59(0x463)]=null),this['_tpbSceneChangeCacheActor']?(this[_0x52ca59(0x87a)]=this[_0x52ca59(0x463)],this['_currentActor'][_0x52ca59(0x3a7)]=_0x52ca59(0xc1d),this['_inputting']=!![],this[_0x52ca59(0x463)]=null):(this[_0x52ca59(0x661)](),this['_currentActor']=null,this['_inputting']=![]);},VisuMZ['BattleCore'][_0x58cf34(0x1c3)]=BattleManager[_0x58cf34(0xb4f)],BattleManager[_0x58cf34(0xb4f)]=function(){const _0x218d20=_0x58cf34;return this[_0x218d20(0x5ed)]===_0x218d20(0x3b0)?this[_0x218d20(0x535)]():VisuMZ[_0x218d20(0xa6b)]['BattleManager_isTpbMainPhase'][_0x218d20(0x9a4)](this);},BattleManager[_0x58cf34(0x535)]=function(){const _0x575f6f=_0x58cf34;return this[_0x575f6f(0x1d9)]();},VisuMZ['BattleCore'][_0x58cf34(0x356)]=BattleManager[_0x58cf34(0x661)],BattleManager['cancelActorInput']=function(){const _0x41279f=_0x58cf34;this[_0x41279f(0x2b7)]()&&this[_0x41279f(0x5ed)]==='battleEnd'&&(this[_0x41279f(0x87a)]=null),VisuMZ['BattleCore']['BattleManager_cancelActorInput'][_0x41279f(0x9a4)](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x71f)]=BattleManager[_0x58cf34(0xc4f)],BattleManager[_0x58cf34(0xc4f)]=function(){const _0x8f8bb6=_0x58cf34,_0x2f4098=this[_0x8f8bb6(0x87a)];if(_0x2f4098&&!_0x2f4098[_0x8f8bb6(0xc4f)]()){const _0x4a972f=_0x2f4098['_actionInputIndex'];_0x2f4098[_0x8f8bb6(0x1f4)][_0x4a972f]=new Game_Action(_0x2f4098);}return VisuMZ[_0x8f8bb6(0xa6b)][_0x8f8bb6(0x71f)][_0x8f8bb6(0x9a4)](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xcc8)]=BattleManager[_0x58cf34(0xb6c)],BattleManager['checkSubstitute']=function(_0x2ca665){const _0x8e6879=_0x58cf34;if(this['_action'][_0x8e6879(0xa18)]())return![];return VisuMZ[_0x8e6879(0xa6b)][_0x8e6879(0xcc8)][_0x8e6879(0x9a4)](this,_0x2ca665);},SceneManager[_0x58cf34(0x3d3)]=function(){const _0x460665=_0x58cf34;return this[_0x460665(0xb85)]&&this[_0x460665(0xb85)][_0x460665(0x408)]===Scene_Battle;},SceneManager[_0x58cf34(0x52c)]=function(){const _0x57149c=_0x58cf34;return Spriteset_Battle['prototype'][_0x57149c(0xbad)]();},SceneManager['isPreviousSceneBattleTransitionable']=function(){const _0x5761bc=_0x58cf34;if(SceneManager[_0x5761bc(0x93b)](Scene_Options))return!![];return![];},SceneManager[_0x58cf34(0xac3)]=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},SceneManager['checkSceneBattleTransitionable']=function(_0x5919a7){const _0x371ba6=_0x58cf34;if(!SceneManager['isSceneBattle']())return!![];const _0x48fde1=['Scene_Options',_0x371ba6(0x5ab),_0x371ba6(0x516)];return _0x48fde1[_0x371ba6(0x375)](_0x5919a7[_0x371ba6(0xc22)]);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xc38)]=SceneManager[_0x58cf34(0x6db)],SceneManager[_0x58cf34(0x6db)]=function(_0x35232f){const _0x3c090c=_0x58cf34;if(!SceneManager[_0x3c090c(0x35b)](_0x35232f))return this['displayBattleCoreTransitionErrorMsg'](_0x35232f);VisuMZ['BattleCore'][_0x3c090c(0xc38)][_0x3c090c(0x9a4)](this,_0x35232f);},SceneManager['displayBattleCoreTransitionErrorMsg']=function(_0x2ec9b7){const _0x56faf2=_0x58cf34;if(!$gameTemp['isPlaytest']())return;if(this['_displayBattleCoreTransitionErrorMsg'])return;this[_0x56faf2(0x7be)]=!![];let _0x2f0c07='';_0x2f0c07+='VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing',_0x2f0c07+=_0x56faf2(0x92f)['format'](_0x2ec9b7[_0x56faf2(0xc22)]),alert(_0x2f0c07);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xaaf)]=Game_Temp[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)],Game_Temp[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)]=function(){const _0x919cf1=_0x58cf34;VisuMZ['BattleCore'][_0x919cf1(0xaaf)]['call'](this),this[_0x919cf1(0x591)]=[];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xad1)]=Game_Temp['prototype'][_0x58cf34(0x30d)],Game_Temp[_0x58cf34(0x8ef)]['requestAnimation']=function(_0x6b9b6c,_0x4bbf38,_0x37b41e){const _0x1863ff=_0x58cf34;_0x6b9b6c=_0x6b9b6c[_0x1863ff(0x8b3)]((_0x2ef892,_0x4b6d90,_0x7cf0af)=>_0x7cf0af[_0x1863ff(0xccf)](_0x2ef892)===_0x4b6d90);SceneManager[_0x1863ff(0x3d3)]()&&SceneManager[_0x1863ff(0x52c)]()&&(_0x37b41e=!_0x37b41e);VisuMZ[_0x1863ff(0xa6b)][_0x1863ff(0xad1)][_0x1863ff(0x9a4)](this,_0x6b9b6c,_0x4bbf38,_0x37b41e);SceneManager[_0x1863ff(0x3d3)]()&&BattleManager[_0x1863ff(0x5ae)][_0x1863ff(0x343)]();for(const _0x55552b of _0x6b9b6c){_0x55552b&&_0x55552b[_0x1863ff(0x2d8)]&&_0x55552b[_0x1863ff(0x2d8)]()&&_0x55552b[_0x1863ff(0x761)]();}},Game_Temp[_0x58cf34(0x8ef)][_0x58cf34(0x9d2)]=function(_0x18599f){const _0x477847=_0x58cf34;this[_0x477847(0x7e2)]=_0x18599f;},Game_Temp['prototype'][_0x58cf34(0x20b)]=function(){const _0x1b3218=_0x58cf34;return this[_0x1b3218(0x7e2)];},Game_Temp['prototype'][_0x58cf34(0x5e9)]=function(){const _0x1ecf64=_0x58cf34;this[_0x1ecf64(0xbdd)]=undefined;},Game_Temp[_0x58cf34(0x8ef)][_0x58cf34(0x421)]=function(_0x19af3f){const _0x304c2d=_0x58cf34;$gameMap&&$dataMap&&$dataMap[_0x304c2d(0x841)]&&this[_0x304c2d(0x757)]($dataMap[_0x304c2d(0x841)]);const _0x36a51a=$dataTroops[_0x19af3f];if(_0x36a51a){let _0x4f0344=DataManager[_0x304c2d(0x41a)](_0x36a51a['id']);this[_0x304c2d(0x757)](_0x4f0344);}},Game_Temp[_0x58cf34(0x8ef)][_0x58cf34(0x757)]=function(_0x33c70b){const _0x252eea=_0x58cf34;if(!_0x33c70b)return;if(_0x33c70b['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x139d72=String(RegExp['$1']);if(_0x139d72['match'](/DEFAULT/i))this[_0x252eea(0xbdd)]='default';else{if(_0x139d72[_0x252eea(0xcbb)](/LIST/i))this[_0x252eea(0xbdd)]=_0x252eea(0x83e);else{if(_0x139d72[_0x252eea(0xcbb)](/XP/i))this[_0x252eea(0xbdd)]='xp';else{if(_0x139d72[_0x252eea(0xcbb)](/PORTRAIT/i))this[_0x252eea(0xbdd)]=_0x252eea(0x445);else{if(_0x139d72[_0x252eea(0xcbb)](/BORDER/i))this[_0x252eea(0xbdd)]='border';else{if(_0x139d72[_0x252eea(0xcbb)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported[_0x252eea(0x9aa)]?this['_forcedBattleLayout']=_0x252eea(0x509):this[_0x252eea(0xbdd)]=_0x252eea(0x246);else _0x139d72[_0x252eea(0xcbb)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x252eea(0x53c)]?this[_0x252eea(0xbdd)]='frontview_ui':this[_0x252eea(0xbdd)]=_0x252eea(0x246));}}}}}}},VisuMZ['BattleCore'][_0x58cf34(0x655)]=Game_Temp[_0x58cf34(0x8ef)]['requestBalloon'],Game_Temp[_0x58cf34(0x8ef)]['requestBalloon']=function(_0xf3eb37,_0x25e5e7){const _0x1a8970=_0x58cf34;SceneManager[_0x1a8970(0x3d3)]()?this[_0x1a8970(0xc88)](_0xf3eb37,_0x25e5e7):VisuMZ[_0x1a8970(0xa6b)][_0x1a8970(0x655)]['call'](this,_0xf3eb37,_0x25e5e7);},Game_Temp['prototype'][_0x58cf34(0xc88)]=function(_0x41aaf6,_0x5cff08){const _0x2fed1b=_0x58cf34,_0x546aff={'target':_0x41aaf6,'balloonId':_0x5cff08};this[_0x2fed1b(0x591)]=this[_0x2fed1b(0x591)]||[],this[_0x2fed1b(0x591)][_0x2fed1b(0x6db)](_0x546aff);},Game_Temp['prototype'][_0x58cf34(0xb1c)]=function(){const _0x2a8e8c=_0x58cf34;return this[_0x2a8e8c(0x591)]=this[_0x2a8e8c(0x591)]||[],this['_battleBalloonQueue'][_0x2a8e8c(0x403)]();},Game_Temp['prototype']['clearBattleBalloons']=function(){const _0x32b330=_0x58cf34;this[_0x32b330(0x591)]=[];},Spriteset_Battle['prototype'][_0x58cf34(0x742)]=function(){const _0x20d8c8=_0x58cf34;this[_0x20d8c8(0xbaf)]===undefined&&(this['_battleBalloonSprites']=[]);for(const _0x4b5533 of this[_0x20d8c8(0xbaf)]){!_0x4b5533[_0x20d8c8(0x514)]()&&this[_0x20d8c8(0x822)](_0x4b5533);}this[_0x20d8c8(0x906)]();},Spriteset_Battle['prototype'][_0x58cf34(0x906)]=function(){const _0x1bec77=_0x58cf34;for(;;){const _0x41d5b5=$gameTemp[_0x1bec77(0xb1c)]();if(_0x41d5b5)this['createBattleBalloon'](_0x41d5b5);else break;}},Spriteset_Battle['prototype'][_0x58cf34(0x6fc)]=function(_0x5e8588){const _0x382e96=_0x58cf34,_0x4c9585=this['findTargetSprite'](_0x5e8588['target']);if(_0x4c9585){let _0x1eaaea=null;Imported[_0x382e96(0x6e8)]&&Array['isArray'](_0x5e8588[_0x382e96(0xb2e)])?_0x1eaaea=new Sprite_IconBalloon():_0x1eaaea=new Sprite_Balloon(),_0x1eaaea['targetObject']=_0x5e8588['target'],_0x1eaaea[_0x382e96(0xb2a)]=_0x4c9585,_0x1eaaea[_0x382e96(0xb2a)][_0x382e96(0x47c)]=_0x4c9585,_0x1eaaea[_0x382e96(0x6e1)](_0x4c9585,_0x5e8588['balloonId']),BattleManager[_0x382e96(0x7c9)](_0x1eaaea),this[_0x382e96(0xbaf)][_0x382e96(0x6db)](_0x1eaaea);}},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x822)]=function(_0xb45d2f){const _0x70d333=_0x58cf34;this[_0x70d333(0xbaf)][_0x70d333(0x61f)](_0xb45d2f),BattleManager[_0x70d333(0x870)](_0xb45d2f),_0xb45d2f[_0x70d333(0x4a2)]();},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x656)]=function(_0xb82f22,_0x1132f9){},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xbff)]=function(){return![];},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x2f0)]=function(){const _0x153192=_0x58cf34;return this[_0x153192(0xbaf)]=this[_0x153192(0xbaf)]||[],this[_0x153192(0xbaf)][_0x153192(0x3eb)]>0x0;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x8e8)]=Game_System[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)],Game_System[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)]=function(){const _0x33e60e=_0x58cf34;VisuMZ[_0x33e60e(0xa6b)][_0x33e60e(0x8e8)]['call'](this),this['initBattleCore']();},Game_System['prototype']['initBattleCore']=function(){const _0x476827=_0x58cf34;this[_0x476827(0x978)]=this[_0x476827(0x978)]||[];},Game_System['prototype'][_0x58cf34(0x70b)]=function(){const _0x3ad2af=_0x58cf34;if(this[_0x3ad2af(0x978)]===undefined)this[_0x3ad2af(0x4ce)]();return this['_defeatedEnemies'];},Game_System['prototype']['registerDefeatedEnemy']=function(_0x596334){const _0x347b10=_0x58cf34;if(this[_0x347b10(0x978)]===undefined)this[_0x347b10(0x4ce)]();if(!_0x596334)return;if(this['_defeatedEnemies'][_0x347b10(0x375)](_0x596334))return;this['_defeatedEnemies'][_0x347b10(0x6db)](_0x596334),this[_0x347b10(0x978)][_0x347b10(0xa67)]((_0x14ba85,_0x5defba)=>_0x14ba85-_0x5defba);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x791)]=Game_BattlerBase[_0x58cf34(0x8ef)]['addNewState'],Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x459)]=function(_0x1cfb57){const _0x28d8a1=_0x58cf34,_0x298526=this[_0x28d8a1(0x328)](),_0x4c835f=this[_0x28d8a1(0x595)]();VisuMZ[_0x28d8a1(0xa6b)][_0x28d8a1(0x791)][_0x28d8a1(0x9a4)](this,_0x1cfb57),this['isEnemy']()&&_0x298526&&this['isDead']()&&(this['_visualHpGauge_JustDied']=!this[_0x28d8a1(0x2da)](),$gameSystem[_0x28d8a1(0x29f)](this[_0x28d8a1(0x5e6)]())),SceneManager['isSceneBattle']()&&_0x4c835f!==this[_0x28d8a1(0x595)]()&&(this[_0x28d8a1(0x399)]()&&this['battler']()[_0x28d8a1(0x7d9)]());},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x2da)]=function(){const _0x2b6c68=_0x58cf34;return $gameSystem[_0x2b6c68(0x70b)]()[_0x2b6c68(0x375)](this['_enemyId']);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x6ca)]=Game_BattlerBase['prototype']['eraseState'],Game_BattlerBase['prototype'][_0x58cf34(0x578)]=function(_0x564ecf){const _0x4adf7d=_0x58cf34,_0x3b4097=this[_0x4adf7d(0xc82)]['includes'](_0x564ecf);VisuMZ[_0x4adf7d(0xa6b)]['Game_BattlerBase_eraseState'][_0x4adf7d(0x9a4)](this,_0x564ecf),this[_0x4adf7d(0x2d8)]()&&_0x564ecf===this[_0x4adf7d(0xcbd)]()&&this[_0x4adf7d(0x328)]()&&(this['_visualHpGauge_JustDied']=![]),!this[_0x4adf7d(0x427)]&&!this['_tempBattler']&&SceneManager['isSceneBattle']()&&(_0x3b4097&&!this['_states'][_0x4adf7d(0x375)](_0x564ecf)&&this[_0x4adf7d(0x4cf)]());},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xa8d)]=Game_Action['prototype'][_0x58cf34(0xcdf)],Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0xcdf)]=function(){const _0x1ce11e=_0x58cf34;VisuMZ[_0x1ce11e(0xa6b)]['Game_Action_clear']['call'](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x1ce11e(0x35f)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']='default',this['clearTargetBattlerKey']();},Game_Action[_0x58cf34(0x8ef)]['clearTargetBattlerKey']=function(){this['_targetBattlerKey']='';},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x325)]=Game_Action['prototype'][_0x58cf34(0xb35)],Game_Action['prototype'][_0x58cf34(0xb35)]=function(_0xb11115){const _0x6f47cf=_0x58cf34;VisuMZ['BattleCore'][_0x6f47cf(0x325)][_0x6f47cf(0x9a4)](this,_0xb11115),this[_0x6f47cf(0x4a6)]();},VisuMZ['BattleCore']['Game_Action_setSkill']=Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0xb32)],Game_Action['prototype'][_0x58cf34(0xb32)]=function(_0x3689fc){const _0x42c814=_0x58cf34;VisuMZ[_0x42c814(0xa6b)][_0x42c814(0xa4b)][_0x42c814(0x9a4)](this,_0x3689fc),this[_0x42c814(0x4a6)]();},VisuMZ[_0x58cf34(0xa6b)]['Game_Action_setItem']=Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x366)],Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x366)]=function(_0x186aa1){const _0x21a06a=_0x58cf34;VisuMZ[_0x21a06a(0xa6b)][_0x21a06a(0xcaa)][_0x21a06a(0x9a4)](this,_0x186aa1),this[_0x21a06a(0x4a6)]();},Game_Action[_0x58cf34(0x8ef)]['makeDamageValue']=function(_0x124ed5,_0x52f76c){const _0x38197b=_0x58cf34;return VisuMZ[_0x38197b(0xa6b)][_0x38197b(0xb05)][_0x38197b(0x693)][_0x38197b(0x771)][_0x38197b(0x9a4)](this,_0x124ed5,_0x52f76c);},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0xc6a)]=function(_0x230c9a,_0x7ca04a){const _0x74b988=_0x58cf34;return VisuMZ[_0x74b988(0xa6b)]['Settings'][_0x74b988(0x693)][_0x74b988(0x45d)]['call'](this,_0x230c9a,_0x7ca04a);},Game_Action['prototype'][_0x58cf34(0x245)]=function(_0x402542,_0x182b4f){const _0x537fb0=_0x58cf34;return VisuMZ['BattleCore']['Settings'][_0x537fb0(0x693)][_0x537fb0(0x596)][_0x537fb0(0x9a4)](this,_0x402542,_0x182b4f);},VisuMZ[_0x58cf34(0xa6b)]['Game_Action_itemHit']=Game_Action['prototype'][_0x58cf34(0xcbc)],Game_Action[_0x58cf34(0x8ef)]['itemHit']=function(_0x1b150a){const _0x32512f=_0x58cf34,_0x57f09e=this[_0x32512f(0xb8a)]()[_0x32512f(0x841)];if(_0x57f09e[_0x32512f(0xcbb)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x57f09e[_0x32512f(0xcbb)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x4a806e=VisuMZ[_0x32512f(0xa6b)]['Game_Action_itemHit']['call'](this,_0x1b150a);return _0x4a806e=this['_multipliers'][_0x32512f(0x38c)]*_0x4a806e+this['_multipliers'][_0x32512f(0x65c)],$gameParty['inBattle']()&&(_0x4a806e=this[_0x32512f(0x583)](_0x4a806e,_0x1b150a)),_0x4a806e;}}},VisuMZ['BattleCore'][_0x58cf34(0x29d)]=Game_Action[_0x58cf34(0x8ef)]['updateLastTarget'],Game_Action['prototype'][_0x58cf34(0x409)]=function(_0x26158b){const _0xc03e47=_0x58cf34;this[_0xc03e47(0x4e2)]=!![],VisuMZ[_0xc03e47(0xa6b)]['Game_Action_updateLastTarget'][_0xc03e47(0x9a4)](this,_0x26158b),this['_bypass_applyBattleCoreHitRateJS']=undefined;},Game_Action[_0x58cf34(0x8ef)]['declareGlobalVariables']=function(_0x30191e){const _0x22002d=_0x58cf34;window['action']=this,window['a']=this[_0x22002d(0x28e)](),window['b']=_0x30191e,window[_0x22002d(0x823)]=this[_0x22002d(0x28e)](),window['target']=_0x30191e,window[_0x22002d(0xb07)]=this[_0x22002d(0xb8a)](),window['skill']=this['item'](),window[_0x22002d(0xb8a)]=this[_0x22002d(0xb8a)]();},Game_Action[_0x58cf34(0x8ef)]['clearGlobalVariables']=function(_0xa5c130){const _0x54e9aa=_0x58cf34;window[_0x54e9aa(0x36c)]=undefined,window['a']=undefined,window['b']=undefined,window[_0x54e9aa(0x823)]=undefined,window['target']=undefined,window['obj']=undefined,window[_0x54e9aa(0xa42)]=undefined,window[_0x54e9aa(0xb8a)]=undefined;},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x583)]=function(_0x1d8199,_0x30e750){const _0x30a2b2=_0x58cf34;if(this[_0x30a2b2(0x4e2)])return _0x1d8199;this[_0x30a2b2(0x304)](_0x30e750);if(this[_0x30a2b2(0xb8a)]()){let _0x47fcdd=VisuMZ[_0x30a2b2(0xa6b)][_0x30a2b2(0x2fa)](this[_0x30a2b2(0xb8a)](),_0x30a2b2(0x24b));VisuMZ[_0x30a2b2(0xa6b)]['JS'][_0x47fcdd]&&(_0x1d8199=VisuMZ['BattleCore']['JS'][_0x47fcdd][_0x30a2b2(0x9a4)](this,this['subject'](),_0x30e750,this[_0x30a2b2(0xb8a)](),_0x1d8199));}for(const _0x2ed7dc of this['subject']()[_0x30a2b2(0x1f5)]()){if(!_0x2ed7dc)continue;key=VisuMZ[_0x30a2b2(0xa6b)][_0x30a2b2(0x2fa)](_0x2ed7dc,'jsAccuracyAsUser'),VisuMZ[_0x30a2b2(0xa6b)]['JS'][key]&&(_0x1d8199=VisuMZ[_0x30a2b2(0xa6b)]['JS'][key][_0x30a2b2(0x9a4)](this,this['subject'](),_0x30e750,this[_0x30a2b2(0xb8a)](),_0x1d8199));}for(const _0x3c890b of _0x30e750[_0x30a2b2(0x1f5)]()){if(!_0x3c890b)continue;key=VisuMZ[_0x30a2b2(0xa6b)][_0x30a2b2(0x2fa)](_0x3c890b,_0x30a2b2(0x4ea)),VisuMZ['BattleCore']['JS'][key]&&(_0x1d8199=VisuMZ[_0x30a2b2(0xa6b)]['JS'][key][_0x30a2b2(0x9a4)](this,this[_0x30a2b2(0x28e)](),_0x30e750,this[_0x30a2b2(0xb8a)](),_0x1d8199));}return this['clearGlobalVariables'](_0x30e750),_0x1d8199;},Game_Action['prototype'][_0x58cf34(0xb65)]=function(_0x48e1ef){const _0x64e1f0=_0x58cf34;if(!this[_0x64e1f0(0xb8a)]()[_0x64e1f0(0xacd)][_0x64e1f0(0x513)])return 0x0;let _0x11b29f=VisuMZ[_0x64e1f0(0xa6b)]['Settings']['Damage']['CriticalHitRateJS'][_0x64e1f0(0x9a4)](this,_0x48e1ef);return _0x11b29f=this[_0x64e1f0(0x35f)]['criticalHitRate']*_0x11b29f+this[_0x64e1f0(0x35f)][_0x64e1f0(0x90c)],$gameParty['inBattle']()&&(_0x11b29f=this[_0x64e1f0(0x485)](_0x11b29f,_0x48e1ef)),_0x11b29f;},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x485)]=function(_0x4eb66c,_0x58d6c0){const _0x2ca928=_0x58cf34;this[_0x2ca928(0x304)](_0x58d6c0),window[_0x2ca928(0x79e)]=_0x4eb66c;{const _0x52b632=this[_0x2ca928(0x28e)]()[_0x2ca928(0x1f5)]();for(const _0x30af17 of _0x52b632){if(!_0x30af17)continue;if(_0x30af17[_0x2ca928(0x841)][_0x2ca928(0xcbb)](/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i)){const _0x521d1e=String(RegExp['$1']);try{eval(_0x521d1e);}catch(_0x45d9ab){if($gameTemp[_0x2ca928(0x845)]())console[_0x2ca928(0x1d0)](_0x45d9ab);}}}}{const _0x4272c9=_0x58d6c0[_0x2ca928(0x1f5)]();for(const _0x4fd01b of _0x4272c9){if(!_0x4fd01b)continue;if(_0x4fd01b['note'][_0x2ca928(0xcbb)](/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i)){const _0x347ea2=String(RegExp['$1']);try{eval(_0x347ea2);}catch(_0x2fc68b){if($gameTemp[_0x2ca928(0x845)]())console[_0x2ca928(0x1d0)](_0x2fc68b);}}}}return _0x4eb66c=window[_0x2ca928(0x79e)],this[_0x2ca928(0xc8d)](_0x58d6c0),_0x4eb66c;},Game_Action['prototype'][_0x58cf34(0x485)]=function(_0x3c69c4,_0x70b16b){const _0x446915=_0x58cf34;this[_0x446915(0x304)](_0x70b16b);for(const _0x48fe8d of this[_0x446915(0x28e)]()[_0x446915(0x1f5)]()){if(!_0x48fe8d)continue;key=VisuMZ[_0x446915(0xa6b)][_0x446915(0x2fa)](_0x48fe8d,'jsCritRateAsUser'),VisuMZ[_0x446915(0xa6b)]['JS'][key]&&(_0x3c69c4=VisuMZ[_0x446915(0xa6b)]['JS'][key]['call'](this,this[_0x446915(0x28e)](),_0x70b16b,this[_0x446915(0xb8a)](),_0x3c69c4));}for(const _0x3a15c6 of _0x70b16b[_0x446915(0x1f5)]()){if(!_0x3a15c6)continue;key=VisuMZ['BattleCore'][_0x446915(0x2fa)](_0x3a15c6,'jsCritRateAsTarget'),VisuMZ[_0x446915(0xa6b)]['JS'][key]&&(_0x3c69c4=VisuMZ[_0x446915(0xa6b)]['JS'][key][_0x446915(0x9a4)](this,this[_0x446915(0x28e)](),_0x70b16b,this['item'](),_0x3c69c4));}return this[_0x446915(0xc8d)](_0x70b16b),_0x3c69c4;},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x76f)]=function(_0x539835){const _0x3b8806=_0x58cf34;return _0x539835=VisuMZ['BattleCore']['Settings'][_0x3b8806(0x693)][_0x3b8806(0x96b)][_0x3b8806(0x9a4)](this,_0x539835),_0x539835=this[_0x3b8806(0x35f)][_0x3b8806(0x9fc)]*_0x539835+this[_0x3b8806(0x35f)][_0x3b8806(0x7b9)],_0x539835;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x911)]=Game_Action[_0x58cf34(0x8ef)]['evalDamageFormula'],Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x49d)]=function(_0x1ba948){const _0xf06fd4=_0x58cf34;if(this['_customDamageFormula']!==_0xf06fd4(0x246))return this['customDamageFormula'](_0x1ba948);else return DataManager[_0xf06fd4(0x813)](this[_0xf06fd4(0xb8a)]())===_0xf06fd4(0xc73)?VisuMZ['BattleCore'][_0xf06fd4(0x911)][_0xf06fd4(0x9a4)](this,_0x1ba948):this[_0xf06fd4(0x2e5)](_0x1ba948);},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0xa78)]=function(_0x216958){const _0x4fa6bd=_0x58cf34;this[_0x4fa6bd(0x437)]=_0x216958;},Game_Action[_0x58cf34(0x8ef)]['customDamageFormula']=function(_0x459081){const _0x2cff51=_0x58cf34,_0x36b2d4=this['item'](),_0x42afae=_0x36b2d4[_0x2cff51(0xacd)][_0x2cff51(0x468)];_0x36b2d4[_0x2cff51(0xacd)][_0x2cff51(0x468)]=this[_0x2cff51(0x437)];let _0x5d8cae=VisuMZ[_0x2cff51(0xa6b)][_0x2cff51(0x911)][_0x2cff51(0x9a4)](this,_0x459081);return _0x36b2d4[_0x2cff51(0xacd)]['formula']=_0x42afae,_0x5d8cae;},Game_Action['prototype'][_0x58cf34(0x45b)]=function(){const _0x5605d8=_0x58cf34;if(this[_0x5605d8(0xb8a)]()['note']['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x5e7889=String(RegExp['$1'])[_0x5605d8(0x6f5)]()[_0x5605d8(0x989)]();return _0x5e7889;}return _0x5605d8(0xc73);},Game_Action[_0x58cf34(0x8ef)]['evalDamageFormulaBattleCore']=function(_0x257506){const _0x4a78d7=_0x58cf34,_0x1164d6=DataManager[_0x4a78d7(0x813)](this[_0x4a78d7(0xb8a)]()),_0x18cfa2=VisuMZ['DamageStyles'][_0x1164d6];try{return _0x18cfa2[_0x4a78d7(0x2f7)][_0x4a78d7(0x9a4)](this,_0x257506);}catch(_0x2ef3df){if($gameTemp[_0x4a78d7(0x845)]())console[_0x4a78d7(0x1d0)](_0x2ef3df);return VisuMZ[_0x4a78d7(0xa6b)]['Game_Action_evalDamageFormula'][_0x4a78d7(0x9a4)](this);}},Game_Action[_0x58cf34(0x8ef)]['applyArmorModifiers']=function(_0x20acc5,_0x44d7e0){const _0x385ee2=_0x58cf34;if(this[_0x385ee2(0x3dd)]())return _0x44d7e0;const _0x24cd77=this[_0x385ee2(0x28e)](),_0x52e038=_0x20acc5;let _0xc9e3e9=[],_0x27f6eb=[];_0xc9e3e9['push'](this[_0x385ee2(0x8c5)][_0x385ee2(0x2e2)],this[_0x385ee2(0x8c5)][_0x385ee2(0x9f2)]),_0x27f6eb[_0x385ee2(0x6db)](this[_0x385ee2(0x8c5)][_0x385ee2(0xa84)],this['_armorPenetration']['arRedRate']);const _0x32c9ed=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x29f118=this[_0x385ee2(0x467)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0xc954cb=this[_0x385ee2(0x467)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x1a03f7=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0xc9e3e9=_0xc9e3e9[_0x385ee2(0xb59)](_0x52e038[_0x385ee2(0x1f5)]()[_0x385ee2(0x5a0)](_0x5136a1=>_0x5136a1&&_0x5136a1['note'][_0x385ee2(0xcbb)](_0x32c9ed)?Number(RegExp['$1']):0x0)),_0x27f6eb=_0x27f6eb[_0x385ee2(0xb59)](_0x52e038[_0x385ee2(0x1f5)]()[_0x385ee2(0x5a0)](_0x2117fb=>_0x2117fb&&_0x2117fb['note'][_0x385ee2(0xcbb)](_0x29f118)?Number(RegExp['$1'])/0x64:0x0)),_0xc9e3e9=_0xc9e3e9[_0x385ee2(0xb59)](_0x24cd77[_0x385ee2(0x1f5)]()[_0x385ee2(0x5a0)](_0x64ecbf=>_0x64ecbf&&_0x64ecbf[_0x385ee2(0x841)][_0x385ee2(0xcbb)](_0xc954cb)?Number(RegExp['$1']):0x0)),_0x27f6eb=_0x27f6eb[_0x385ee2(0xb59)](_0x24cd77[_0x385ee2(0x1f5)]()[_0x385ee2(0x5a0)](_0x1fd9cf=>_0x1fd9cf&&_0x1fd9cf['note'][_0x385ee2(0xcbb)](_0x1a03f7)?Number(RegExp['$1'])/0x64:0x0)),this[_0x385ee2(0xb8a)]()[_0x385ee2(0x841)]['match'](_0xc954cb)&&_0xc9e3e9[_0x385ee2(0x6db)](Number(RegExp['$1'])),this[_0x385ee2(0xb8a)]()[_0x385ee2(0x841)]['match'](_0x1a03f7)&&_0x27f6eb[_0x385ee2(0x6db)](Number(RegExp['$1'])),_0x44d7e0=_0xc9e3e9[_0x385ee2(0xa43)]((_0x4689a6,_0x6a6a0)=>_0x4689a6-_0x6a6a0,_0x44d7e0),_0x44d7e0>0x0&&(_0x44d7e0=_0x27f6eb[_0x385ee2(0xa43)]((_0x3b31fd,_0x55330c)=>_0x3b31fd*(0x1-_0x55330c),_0x44d7e0)),_0x44d7e0;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x8cf)]=Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x32d)],Game_Action['prototype'][_0x58cf34(0x32d)]=function(_0x49eb71,_0x39c4cf){const _0x5bf184=_0x58cf34;_0x39c4cf=_0x39c4cf*this[_0x5bf184(0x35f)][_0x5bf184(0x44a)],_0x39c4cf+=this['_multipliers'][_0x5bf184(0x3f6)]*(_0x39c4cf>=0x0?0x1:-0x1),_0x39c4cf=this[_0x5bf184(0x1cf)](_0x5bf184(0x9f5),_0x49eb71,_0x39c4cf,![]),_0x39c4cf=this[_0x5bf184(0xcb7)](_0x39c4cf),_0x39c4cf>0x0?_0x39c4cf=Math[_0x5bf184(0xafc)](_0x39c4cf):_0x39c4cf=Math[_0x5bf184(0x951)](_0x39c4cf),this[_0x5bf184(0x330)]=_0x39c4cf,this[_0x5bf184(0xc3a)]=this[_0x5bf184(0xc3a)]||0x0,this['_totalValue']+=_0x39c4cf,VisuMZ[_0x5bf184(0xa6b)][_0x5bf184(0x8cf)][_0x5bf184(0x9a4)](this,_0x49eb71,_0x39c4cf),this[_0x5bf184(0x1cf)](_0x5bf184(0x842),_0x49eb71,_0x39c4cf,!![]);},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0xcb7)]=function(_0x6960dd){const _0x543b28=_0x58cf34;if(this[_0x543b28(0xc7f)]())return _0x6960dd;return _0x6960dd=this[_0x543b28(0x58d)](_0x6960dd),_0x6960dd=this[_0x543b28(0x9db)](_0x6960dd),_0x6960dd;},Game_Action['prototype'][_0x58cf34(0xc7f)]=function(){const _0x2f620b=_0x58cf34,_0x185389=/<BYPASS DAMAGE CAP>/i;if(this['item']()[_0x2f620b(0x841)]['match'](_0x185389))return!![];if(this[_0x2f620b(0x28e)]()[_0x2f620b(0x1f5)]()[_0x2f620b(0x6ec)](_0x489ebb=>_0x489ebb&&_0x489ebb[_0x2f620b(0x841)][_0x2f620b(0xcbb)](_0x185389)))return!![];return!VisuMZ['BattleCore']['Settings'][_0x2f620b(0x693)][_0x2f620b(0x639)];},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x58d)]=function(_0x1bcabb){const _0x2ea852=_0x58cf34;if(!VisuMZ['BattleCore'][_0x2ea852(0xb05)][_0x2ea852(0x693)][_0x2ea852(0x1ef)])return _0x1bcabb;const _0x1e4a37=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x2ea852(0xb8a)]()[_0x2ea852(0x841)][_0x2ea852(0xcbb)](_0x1e4a37))return _0x1bcabb;if(this[_0x2ea852(0x28e)]()[_0x2ea852(0x1f5)]()[_0x2ea852(0x6ec)](_0x1bb44b=>_0x1bb44b&&_0x1bb44b[_0x2ea852(0x841)][_0x2ea852(0xcbb)](_0x1e4a37)))return _0x1bcabb;const _0x220f6e=_0x1bcabb<0x0?-0x1:0x1;_0x1bcabb=Math['abs'](_0x1bcabb);let _0x39980f=this['subject']()[_0x2ea852(0x418)]();this[_0x2ea852(0xb8a)]()['note'][_0x2ea852(0xcbb)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x39980f+=Number(RegExp['$1'])/0x64);_0x39980f=_0x39980f['clamp'](0.01,0x1);const _0x5e828e=this[_0x2ea852(0x97d)](),_0x126d4d=_0x39980f*_0x5e828e;if(_0x1bcabb>_0x126d4d&&_0x5e828e>_0x126d4d){_0x1bcabb-=_0x126d4d;const _0x3a6f59=VisuMZ[_0x2ea852(0xa6b)][_0x2ea852(0xb05)][_0x2ea852(0x693)]['DefaultSoftScaler'],_0x3f33c1=Math[_0x2ea852(0x238)](0x1-_0x1bcabb/((_0x5e828e-_0x126d4d)*_0x3a6f59+_0x1bcabb),0.01);_0x1bcabb*=_0x3f33c1,_0x1bcabb+=_0x126d4d;}return _0x1bcabb*_0x220f6e;},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x97d)]=function(){const _0x5c7ac8=_0x58cf34;return this['item']()[_0x5c7ac8(0x841)]['match'](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x5c7ac8(0x28e)]()[_0x5c7ac8(0x540)]();},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x9db)]=function(_0x421f03){const _0x5860a0=_0x58cf34;let _0x232149=this['getHardDamageCap']();return _0x421f03[_0x5860a0(0xaa5)](-_0x232149,_0x232149);},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x801)]=function(){const _0x8b7499=_0x58cf34;if(!this[_0x8b7499(0xb8a)]())return![];if(!$gameParty['inBattle']())return![];return(this['item']()[_0x8b7499(0x841)]||'')[_0x8b7499(0xcbb)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x716)]=function(_0x5c4ab9){const _0x523607=_0x58cf34;if(this['shouldDisperseDamage']()){let _0x230202=BattleManager['_targets'];_0x5c4ab9/=_0x230202[_0x523607(0x3eb)],this[_0x523607(0xaf9)]()&&(_0x5c4ab9*=this['subject']()[_0x523607(0x297)]()+0x1),_0x5c4ab9=_0x5c4ab9>0x0?Math['ceil'](_0x5c4ab9):Math[_0x523607(0x951)](_0x5c4ab9);}return _0x5c4ab9;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x97e)]=Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x2d9)],Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x2d9)]=function(_0x15c61c,_0x47005a){const _0x54bfed=_0x58cf34;let _0x40dbfa=VisuMZ[_0x54bfed(0xa6b)]['Game_Action_makeDamageValueDisperse'][_0x54bfed(0x9a4)](this,_0x15c61c,_0x47005a);return this['disperseDamage'](_0x40dbfa);},Game_Action['prototype'][_0x58cf34(0x788)]=function(_0x2dfae3,_0x107254){const _0x4835cf=_0x58cf34;let _0x899cda=(_0x2dfae3[_0x4835cf(0xa45)]*_0x107254['value1']+_0x107254[_0x4835cf(0x243)])*_0x2dfae3[_0x4835cf(0x572)];_0x899cda=this[_0x4835cf(0x716)](_0x899cda),this[_0x4835cf(0x6b9)]()&&(_0x899cda*=this[_0x4835cf(0x28e)]()[_0x4835cf(0x24a)]),_0x899cda=Math[_0x4835cf(0x951)](_0x899cda),_0x899cda!==0x0&&(_0x2dfae3['gainHp'](_0x899cda),this[_0x4835cf(0x735)](_0x2dfae3));},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0xa46)]=function(_0x16a7b2,_0x59c04d){const _0xe95791=_0x58cf34;let _0x458ebf=(_0x16a7b2['mmp']*_0x59c04d[_0xe95791(0x970)]+_0x59c04d[_0xe95791(0x243)])*_0x16a7b2['rec'];_0x458ebf=this[_0xe95791(0x716)](_0x458ebf),this['isItem']()&&(_0x458ebf*=this[_0xe95791(0x28e)]()[_0xe95791(0x24a)]),_0x458ebf=Math[_0xe95791(0x951)](_0x458ebf),_0x458ebf!==0x0&&(_0x16a7b2[_0xe95791(0xc81)](_0x458ebf),this['makeSuccess'](_0x16a7b2));},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0xcd9)]=function(_0x2e8181,_0x430f2b){const _0x4367ff=_0x58cf34;let _0x356a3a=Math[_0x4367ff(0x951)](_0x430f2b[_0x4367ff(0x970)]);_0x356a3a=this[_0x4367ff(0x716)](_0x356a3a),_0x356a3a!==0x0&&(_0x2e8181[_0x4367ff(0x4ac)](_0x356a3a),this['makeSuccess'](_0x2e8181));},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x2a6)]=Game_Action['prototype']['apply'],Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x383)]=function(_0x40d7d2){const _0x34e0d4=_0x58cf34;if(_0x40d7d2&&_0x40d7d2[_0x34e0d4(0x2d8)]())_0x40d7d2[_0x34e0d4(0x761)]();this[_0x34e0d4(0x1cf)]('PreApply%1JS',_0x40d7d2,0x0,!![]),VisuMZ[_0x34e0d4(0xa6b)][_0x34e0d4(0x2a6)][_0x34e0d4(0x9a4)](this,_0x40d7d2),this[_0x34e0d4(0x1cf)]('PostApply%1JS',_0x40d7d2,this[_0x34e0d4(0x330)]||0x0,!![]),this[_0x34e0d4(0x8e6)](_0x40d7d2);},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x1cf)]=function(_0x5dba5e,_0xd53975,_0x8202df,_0x3aeb32){const _0x314e23=_0x58cf34;if(this[_0x314e23(0xb06)]||this[_0x314e23(0x427)])return;_0x8202df=_0x8202df||0x0;const _0x28a1a5=_0x8202df,_0x3e5412=VisuMZ[_0x314e23(0xa6b)]['Settings'][_0x314e23(0x2ec)],_0x557f9a=_0x5dba5e['format']('');if(_0x3e5412[_0x557f9a]){_0x8202df=_0x3e5412[_0x557f9a]['call'](this,_0x8202df,_0xd53975);if(_0x3aeb32)_0x8202df=_0x28a1a5;}let _0x18a1e0=VisuMZ[_0x314e23(0xa6b)][_0x314e23(0x2fa)](this[_0x314e23(0xb8a)](),_0x5dba5e[_0x314e23(0x1d3)](''));if(VisuMZ[_0x314e23(0xa6b)]['JS'][_0x18a1e0]){_0x8202df=VisuMZ[_0x314e23(0xa6b)]['JS'][_0x18a1e0][_0x314e23(0x9a4)](this,this[_0x314e23(0x28e)](),_0xd53975,this[_0x314e23(0xb8a)](),_0x8202df);if(_0x3aeb32)_0x8202df=_0x28a1a5;}for(const _0x434846 of this[_0x314e23(0x28e)]()[_0x314e23(0x1f5)]()){if(!_0x434846)continue;_0x18a1e0=VisuMZ[_0x314e23(0xa6b)][_0x314e23(0x2fa)](_0x434846,_0x5dba5e[_0x314e23(0x1d3)]('AsUser'));if(VisuMZ[_0x314e23(0xa6b)]['JS'][_0x18a1e0]){_0x8202df=VisuMZ[_0x314e23(0xa6b)]['JS'][_0x18a1e0][_0x314e23(0x9a4)](this,this[_0x314e23(0x28e)](),_0xd53975,_0x434846,_0x8202df);if(_0x3aeb32)_0x8202df=_0x28a1a5;}}for(const _0x5df5d7 of _0xd53975[_0x314e23(0x1f5)]()){if(!_0x5df5d7)continue;_0x18a1e0=VisuMZ[_0x314e23(0xa6b)][_0x314e23(0x2fa)](_0x5df5d7,_0x5dba5e['format'](_0x314e23(0x253)));if(VisuMZ['BattleCore']['JS'][_0x18a1e0]){_0x8202df=VisuMZ[_0x314e23(0xa6b)]['JS'][_0x18a1e0][_0x314e23(0x9a4)](this,this[_0x314e23(0x28e)](),_0xd53975,_0x5df5d7,_0x8202df);if(_0x3aeb32)_0x8202df=_0x28a1a5;}}return _0x8202df;},Game_Action['prototype']['actionBattleCoreJS']=function(_0x523d85){const _0x458429=_0x58cf34,_0x41f747=this['_totalValue']||0x0,_0x4ae2b9=VisuMZ['BattleCore'][_0x458429(0xb05)][_0x458429(0x2ec)],_0xe6f419=_0x523d85['format']('');_0x4ae2b9[_0xe6f419]&&_0x4ae2b9[_0xe6f419][_0x458429(0x9a4)](this,_0x41f747);let _0x455099=VisuMZ[_0x458429(0xa6b)]['createKeyJS'](this['item'](),_0x523d85);VisuMZ[_0x458429(0xa6b)]['JS'][_0x455099]&&VisuMZ['BattleCore']['JS'][_0x455099][_0x458429(0x9a4)](this,this[_0x458429(0x28e)](),this[_0x458429(0x28e)](),this[_0x458429(0xb8a)](),_0x41f747);for(const _0x5bb193 of this[_0x458429(0x28e)]()[_0x458429(0x1f5)]()){if(!_0x5bb193)continue;_0x455099=VisuMZ[_0x458429(0xa6b)][_0x458429(0x2fa)](_0x5bb193,_0x523d85),VisuMZ[_0x458429(0xa6b)]['JS'][_0x455099]&&VisuMZ[_0x458429(0xa6b)]['JS'][_0x455099][_0x458429(0x9a4)](this,this['subject'](),this[_0x458429(0x28e)](),_0x5bb193,_0x41f747);}},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x24e)]=function(){const _0x24c2ba=_0x58cf34;return VisuMZ[_0x24c2ba(0xa6b)][_0x24c2ba(0xb05)]['Mechanics'][_0x24c2ba(0xbae)]['call'](this);},Game_Action[_0x58cf34(0x8ef)]['allowRandomSpeed']=function(){const _0x3cd367=_0x58cf34;return VisuMZ[_0x3cd367(0xa6b)][_0x3cd367(0xb05)][_0x3cd367(0x2ec)][_0x3cd367(0x8a2)];},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0xa34)]=function(){const _0x484ee2=_0x58cf34;if(this[_0x484ee2(0xa64)]===_0x484ee2(0xc0e))return![];if(this['_targetBattlerKey']===_0x484ee2(0x644))return![];if(!this[_0x484ee2(0xb8a)]())return![];return this[_0x484ee2(0xb8a)]()[_0x484ee2(0x841)][_0x484ee2(0xcbb)](/<JS TARGETS>/i);},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x334)]=function(){const _0x127b01=_0x58cf34;if(this[_0x127b01(0xa64)]==='all\x20actors')return![];if(this[_0x127b01(0xa64)]===_0x127b01(0x644))return![];if(!this[_0x127b01(0x8cc)]&&this['subject']()[_0x127b01(0xb7c)]())return![];if(this[_0x127b01(0xa34)]())return!![];if(!this[_0x127b01(0xb8a)]())return![];return typeof this['item']()[_0x127b01(0x303)]==='string';},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x390)]=Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0xccb)],Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0xccb)]=function(){const _0x5cfde8=_0x58cf34;if(this[_0x5cfde8(0xa64)]===_0x5cfde8(0xc0e))return![];if(this['_targetBattlerKey']===_0x5cfde8(0x644))return!![];return this[_0x5cfde8(0x334)]()&&!this[_0x5cfde8(0xa34)]()?this['isForOpponentBattleCore']():VisuMZ[_0x5cfde8(0xa6b)]['Game_Action_isForOpponent']['call'](this);},Game_Action['prototype'][_0x58cf34(0xb7a)]=function(){const _0x4a735b=_0x58cf34,_0x50486c=String(this[_0x4a735b(0xb8a)]()[_0x4a735b(0x303)]);if(_0x50486c[_0x4a735b(0xcbb)](/ANY/i))return!![];return _0x50486c[_0x4a735b(0xcbb)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x9a0)]=Game_Action['prototype'][_0x58cf34(0xa18)],Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0xa18)]=function(){const _0x1c61be=_0x58cf34;if(this[_0x1c61be(0xa64)]===_0x1c61be(0xc0e))return!![];if(this[_0x1c61be(0xa64)]===_0x1c61be(0x644))return![];return this['isBattleCoreTargetScope']()&&!this[_0x1c61be(0xa34)]()?this[_0x1c61be(0x4e0)]():VisuMZ[_0x1c61be(0xa6b)][_0x1c61be(0x9a0)][_0x1c61be(0x9a4)](this);},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x4e0)]=function(){const _0x32c7a3=String(this['item']()['scope']);return _0x32c7a3['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x58cf34(0x8ef)]['isForAnyone']=function(){const _0x41f0e9=_0x58cf34;if(this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()){const _0x3c1f60=String(this[_0x41f0e9(0xb8a)]()['scope']);return _0x3c1f60[_0x41f0e9(0xcbb)](/(?:ENEMY|FOE)/i)&&_0x3c1f60[_0x41f0e9(0xcbb)](/OR/i)&&_0x3c1f60[_0x41f0e9(0xcbb)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0x58cf34(0x8ef)]['isForAnyoneFocusFriends']=function(){const _0x54b736=_0x58cf34;if(this[_0x54b736(0x54d)]()){const _0x3c372b=String(this[_0x54b736(0xb8a)]()[_0x54b736(0x303)]);if(_0x3c372b[_0x54b736(0xcbb)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x93f)]=function(){const _0xd5b55e=_0x58cf34;if(this[_0xd5b55e(0x54d)]()){const _0x45332f=String(this[_0xd5b55e(0xb8a)]()[_0xd5b55e(0x303)]);if(_0x45332f['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ['BattleCore'][_0x58cf34(0x7cd)]=Game_Action[_0x58cf34(0x8ef)]['isForAliveFriend'],Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x526)]=function(){const _0x1ffe3=_0x58cf34;if(this[_0x1ffe3(0xa64)]==='all\x20actors')return!![];return this[_0x1ffe3(0x334)]()&&!this[_0x1ffe3(0xa34)]()?this[_0x1ffe3(0x475)]():VisuMZ[_0x1ffe3(0xa6b)][_0x1ffe3(0x7cd)]['call'](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x507)]=Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x492)],Game_Action[_0x58cf34(0x8ef)]['isForDeadFriend']=function(){const _0x332e99=_0x58cf34;if(this[_0x332e99(0xa64)]==='all\x20actors')return VisuMZ[_0x332e99(0xa6b)][_0x332e99(0x507)][_0x332e99(0x9a4)](this);return VisuMZ['BattleCore'][_0x332e99(0x507)][_0x332e99(0x9a4)](this);},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x475)]=function(){const _0x7e4add=_0x58cf34;if(this[_0x7e4add(0x54d)]())return!![];return![];},Game_Action['prototype']['isForNotUser']=function(){const _0x637cb1=_0x58cf34;return this[_0x637cb1(0xb8a)]()&&this['item']()['note'][_0x637cb1(0xcbb)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x4f0)]=Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x9c6)],Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x9c6)]=function(){const _0x1d5348=_0x58cf34;if(this[_0x1d5348(0xa64)]===_0x1d5348(0xc0e))return![];if(this['_targetBattlerKey']===_0x1d5348(0x644))return![];return this['isBattleCoreTargetScope']()&&!this[_0x1d5348(0xa34)]()?this['isForOneBattleCore']():VisuMZ['BattleCore']['Game_Action_isForOne'][_0x1d5348(0x9a4)](this);},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x3c5)]=function(){const _0x364c36=_0x58cf34;if(this[_0x364c36(0x54d)]())return!![];return![];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x8d0)]=Game_Action['prototype']['isForRandom'],Game_Action[_0x58cf34(0x8ef)]['isForRandom']=function(){const _0x6dedde=_0x58cf34;if(this[_0x6dedde(0xa64)]==='all\x20actors')return![];if(this['_targetBattlerKey']==='all\x20enemies')return![];return this['isBattleCoreTargetScope']()&&!this[_0x6dedde(0xa34)]()?this[_0x6dedde(0x3c0)]():VisuMZ['BattleCore'][_0x6dedde(0x8d0)][_0x6dedde(0x9a4)](this);},Game_Action[_0x58cf34(0x8ef)]['isForRandomBattleCore']=function(){const _0x10532d=_0x58cf34,_0x23ff23=String(this[_0x10532d(0xb8a)]()[_0x10532d(0x303)]);return _0x23ff23[_0x10532d(0xcbb)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x5bf)]=Game_Action[_0x58cf34(0x8ef)]['isForAll'],Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x23d)]=function(){const _0x2e766b=_0x58cf34;if(this['_targetBattlerKey']===_0x2e766b(0xc0e))return!![];if(this['_targetBattlerKey']===_0x2e766b(0x644))return!![];return VisuMZ[_0x2e766b(0xa6b)][_0x2e766b(0x5bf)][_0x2e766b(0x9a4)](this);},Game_Action[_0x58cf34(0x8ef)]['canSingleOrMultipleSelect']=function(){const _0x557288=_0x58cf34;if(!this['item']())return![];if(this[_0x557288(0x492)]())return![];return(this['item']()[_0x557288(0x841)]||'')[_0x557288(0xcbb)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x86f)]=Game_Action['prototype'][_0x58cf34(0xb15)],Game_Action['prototype'][_0x58cf34(0xb15)]=function(_0x3135de){const _0x38903b=_0x58cf34;if(this['isForNotUser']()&&_0x3135de===this['subject']())return![];return VisuMZ[_0x38903b(0xa6b)]['Game_Action_testApply']['call'](this,_0x3135de);},VisuMZ[_0x58cf34(0xa6b)]['Game_Action_itemTargetCandidates']=Game_Action['prototype'][_0x58cf34(0x7c5)],Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x7c5)]=function(){const _0x510a16=_0x58cf34,_0x1fb191=VisuMZ[_0x510a16(0xa6b)][_0x510a16(0x50d)][_0x510a16(0x9a4)](this);if(this[_0x510a16(0x97c)]())_0x1fb191[_0x510a16(0x61f)](this[_0x510a16(0x28e)]());return _0x1fb191;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xbb7)]=Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0xca4)],Game_Action[_0x58cf34(0x8ef)]['needsSelection']=function(){const _0x20e236=_0x58cf34;return this[_0x20e236(0x334)]()&&!this[_0x20e236(0xa34)]()?this['needsSelectionBattleCore']():VisuMZ['BattleCore'][_0x20e236(0xbb7)][_0x20e236(0x9a4)](this);},Game_Action['prototype'][_0x58cf34(0xc6c)]=function(){const _0x23acf0=_0x58cf34,_0x1d7b42=String(this[_0x23acf0(0xb8a)]()[_0x23acf0(0x303)]);if(_0x1d7b42['match'](/RANDOM/i))return![];if(_0x1d7b42[_0x23acf0(0xcbb)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x1d7b42[_0x23acf0(0xcbb)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x1d7b42[_0x23acf0(0xcbb)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x1d7b42[_0x23acf0(0xcbb)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x23acf0(0xa6b)][_0x23acf0(0xbb7)]['call'](this);},VisuMZ['BattleCore'][_0x58cf34(0xa85)]=Game_Action['prototype'][_0x58cf34(0x679)],Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x679)]=function(){const _0x1ec2e4=_0x58cf34;let _0x997be8=[];return this['isBattleCoreTargetScope']()?this[_0x1ec2e4(0xa34)]()?_0x997be8=this[_0x1ec2e4(0x8d7)]():_0x997be8=this['makeTargetsBattleCore']():_0x997be8=VisuMZ[_0x1ec2e4(0xa6b)][_0x1ec2e4(0xa85)][_0x1ec2e4(0x9a4)](this),_0x997be8=this['applyTargetFilters'](_0x997be8),_0x997be8;},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0xbcf)]=function(){const _0x18704c=_0x58cf34;return this[_0x18704c(0x28e)]()[_0x18704c(0x40c)]()&&!this[_0x18704c(0x28e)]()[_0x18704c(0x5a6)]();},Game_Action['prototype'][_0x58cf34(0x8d7)]=function(){const _0x1249c0=_0x58cf34,_0x1f754b=VisuMZ[_0x1249c0(0xa6b)]['createKeyJS'](this[_0x1249c0(0xb8a)](),_0x1249c0(0x871));if(VisuMZ['BattleCore']['JS'][_0x1f754b]){targets=VisuMZ[_0x1249c0(0xa6b)][_0x1249c0(0xa85)][_0x1249c0(0x9a4)](this);const _0x4b682f=VisuMZ['BattleCore']['createKeyJS'](this[_0x1249c0(0xb8a)](),'Targets');return targets=VisuMZ[_0x1249c0(0xa6b)]['JS'][_0x4b682f][_0x1249c0(0x9a4)](this,this['subject'](),targets),this[_0x1249c0(0x494)](targets);}return this[_0x1249c0(0x848)]();},Game_Action['prototype'][_0x58cf34(0x848)]=function(){const _0x52afce=_0x58cf34;let _0x43522e=[];const _0x4567b3=String(this[_0x52afce(0xb8a)]()[_0x52afce(0x303)]);if(this[_0x52afce(0x93f)]())return this[_0x52afce(0xbcf)]()?(_0x43522e=this[_0x52afce(0x7b0)](),this['repeatTargets'](_0x43522e)):(this[_0x52afce(0x704)]=-0x1,_0x43522e['push'](...this['targetsForOpponents']()),this[_0x52afce(0x494)](_0x43522e));if(this[_0x52afce(0xb5f)]()){if(this[_0x52afce(0xbcf)]())return _0x43522e=this[_0x52afce(0x7b0)](),this[_0x52afce(0x494)](_0x43522e);else{if(Imported['VisuMZ_3_BattleAI']){if(VisuMZ[_0x52afce(0x3e6)][_0x52afce(0x7d2)]<1.19){let _0x2985d4='';_0x2985d4+=_0x52afce(0x34f),_0x2985d4+=_0x52afce(0xb58),_0x2985d4+=_0x52afce(0xb5e),alert(_0x2985d4),SceneManager[_0x52afce(0xcb5)]();}}return this[_0x52afce(0x704)]=-0x1,_0x43522e['push'](...this[_0x52afce(0x216)]()),this[_0x52afce(0x494)](_0x43522e);}}if(_0x4567b3[_0x52afce(0xcbb)](/(\d+) RANDOM ANY/i)){let _0x547439=Number(RegExp['$1']);while(_0x547439--){const _0x1cb8fe=Math[_0x52afce(0x8cb)](0x2)===0x0?this['opponentsUnit']():this['friendsUnit']();_0x43522e['push'](_0x1cb8fe['trueRandomTarget']());}return this['repeatTargets'](_0x43522e);}if(_0x4567b3[_0x52afce(0xcbb)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x167935=Number(RegExp['$1']);while(_0x167935--){_0x43522e[_0x52afce(0x6db)](this['opponentsUnit']()[_0x52afce(0x1ea)]());}return this[_0x52afce(0x494)](_0x43522e);}if(_0x4567b3[_0x52afce(0xcbb)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x44b958=Number(RegExp['$1']);while(_0x44b958--){_0x43522e[_0x52afce(0x6db)](this[_0x52afce(0x8d8)]()[_0x52afce(0x1ea)]());}return this['repeatTargets'](_0x43522e);}if(_0x4567b3[_0x52afce(0xcbb)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x43522e['push'](...this['friendsUnit']()['aliveMembers']()[_0x52afce(0x8b3)](_0x534000=>_0x534000!==this[_0x52afce(0x28e)]())),this[_0x52afce(0x494)](_0x43522e);return VisuMZ[_0x52afce(0xa6b)][_0x52afce(0xa85)]['call'](this);},Game_Action['prototype'][_0x58cf34(0xc71)]=function(_0x3802d0){const _0x1e0eeb=_0x58cf34,_0x22c5a5=[];for(let _0x486299=0x0;_0x486299<this[_0x1e0eeb(0xb20)]();_0x486299++){_0x22c5a5['push'](_0x3802d0[_0x1e0eeb(0x1ea)]());}return _0x22c5a5;},Game_Action['prototype'][_0x58cf34(0xc5a)]=function(_0x3e01bc){const _0xe2f22=_0x58cf34;if(!this[_0xe2f22(0xb8a)]())return _0x3e01bc;const _0x38ec7d=this[_0xe2f22(0xb8a)]()[_0xe2f22(0x841)];if(this['isForNotUser']()){this[_0xe2f22(0x23d)]()&&_0x3e01bc[_0xe2f22(0x61f)](this[_0xe2f22(0x28e)]());if(_0x3e01bc['includes'](this[_0xe2f22(0x28e)]())){const _0x3b0272=this[_0xe2f22(0x8d8)]()[_0xe2f22(0x565)]()['remove'](this[_0xe2f22(0x28e)]());if(_0x3b0272[_0xe2f22(0x3eb)]>0x0){_0x3b0272[_0xe2f22(0xa67)]((_0x5f4f77,_0x3849f2)=>_0x5f4f77[_0xe2f22(0x7da)]()-_0x3849f2[_0xe2f22(0x7da)]());while(_0x3e01bc[_0xe2f22(0x375)](this[_0xe2f22(0x28e)]())){const _0x1c9e26=_0x3e01bc['indexOf'](this[_0xe2f22(0x28e)]());_0x3e01bc[_0x1c9e26]=_0x3b0272[Math[_0xe2f22(0x8cb)](_0x3b0272[_0xe2f22(0x3eb)])];}}else _0x3e01bc[_0xe2f22(0x61f)](this[_0xe2f22(0x28e)]());}}return _0x3e01bc;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x237)]=Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0xbbe)],Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0xbbe)]=function(_0x18b204,_0x5c930b){const _0x58243f=_0x58cf34;VisuMZ[_0x58243f(0xa6b)]['Game_Action_itemEffectAddAttackState'][_0x58243f(0x9a4)](this,_0x18b204,_0x5c930b);if(!_0x18b204[_0x58243f(0x57d)]())return;for(const _0x5be730 of this[_0x58243f(0x28e)]()['attackStates']()){if(_0x5be730===_0x18b204[_0x58243f(0xcbd)]()){let _0x16aae0=_0x5c930b[_0x58243f(0x970)];_0x16aae0*=_0x18b204[_0x58243f(0x4d7)](_0x5be730),_0x16aae0*=this[_0x58243f(0x28e)]()['attackStatesRate'](_0x5be730),_0x16aae0*=this['lukEffectRate'](_0x18b204),Math['random']()<_0x16aae0&&(_0x18b204['_deathStateApplied']=!![],this[_0x58243f(0x735)](_0x18b204));}}},VisuMZ[_0x58cf34(0xa6b)]['Game_Action_itemEffectAddNormalState']=Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x3c4)],Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x3c4)]=function(_0x32c79a,_0x27eea2){const _0x484535=_0x58cf34;VisuMZ[_0x484535(0xa6b)]['Game_Action_itemEffectAddNormalState'][_0x484535(0x9a4)](this,_0x32c79a,_0x27eea2);if(!_0x32c79a[_0x484535(0x57d)]())return;if(_0x27eea2[_0x484535(0x702)]!==_0x32c79a[_0x484535(0xcbd)]())return;let _0x4ff733=_0x27eea2[_0x484535(0x970)];!this[_0x484535(0x3dd)]()&&(_0x4ff733*=_0x32c79a['stateRate'](_0x27eea2['dataId']),_0x4ff733*=this['lukEffectRate'](_0x32c79a)),Math[_0x484535(0x613)]()<_0x4ff733&&(_0x32c79a[_0x484535(0x620)]=!![],this[_0x484535(0x735)](_0x32c79a));},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x70a)]=Game_Action[_0x58cf34(0x8ef)]['applyGlobal'],Game_Action['prototype'][_0x58cf34(0x29a)]=function(){const _0xc2e311=_0x58cf34;VisuMZ['BattleCore'][_0xc2e311(0x70a)][_0xc2e311(0x9a4)](this),this['applyGlobalCommonEventNotetags'](),this[_0xc2e311(0x95f)]();},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x6ce)]=function(){const _0x1019e8=_0x58cf34;if(!SceneManager['isSceneBattle']())return;const _0xca73a7=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x410bdd=this[_0x1019e8(0xb8a)]()[_0x1019e8(0x841)][_0x1019e8(0xcbb)](_0xca73a7);if(_0x410bdd)for(const _0x27201c of _0x410bdd){if(!_0x27201c)continue;_0x27201c['match'](_0xca73a7);const _0xdd1a97=String(RegExp['$1'])['split'](',')[_0x1019e8(0x5a0)](_0x9ab6d4=>String(_0x9ab6d4)[_0x1019e8(0x989)]()),_0x411585=_0xdd1a97[_0x1019e8(0x5a0)](_0x36ef83=>DataManager[_0x1019e8(0xbe6)](_0x36ef83));for(const _0x158e58 of _0x411585){const _0x48cc09=$dataCommonEvents[_0x158e58];_0x48cc09&&$gameTemp[_0x1019e8(0x75f)](_0x158e58);}}},DataManager[_0x58cf34(0xbe6)]=function(_0x4b28f1){const _0x1240b6=_0x58cf34;_0x4b28f1=_0x4b28f1[_0x1240b6(0x6f5)]()[_0x1240b6(0x989)](),this['_commonEventIDs']=this[_0x1240b6(0x57c)]||{};if(this[_0x1240b6(0x57c)][_0x4b28f1])return this[_0x1240b6(0x57c)][_0x4b28f1];for(const _0x5211fc of $dataCommonEvents){if(!_0x5211fc)continue;let _0x5590be=_0x5211fc[_0x1240b6(0xc22)];_0x5590be=_0x5590be[_0x1240b6(0x6e4)](/\x1I\[(\d+)\]/gi,''),_0x5590be=_0x5590be[_0x1240b6(0x6e4)](/\\I\[(\d+)\]/gi,''),this[_0x1240b6(0x57c)][_0x5590be[_0x1240b6(0x6f5)]()[_0x1240b6(0x989)]()]=_0x5211fc['id'];}return this['_commonEventIDs'][_0x4b28f1]||0x0;},Game_Action[_0x58cf34(0x8ef)]['resetResultSwitches']=function(){const _0x43e5c8=_0x58cf34;if(!SceneManager[_0x43e5c8(0x3d3)]())return;const _0x4fe904=VisuMZ[_0x43e5c8(0xa6b)]['Settings'][_0x43e5c8(0x2ec)];_0x4fe904[_0x43e5c8(0x75c)]&&$gameSwitches[_0x43e5c8(0x584)](_0x4fe904[_0x43e5c8(0x75c)],![]),_0x4fe904['SwitchMissEvade']&&$gameSwitches[_0x43e5c8(0x584)](_0x4fe904['SwitchMissEvade'],![]),_0x4fe904[_0x43e5c8(0x766)]&&$gameVariables[_0x43e5c8(0x584)](_0x4fe904[_0x43e5c8(0x766)],0x0),_0x4fe904['VariableHeal']&&$gameVariables[_0x43e5c8(0x584)](_0x4fe904[_0x43e5c8(0x203)],0x0);},Game_Action['prototype'][_0x58cf34(0x8e6)]=function(_0x461e2f){const _0x11a51d=_0x58cf34;if(!SceneManager[_0x11a51d(0x3d3)]())return;if(!_0x461e2f)return;const _0x54f364=_0x461e2f[_0x11a51d(0x9d9)](),_0x201244=VisuMZ[_0x11a51d(0xa6b)][_0x11a51d(0xb05)][_0x11a51d(0x2ec)];_0x201244[_0x11a51d(0x75c)]&&_0x54f364[_0x11a51d(0x513)]&&$gameSwitches[_0x11a51d(0x584)](_0x201244[_0x11a51d(0x75c)],!![]);_0x201244[_0x11a51d(0xb37)]&&(_0x54f364['missed']||_0x54f364['evaded'])&&$gameSwitches[_0x11a51d(0x584)](_0x201244[_0x11a51d(0xb37)],!![]);if(_0x201244[_0x11a51d(0x766)]){let _0x32090d=$gameVariables[_0x11a51d(0x772)](_0x201244[_0x11a51d(0x766)]);_0x54f364['hpDamage']>0x0&&(_0x32090d+=Math[_0x11a51d(0x85c)](_0x54f364['hpDamage'])),$gameVariables[_0x11a51d(0x584)](_0x201244[_0x11a51d(0x766)],_0x32090d);}if(_0x201244[_0x11a51d(0x203)]){let _0x35b951=$gameVariables[_0x11a51d(0x772)](_0x201244[_0x11a51d(0x203)]);_0x54f364[_0x11a51d(0x956)]<0x0&&(_0x35b951+=Math[_0x11a51d(0x85c)](_0x54f364['hpDamage'])),$gameVariables[_0x11a51d(0x584)](_0x201244[_0x11a51d(0x203)],_0x35b951);}},VisuMZ['BattleCore']['LifeStealRegExp']={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x2e4)]=Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x762)],Game_Action['prototype'][_0x58cf34(0x762)]=function(_0x468bb7,_0x15c7f7){const _0xc966a7=_0x58cf34;VisuMZ[_0xc966a7(0xa6b)][_0xc966a7(0x2e4)][_0xc966a7(0x9a4)](this,_0x468bb7,_0x15c7f7);!this[_0xc966a7(0xa2e)]()&&_0x468bb7&&_0x468bb7[_0xc966a7(0x9d9)]()[_0xc966a7(0x956)]>0x0&&this[_0xc966a7(0xb83)]('HP',_0x468bb7,_0x468bb7[_0xc966a7(0x9d9)]()['hpDamage']);if(_0x468bb7){this[_0xc966a7(0xad2)]=this[_0xc966a7(0xad2)]||{};const _0x37eb70=_0x468bb7['battlerKey']();this[_0xc966a7(0xad2)][_0x37eb70]=_0x15c7f7;}},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x2ae)]=function(_0x58cb91){const _0x13acf7=_0x58cf34;this[_0x13acf7(0xad2)]=this[_0x13acf7(0xad2)]||{};const _0x34f776=_0x58cb91[_0x13acf7(0xc64)]();return this[_0x13acf7(0xad2)][_0x34f776]||0x0;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb1f)]=Game_Action['prototype'][_0x58cf34(0x40b)],Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x40b)]=function(_0x5f411b,_0x447edc){const _0x5f0a63=_0x58cf34;VisuMZ[_0x5f0a63(0xa6b)][_0x5f0a63(0xb1f)]['call'](this,_0x5f411b,_0x447edc),!this[_0x5f0a63(0xa2e)]()&&_0x5f411b&&_0x5f411b[_0x5f0a63(0x9d9)]()[_0x5f0a63(0x34a)]>0x0&&this[_0x5f0a63(0xb83)]('MP',_0x5f411b,_0x5f411b[_0x5f0a63(0x9d9)]()['mpDamage']);},Game_Action['prototype'][_0x58cf34(0xb83)]=function(_0x586581,_0x470f31,_0x3d9874){const _0x492604=_0x58cf34;_0x586581=_0x586581[_0x492604(0x6f5)]()[_0x492604(0x989)]();const _0x11a443=this[_0x492604(0x7e8)](_0x586581,_0x470f31);if(_0x11a443<=0x0)return;const _0x1ed8a8=Math[_0x492604(0x92e)](_0x3d9874*_0x11a443);if(_0x1ed8a8<=0x0)return;let _0x36ade1=this['subject']();if(this[_0x492604(0x606)])_0x36ade1=this['_reflectionTarget'];const _0x46d62e=_0x470f31[_0x492604(0xac4)](_0x586581)?-0x1:0x1;if(_0x586581==='HP')_0x36ade1[_0x492604(0x5f9)](_0x46d62e*_0x1ed8a8);if(_0x586581==='MP')_0x36ade1[_0x492604(0xc81)](_0x46d62e*_0x1ed8a8);},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x7e8)]=function(_0x27b4b5,_0x54dd9e){const _0x1cba29=_0x58cf34;if(this[_0x1cba29(0x3bd)](_0x27b4b5))return 0x0;if(this[_0x1cba29(0x28e)]()['isDisarmLifeSteal'](_0x27b4b5))return 0x0;if(_0x54dd9e[_0x1cba29(0x39b)](_0x27b4b5))return 0x0;let _0x2a7741=0x0;return _0x2a7741+=this[_0x1cba29(0x440)](_0x27b4b5),_0x2a7741+=this['subject']()['lifeStealRate'](_0x27b4b5,this[_0x1cba29(0xb8a)]()[_0x1cba29(0x80c)]),_0x2a7741[_0x1cba29(0xaa5)](0x0,0x1);},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x3bd)]=function(_0x10cc22){const _0x7d518e=_0x58cf34;_0x10cc22=_0x10cc22[_0x7d518e(0x6f5)]()[_0x7d518e(0x989)]();const _0x285b32=VisuMZ[_0x7d518e(0xa6b)][_0x7d518e(0x3a5)],_0x1c1027=this[_0x7d518e(0xb8a)]()[_0x7d518e(0x841)]||'';if(_0x1c1027[_0x7d518e(0xcbb)](_0x285b32[_0x7d518e(0xad4)]))return!![];if(_0x10cc22==='HP'&&_0x1c1027['match'](_0x285b32[_0x7d518e(0xba4)]))return!![];if(_0x10cc22==='MP'&&_0x1c1027[_0x7d518e(0xcbb)](_0x285b32['cancelMpLifeSteal']))return!![];return![];},Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x440)]=function(_0x46d6a2){const _0x7d0df0=_0x58cf34,_0x3fbe31=VisuMZ[_0x7d0df0(0xa6b)][_0x7d0df0(0x3a5)],_0x40dbc0=this[_0x7d0df0(0xb8a)]()['note']||'';_0x46d6a2=_0x46d6a2[_0x7d0df0(0x6f5)]()[_0x7d0df0(0x989)]();const _0x1fa805=_0x40dbc0[_0x7d0df0(0xcbb)](_0x3fbe31[_0x7d0df0(0x76b)]);if(_0x1fa805)for(const _0x593a11 of _0x1fa805){_0x593a11['match'](_0x3fbe31[_0x7d0df0(0x76b)]);const _0x2cc820=String(RegExp['$1'])[_0x7d0df0(0x6f5)]()['trim'](),_0x2e8180=Number(RegExp['$2'])*0.01;if(_0x2cc820!==_0x46d6a2)continue;return _0x2e8180;}return 0x0;},Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x7e8)]=function(_0x3f8f0e,_0x3ba86e){const _0x8cc17b=_0x58cf34,_0xa65fb9=VisuMZ[_0x8cc17b(0xa6b)][_0x8cc17b(0x3a5)];let _0x512606=0x0;_0x3f8f0e=_0x3f8f0e['toUpperCase']()['trim']();for(const _0x3afbc4 of this[_0x8cc17b(0x1f5)]()){if(!_0x3afbc4)continue;const _0x40e09b=_0x3afbc4[_0x8cc17b(0x841)]||'',_0x812e17=_0x40e09b[_0x8cc17b(0xcbb)](_0xa65fb9['lifeStealTrait']);if(_0x812e17)for(const _0x52e87b of _0x812e17){_0x52e87b[_0x8cc17b(0xcbb)](_0xa65fb9['lifeStealTrait']);const _0x3f322e=String(RegExp['$1'])[_0x8cc17b(0x6f5)]()[_0x8cc17b(0x989)](),_0x5c081b=String(RegExp['$2']),_0x47e80d=Number(RegExp['$3'])*0.01;if(_0x3f322e!==_0x3f8f0e)continue;if(_0x3ba86e===Game_Action[_0x8cc17b(0x86c)]&&_0x5c081b[_0x8cc17b(0xcbb)](/CERTAIN/i))_0x512606+=_0x47e80d;else{if(_0x3ba86e===Game_Action[_0x8cc17b(0xc9c)]&&_0x5c081b[_0x8cc17b(0xcbb)](/PHYS/i))_0x512606+=_0x47e80d;else _0x3ba86e===Game_Action[_0x8cc17b(0x99e)]&&_0x5c081b['match'](/MAGIC/i)&&(_0x512606+=_0x47e80d);}}}return _0x512606;},Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x814)]=function(_0x377724){const _0x240e35=_0x58cf34;_0x377724=_0x377724['toUpperCase']()[_0x240e35(0x989)]();const _0x4c007c=VisuMZ[_0x240e35(0xa6b)]['LifeStealRegExp'];for(const _0x321a5e of this['traitObjects']()){if(!_0x321a5e)continue;const _0x945b7a=_0x321a5e['note']||'';if(_0x945b7a['match'](_0x4c007c[_0x240e35(0x4ba)]))return!![];if(_0x377724==='HP'&&_0x945b7a[_0x240e35(0xcbb)](_0x4c007c[_0x240e35(0x9d1)]))return!![];if(_0x377724==='MP'&&_0x945b7a['match'](_0x4c007c[_0x240e35(0x9ca)]))return!![];}return![];},Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0xac4)]=function(_0x13dba9){const _0x56af47=_0x58cf34;_0x13dba9=_0x13dba9[_0x56af47(0x6f5)]()['trim']();const _0x19acfb=VisuMZ[_0x56af47(0xa6b)][_0x56af47(0x3a5)];for(const _0x1eb3bc of this[_0x56af47(0x1f5)]()){if(!_0x1eb3bc)continue;const _0x4672ad=_0x1eb3bc[_0x56af47(0x841)]||'';if(_0x4672ad[_0x56af47(0xcbb)](_0x19acfb[_0x56af47(0xcbf)]))return!![];if(_0x13dba9==='HP'&&_0x4672ad[_0x56af47(0xcbb)](_0x19acfb[_0x56af47(0xa1b)]))return!![];if(_0x13dba9==='MP'&&_0x4672ad[_0x56af47(0xcbb)](_0x19acfb[_0x56af47(0xa26)]))return!![];}return![];},Game_BattlerBase['prototype']['isGuardLifeSteal']=function(_0x3cedbe){const _0x5e1c85=_0x58cf34;_0x3cedbe=_0x3cedbe['toUpperCase']()[_0x5e1c85(0x989)]();const _0x4d66fa=VisuMZ['BattleCore'][_0x5e1c85(0x3a5)];for(const _0x5b77f2 of this[_0x5e1c85(0x1f5)]()){if(!_0x5b77f2)continue;const _0x581e29=_0x5b77f2[_0x5e1c85(0x841)]||'';if(_0x581e29[_0x5e1c85(0xcbb)](_0x4d66fa[_0x5e1c85(0x70f)]))return!![];if(_0x3cedbe==='HP'&&_0x581e29[_0x5e1c85(0xcbb)](_0x4d66fa[_0x5e1c85(0x7c4)]))return!![];if(_0x3cedbe==='MP'&&_0x581e29[_0x5e1c85(0xcbb)](_0x4d66fa[_0x5e1c85(0x57b)]))return!![];}return![];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x2c4)]=Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x7c8)],Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x7c8)]=function(){const _0x246841=_0x58cf34;VisuMZ[_0x246841(0xa6b)][_0x246841(0x2c4)][_0x246841(0x9a4)](this),this['initMembersBattleCore']();},Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x84c)]=function(){const _0x3c8bb0=_0x58cf34;this[_0x3c8bb0(0x1c7)]=![];},VisuMZ[_0x58cf34(0xa6b)]['Game_BattlerBase_refresh']=Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x7ff)],Game_BattlerBase[_0x58cf34(0x8ef)]['refresh']=function(){const _0x1695d9=_0x58cf34;this[_0x1695d9(0x78f)]={},VisuMZ['BattleCore']['Game_BattlerBase_refresh']['call'](this);},Game_BattlerBase['prototype'][_0x58cf34(0x1c4)]=function(_0x4f8010){const _0xbb540b=_0x58cf34;return this[_0xbb540b(0x78f)]=this[_0xbb540b(0x78f)]||{},this[_0xbb540b(0x78f)][_0x4f8010]!==undefined;},Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x540)]=function(){const _0x467f5c=_0x58cf34;if(this[_0x467f5c(0x78f)][_0x467f5c(0x540)]!==undefined)return this[_0x467f5c(0x78f)][_0x467f5c(0x540)];const _0x374734=/<DAMAGE CAP:[ ](\d+)>/i,_0x397637=this[_0x467f5c(0x1f5)]()['map'](_0x1983dd=>_0x1983dd&&_0x1983dd[_0x467f5c(0x841)][_0x467f5c(0xcbb)](_0x374734)?Number(RegExp['$1']):0x0);let _0x5776c1=_0x397637[_0x467f5c(0x3eb)]>0x0?Math['max'](..._0x397637):0x0;if(_0x5776c1<=0x0)_0x5776c1=VisuMZ[_0x467f5c(0xa6b)][_0x467f5c(0xb05)][_0x467f5c(0x693)][_0x467f5c(0x3f5)];return this[_0x467f5c(0x78f)][_0x467f5c(0x540)]=_0x5776c1,this[_0x467f5c(0x78f)][_0x467f5c(0x540)];},Game_BattlerBase[_0x58cf34(0x8ef)]['softDamageCapRate']=function(){const _0x1e4a5f=_0x58cf34;if(this[_0x1e4a5f(0x78f)][_0x1e4a5f(0x9f6)]!==undefined)return this['_cache'][_0x1e4a5f(0x9f6)];let _0x5336e9=VisuMZ[_0x1e4a5f(0xa6b)][_0x1e4a5f(0xb05)][_0x1e4a5f(0x693)][_0x1e4a5f(0xc23)];const _0xe19593=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x188c60=this[_0x1e4a5f(0x1f5)]()[_0x1e4a5f(0x5a0)](_0x1cf19e=>_0x1cf19e&&_0x1cf19e[_0x1e4a5f(0x841)][_0x1e4a5f(0xcbb)](_0xe19593)?Number(RegExp['$1'])/0x64:0x0);return _0x5336e9=_0x188c60[_0x1e4a5f(0xa43)]((_0x9d00ff,_0x3d7ce0)=>_0x9d00ff+_0x3d7ce0,_0x5336e9),this[_0x1e4a5f(0x78f)][_0x1e4a5f(0x9f6)]=_0x5336e9,this[_0x1e4a5f(0x78f)][_0x1e4a5f(0x9f6)][_0x1e4a5f(0xaa5)](0.01,0x1);},VisuMZ[_0x58cf34(0xa6b)]['Game_BattlerBase_die']=Game_BattlerBase['prototype'][_0x58cf34(0x5bb)],Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x5bb)]=function(){const _0xd68b12=_0x58cf34;VisuMZ[_0xd68b12(0xa6b)]['Game_BattlerBase_die']['call'](this),SceneManager['isSceneBattle']()&&(this['requestMotion']('dead'),this['_performDamageMotion']=undefined);},Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x399)]=function(){const _0x5b8bd5=_0x58cf34;if(!SceneManager[_0x5b8bd5(0x3d3)]())return null;if(!SceneManager[_0x5b8bd5(0xb85)][_0x5b8bd5(0x5ae)])return null;return SceneManager['_scene'][_0x5b8bd5(0x5ae)]['findTargetSprite'](this);},Game_BattlerBase['prototype']['svBattlerAnchorX']=function(){const _0x5a4353=_0x58cf34;return VisuMZ[_0x5a4353(0xa6b)]['Settings'][_0x5a4353(0xb3d)][_0x5a4353(0x8a0)];},Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x775)]=function(){const _0xc7c218=_0x58cf34;return VisuMZ[_0xc7c218(0xa6b)][_0xc7c218(0xb05)][_0xc7c218(0xb3d)][_0xc7c218(0x349)];},Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0xadd)]=function(){const _0x12bea6=_0x58cf34;return this[_0x12bea6(0x40c)]&&this[_0x12bea6(0x40c)]()?VisuMZ[_0x12bea6(0xa6b)]['Settings'][_0x12bea6(0xb3d)][_0x12bea6(0x283)]:VisuMZ[_0x12bea6(0xa6b)][_0x12bea6(0xb05)]['Enemy'][_0x12bea6(0x283)];},Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0xa76)]=function(){return!![];},Game_BattlerBase['prototype'][_0x58cf34(0x58e)]=function(){return 0x0;},Game_BattlerBase[_0x58cf34(0x8ef)]['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase['prototype']['createBattleUIOffsetX']=function(_0x7765ac){const _0x4f41e3=_0x58cf34;if(!_0x7765ac)return 0x0;let _0x16fca4=0x0;const _0x3c4ed7=_0x7765ac[_0x4f41e3(0x841)];return _0x3c4ed7[_0x4f41e3(0xcbb)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x16fca4+=Number(RegExp['$1'])),_0x3c4ed7[_0x4f41e3(0xcbb)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x16fca4+=Number(RegExp['$1'])),_0x16fca4;},Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x268)]=function(_0x488bc6){const _0x88ee8a=_0x58cf34;if(!_0x488bc6)return 0x0;let _0x42f207=0x0;const _0x310bd8=_0x488bc6['note'];return _0x310bd8[_0x88ee8a(0xcbb)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x42f207+=Number(RegExp['$1'])),_0x310bd8['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x42f207+=Number(RegExp['$2'])),_0x42f207;},VisuMZ['BattleCore']['Game_BattlerBase_isStateResist']=Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0xb22)],Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0xb22)]=function(_0x1de56d){const _0x5dcaae=_0x58cf34;if(_0x1de56d===this[_0x5dcaae(0xcbd)]()&&this[_0x5dcaae(0x57d)]())return!![];return VisuMZ[_0x5dcaae(0xa6b)][_0x5dcaae(0x77e)][_0x5dcaae(0x9a4)](this,_0x1de56d);},Game_BattlerBase['prototype']['isImmortal']=function(){return this['_immortal'];},Game_BattlerBase[_0x58cf34(0x8ef)]['setImmortal']=function(_0x16fc83){const _0x19c452=_0x58cf34;_0x16fc83?this[_0x19c452(0x474)]():this[_0x19c452(0xc94)]();},Game_BattlerBase[_0x58cf34(0x8ef)]['addImmortal']=function(){const _0x3f239a=_0x58cf34;if(this['isDead']())return;this['_immortal']=!![],this[_0x3f239a(0x620)]=![];},Game_BattlerBase['prototype']['removeImmortal']=function(){const _0x44ff92=_0x58cf34,_0x3bd5d6=this['isAlive']();this[_0x44ff92(0x1c7)]=![],_0x3bd5d6&&this[_0x44ff92(0x620)]&&this[_0x44ff92(0x5bb)](),this[_0x44ff92(0x620)]=![],this[_0x44ff92(0x7ff)](),this[_0x44ff92(0xc87)]()&&_0x3bd5d6&&(this[_0x44ff92(0xccc)](),this['requestMotionRefresh']());},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xad0)]=Game_Action['prototype'][_0x58cf34(0x2ed)],Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x2ed)]=function(){const _0x469044=_0x58cf34;return this[_0x469044(0xb8a)]()?VisuMZ['BattleCore'][_0x469044(0xad0)][_0x469044(0x9a4)](this):0x0;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x83a)]=Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x23e)],Game_Action['prototype']['setAttack']=function(){const _0x2c2c3b=_0x58cf34;if(this[_0x2c2c3b(0x28e)]()&&this[_0x2c2c3b(0x28e)]()[_0x2c2c3b(0x1e6)]())VisuMZ[_0x2c2c3b(0xa6b)]['Game_Action_setAttack'][_0x2c2c3b(0x9a4)](this);else BattleManager[_0x2c2c3b(0x7fb)]?VisuMZ[_0x2c2c3b(0xa6b)]['Game_Action_setAttack']['call'](this):this[_0x2c2c3b(0xcdf)]();},VisuMZ['BattleCore']['Game_BattlerBase_canAttack']=Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x1e6)],Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x1e6)]=function(){const _0x8ca74f=_0x58cf34;if(!this['canAttackBattleCore']())return![];return VisuMZ[_0x8ca74f(0xa6b)][_0x8ca74f(0x653)][_0x8ca74f(0x9a4)](this);},Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x675)]=function(){const _0x56a536=_0x58cf34;for(const _0x45e332 of this[_0x56a536(0x1f5)]()){if(!_0x45e332)continue;if(_0x45e332[_0x56a536(0x841)]['match'](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x6d5)]=Game_Action[_0x58cf34(0x8ef)]['setGuard'],Game_Action[_0x58cf34(0x8ef)]['setGuard']=function(){const _0x269028=_0x58cf34;this[_0x269028(0x28e)]()['canGuard']()&&VisuMZ[_0x269028(0xa6b)][_0x269028(0x6d5)]['call'](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xa3e)]=Game_BattlerBase[_0x58cf34(0x8ef)]['canGuard'],Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x5ee)]=function(){const _0x268a09=_0x58cf34;if(!this[_0x268a09(0x46e)]())return![];return VisuMZ[_0x268a09(0xa6b)][_0x268a09(0xa3e)][_0x268a09(0x9a4)](this);},Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x46e)]=function(){const _0x3cfbcd=_0x58cf34;for(const _0x5b700e of this[_0x3cfbcd(0x1f5)]()){if(!_0x5b700e)continue;if(_0x5b700e[_0x3cfbcd(0x841)]['match'](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x6c9)]=function(){const _0xfa3394=_0x58cf34;for(const _0x40d17b of this['traitObjects']()){if(!_0x40d17b)continue;if(_0x40d17b['note'][_0xfa3394(0xcbb)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x58cf34(0xa6b)]['Game_BattlerBase_meetsUsableItemConditions']=Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x373)],Game_BattlerBase['prototype'][_0x58cf34(0x373)]=function(_0x8e1c14){const _0x376cdd=_0x58cf34;if(_0x8e1c14&&_0x8e1c14['note'][_0x376cdd(0xcbb)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x5f2b6e=this[_0x376cdd(0x8d8)]()['aliveMembers']();if(_0x5f2b6e['length']===0x1&&_0x5f2b6e[0x0]===this)return![];}return VisuMZ[_0x376cdd(0xa6b)][_0x376cdd(0x206)][_0x376cdd(0x9a4)](this,_0x8e1c14);},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x3e5)]=function(){const _0x7c5890=_0x58cf34;return VisuMZ[_0x7c5890(0xa6b)]['Settings']['Mechanics'][_0x7c5890(0x8a2)];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x4a1)]=Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x41e)],Game_Battler['prototype'][_0x58cf34(0x41e)]=function(){const _0x29cfec=_0x58cf34;if(SceneManager[_0x29cfec(0x3d3)]()){if(BattleManager[_0x29cfec(0x2b7)]()){if(this[_0x29cfec(0xcca)]()<=0x0)return;}else{if($gameTroop[_0x29cfec(0xcca)]()<=0x0)return;}}if(SceneManager[_0x29cfec(0x3d3)]()&&BattleManager[_0x29cfec(0x2b7)]()&&this[_0x29cfec(0x84d)]===Graphics[_0x29cfec(0x458)])return;this[_0x29cfec(0x84d)]=Graphics[_0x29cfec(0x458)],SceneManager[_0x29cfec(0x3d3)]()&&this['processBattleCoreJS'](_0x29cfec(0x1c9)),VisuMZ[_0x29cfec(0xa6b)][_0x29cfec(0x4a1)]['call'](this),SceneManager[_0x29cfec(0x3d3)]()&&(this[_0x29cfec(0x5c8)](),this[_0x29cfec(0x2ef)](_0x29cfec(0x6a7)));},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x5c8)]=function(){const _0x48fa29=_0x58cf34;if(SceneManager[_0x48fa29(0x3d3)]())for(const _0x2168c5 of this[_0x48fa29(0x1f5)]()){if(!_0x2168c5)continue;this[_0x48fa29(0xb64)](_0x2168c5);}},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xb64)]=function(_0x11a414){const _0x556920=_0x58cf34;if(!Imported['VisuMZ_0_CoreEngine'])return;if(!SceneManager[_0x556920(0x3d3)]())return;if(this[_0x556920(0xc87)]())return;if(this[_0x556920(0x6ac)]())return;if(_0x11a414[_0x556920(0x841)][_0x556920(0xcbb)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x3681cc=Number(RegExp['$1']);$gameTemp['requestFauxAnimation']([this],_0x3681cc,![],![]);}},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xcb1)]=Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x230)],Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x230)]=function(){const _0x18545b=_0x58cf34;this[_0x18545b(0x2ef)](_0x18545b(0x41b)),VisuMZ['BattleCore'][_0x18545b(0xcb1)][_0x18545b(0x9a4)](this),this[_0x18545b(0x2ef)](_0x18545b(0x415));},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x68a)]=Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xbb0)],Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xbb0)]=function(){const _0x4d9c46=_0x58cf34;this[_0x4d9c46(0x2ef)]('PreEndTurnJS'),VisuMZ[_0x4d9c46(0xa6b)][_0x4d9c46(0x68a)][_0x4d9c46(0x9a4)](this),VisuMZ[_0x4d9c46(0xa6b)][_0x4d9c46(0xb05)][_0x4d9c46(0x2ec)][_0x4d9c46(0x987)]&&this[_0x4d9c46(0x2f9)](),this['processBattleCoreJS'](_0x4d9c46(0x5ea));},Game_Battler[_0x58cf34(0x8ef)]['processBattleCoreJS']=function(_0x1a192d){const _0x2171a1=_0x58cf34;if(this[_0x2171a1(0xb06)]||this[_0x2171a1(0x427)])return;const _0x5eca33=VisuMZ[_0x2171a1(0xa6b)][_0x2171a1(0xb05)][_0x2171a1(0x2ec)];if(_0x5eca33[_0x1a192d])_0x5eca33[_0x1a192d][_0x2171a1(0x9a4)](this);for(const _0x22b095 of this[_0x2171a1(0x1f5)]()){if(!_0x22b095)continue;key=VisuMZ[_0x2171a1(0xa6b)]['createKeyJS'](_0x22b095,_0x1a192d),VisuMZ[_0x2171a1(0xa6b)]['JS'][key]&&VisuMZ[_0x2171a1(0xa6b)]['JS'][key]['call'](this,this,this,_0x22b095,0x0);}},Game_Battler[_0x58cf34(0x8ef)]['chantStyle']=function(){const _0x302c89=_0x58cf34;return VisuMZ[_0x302c89(0xa6b)]['Settings']['Actor']['ChantStyle']||![];},Game_Battler[_0x58cf34(0x8ef)]['isChanting']=function(){const _0x6b3b3d=_0x58cf34;if(this['isWaiting']()){if(this[_0x6b3b3d(0x453)]()){if(this[_0x6b3b3d(0x1f4)][_0x6b3b3d(0x6ec)](_0x4fc711=>_0x4fc711[_0x6b3b3d(0xb8a)]()&&_0x4fc711[_0x6b3b3d(0x4fc)]()))return!![];}else{if(this[_0x6b3b3d(0x1f4)]['some'](_0xcd1f63=>_0xcd1f63[_0x6b3b3d(0xb8a)]()&&_0xcd1f63[_0x6b3b3d(0x865)]()))return!![];}}if(BattleManager[_0x6b3b3d(0x2b7)]()&&this[_0x6b3b3d(0x3a7)]==='casting')return this[_0x6b3b3d(0x453)]()?this['currentAction']()&&this[_0x6b3b3d(0x559)]()[_0x6b3b3d(0xb8a)]()&&this['currentAction']()[_0x6b3b3d(0x4fc)]():this[_0x6b3b3d(0x559)]()&&this[_0x6b3b3d(0x559)]()['item']()&&this[_0x6b3b3d(0x559)]()[_0x6b3b3d(0x865)]();return![];},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x60c)]=function(){const _0xd68882=_0x58cf34;if(BattleManager[_0xd68882(0x2b7)]()&&this[_0xd68882(0x3a7)]===_0xd68882(0x310))return this[_0xd68882(0x453)]()?this[_0xd68882(0x559)]()&&this[_0xd68882(0x559)]()[_0xd68882(0xb8a)]()&&!this[_0xd68882(0x559)]()['isMagical']():this[_0xd68882(0x559)]()&&this[_0xd68882(0x559)]()[_0xd68882(0xb8a)]()&&!this['currentAction']()[_0xd68882(0x865)]();return![];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xc0d)]=Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xa39)],Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xa39)]=function(){const _0x313060=_0x58cf34;VisuMZ[_0x313060(0xa6b)][_0x313060(0xc0d)][_0x313060(0x9a4)](this),this[_0x313060(0x395)]=[];},Game_Battler[_0x58cf34(0x8ef)]['isDamagePopupRequested']=function(){const _0x5e844f=_0x58cf34;if(!this[_0x5e844f(0x395)])this[_0x5e844f(0xa39)]();return this[_0x5e844f(0x395)][_0x5e844f(0x3eb)]>0x0;},Game_Battler['prototype'][_0x58cf34(0xb44)]=function(){const _0x4eb8d9=_0x58cf34;if(!SceneManager['isSceneBattle']())return;if(BattleManager[_0x4eb8d9(0xa19)]())return;if(!this[_0x4eb8d9(0x395)])this['clearDamagePopup']();this[_0x4eb8d9(0x4a3)]();const _0x475914=this[_0x4eb8d9(0x399)]();if(_0x475914)_0x475914[_0x4eb8d9(0x6fe)]();},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x4a3)]=function(){const _0x1731b1=_0x58cf34,_0x51a354=this[_0x1731b1(0x9d9)]();if(_0x51a354[_0x1731b1(0x7db)]||_0x51a354[_0x1731b1(0xc1f)]){const _0x4c4cc9=JsonEx[_0x1731b1(0x402)](_0x51a354);_0x4c4cc9[_0x1731b1(0x481)]=![],_0x4c4cc9[_0x1731b1(0x34a)]=0x0,this['_damagePopupArray']['push'](_0x4c4cc9);if(!_0x51a354[_0x1731b1(0x956)]&&!_0x51a354[_0x1731b1(0x34a)])return;}if(_0x51a354[_0x1731b1(0x481)]){const _0x2a3af0=JsonEx[_0x1731b1(0x402)](_0x51a354);_0x2a3af0[_0x1731b1(0x7db)]=![],_0x2a3af0['evaded']=![],_0x2a3af0['mpDamage']=0x0,this[_0x1731b1(0x395)][_0x1731b1(0x6db)](_0x2a3af0);}if(_0x51a354['mpDamage']!==0x0){const _0x4da5ee=JsonEx[_0x1731b1(0x402)](_0x51a354);_0x4da5ee[_0x1731b1(0x7db)]=![],_0x4da5ee['evaded']=![],_0x4da5ee[_0x1731b1(0x481)]=![],this[_0x1731b1(0x395)][_0x1731b1(0x6db)](_0x4da5ee);}},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x3bf)]=function(){const _0x2e9373=_0x58cf34;if(!this['_damagePopupArray'])this[_0x2e9373(0xa39)]();return VisuMZ[_0x2e9373(0xa6b)]['Settings']['Damage']['NewPopupBottom']?this[_0x2e9373(0x395)]['shift']():this[_0x2e9373(0x395)]['pop']();},Game_Battler['prototype'][_0x58cf34(0x797)]=function(_0x510274,_0x21b89f){const _0x492569=_0x58cf34;if(!SceneManager[_0x492569(0x3d3)]())return;if(BattleManager[_0x492569(0xa19)]())return;if(!this[_0x492569(0x399)]())return;if(_0x510274[_0x492569(0x3eb)]<=0x0)return;_0x21b89f=_0x21b89f||{},_0x21b89f[_0x492569(0x6d1)]=_0x21b89f[_0x492569(0x6d1)]||_0x492569(0x698),_0x21b89f[_0x492569(0x65f)]=_0x21b89f[_0x492569(0x65f)]||[0x0,0x0,0x0,0x0],_0x21b89f[_0x492569(0x405)]=_0x21b89f['flashDuration']||0x0,this[_0x492569(0x399)]()[_0x492569(0x797)](_0x510274,_0x21b89f);},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x6aa)]=function(_0x40e365,_0x2760fe,_0x265e25){const _0x559c40=_0x58cf34;if(!SceneManager[_0x559c40(0x3d3)]())return;if(BattleManager[_0x559c40(0xa19)]())return;if(!this[_0x559c40(0x399)]())return;if(_0x2760fe['length']<=0x0)return;_0x265e25=_0x265e25||{},_0x265e25[_0x559c40(0x6d1)]=_0x265e25[_0x559c40(0x6d1)]||_0x559c40(0x698),_0x265e25[_0x559c40(0x65f)]=_0x265e25[_0x559c40(0x65f)]||[0x0,0x0,0x0,0x0],_0x265e25[_0x559c40(0x405)]=_0x265e25[_0x559c40(0x405)]||0x0,this[_0x559c40(0x399)]()[_0x559c40(0x6aa)](_0x40e365,_0x2760fe,_0x265e25);},Game_Battler[_0x58cf34(0x8ef)]['notFocusValid']=function(){const _0x9a8f24=_0x58cf34;if(this[_0x9a8f24(0x6ac)]())return![];if(this['isAlive']()&&this[_0x9a8f24(0x4a7)]())return!![];if(this['isEnemy']()&&this[_0x9a8f24(0xae1)]()){if(this[_0x9a8f24(0xc87)]()&&this[_0x9a8f24(0x962)]())return![];}else{if(this[_0x9a8f24(0xc87)]())return![];}return!![];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x820)]=Game_Battler['prototype'][_0x58cf34(0x387)],Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x387)]=function(){const _0x1f4f03=_0x58cf34;VisuMZ[_0x1f4f03(0xa6b)][_0x1f4f03(0x820)]['call'](this),this['clearFreezeMotion']();},Game_Battler['prototype'][_0x58cf34(0x99f)]=function(){return!![];},Game_Battler[_0x58cf34(0x8ef)]['isBattlerGrounded']=function(){return![];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x6e6)]=Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x2b9)],Game_Battler['prototype'][_0x58cf34(0x2b9)]=function(_0x4ce753){const _0x3cd4d4=_0x58cf34;VisuMZ['BattleCore'][_0x3cd4d4(0x6e6)][_0x3cd4d4(0x9a4)](this,_0x4ce753),this[_0x3cd4d4(0xbd5)](_0x4ce753),this[_0x3cd4d4(0xa39)]();},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xbd5)]=function(_0x134a64){const _0x3f9760=_0x58cf34;this[_0x3f9760(0x8b5)](![]),this['_forcedHomeX']=undefined,this[_0x3f9760(0xbfe)]=undefined;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x2f3)]=Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xc7d)],Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xc7d)]=function(){const _0x561c89=_0x58cf34;VisuMZ['BattleCore'][_0x561c89(0x2f3)]['call'](this),this[_0x561c89(0x48a)]();},Game_Battler[_0x58cf34(0x8ef)]['onBattleEndBattleCore']=function(){const _0xe6566b=_0x58cf34;this[_0xe6566b(0x697)]=undefined,this[_0xe6566b(0xbfe)]=undefined;},VisuMZ['BattleCore'][_0x58cf34(0x428)]=Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xb8b)],Game_Battler[_0x58cf34(0x8ef)]['performActionStart']=function(_0x3876fa){const _0x1c6283=_0x58cf34;VisuMZ[_0x1c6283(0xa6b)]['Game_Battler_performActionStart'][_0x1c6283(0x9a4)](this,_0x3876fa);if(!_0x3876fa[_0x1c6283(0x6a3)]()){const _0xe649e7=this[_0x1c6283(0x399)]();_0xe649e7&&_0xe649e7[_0x1c6283(0xa7a)]();}this[_0x1c6283(0x8b5)](![]);},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xa87)]=function(){const _0x1fd4e7=_0x58cf34;this[_0x1fd4e7(0xb13)]=undefined;const _0x115727=this[_0x1fd4e7(0xcba)];this[_0x1fd4e7(0xcba)]=![];if(BattleManager['isActiveTpb']()&&this[_0x1fd4e7(0x9b1)]()){const _0x33c113=this[_0x1fd4e7(0x399)]();if(_0x33c113&&_0x115727)_0x33c113[_0x1fd4e7(0xa7a)]();return;}const _0x1cdaaa=this['battler']();if(_0x1cdaaa)_0x1cdaaa['stepBack']();this[_0x1fd4e7(0x8b5)](![]),this[_0x1fd4e7(0x4cf)]();},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x61b)]=function(_0x4eb059){const _0x240cbb=_0x58cf34;if(_0x4eb059[_0x240cbb(0xaf9)]())this[_0x240cbb(0xcc0)]();else{if(_0x4eb059[_0x240cbb(0x6a3)]())this[_0x240cbb(0x780)]('guard');else{if(_0x4eb059[_0x240cbb(0x4fc)]())this[_0x240cbb(0x780)](_0x240cbb(0x2c8));else{if(_0x4eb059[_0x240cbb(0xcad)]())[0x1,0x2,0x5,0x6][_0x240cbb(0x375)](_0x4eb059[_0x240cbb(0xb8a)]()[_0x240cbb(0xacd)][_0x240cbb(0x83c)])?this[_0x240cbb(0xcc0)]():this[_0x240cbb(0x780)]('skill');else _0x4eb059[_0x240cbb(0x6b9)]()&&this[_0x240cbb(0x780)](_0x240cbb(0xb8a));}}}},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x3a9)]=function(){const _0x164f25=_0x58cf34;return $dataSystem[_0x164f25(0x98b)][0x0];},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x5c0)]=function(){const _0x314dfd=_0x58cf34,_0x251924=this['getAttackMotion']();return _0x251924?_0x251924[_0x314dfd(0x74d)]:0x0;},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x646)]=function(_0x58fc5f){const _0x1ae15f=_0x58cf34;if(!$gameSystem[_0x1ae15f(0xc41)]())return;const _0x540006=this[_0x1ae15f(0x399)](),_0x47b19c=_0x58fc5f['battler']();if(!_0x540006||!_0x47b19c)return;const _0x518d5d=_0x47b19c[_0x1ae15f(0xc19)],_0x16c646=_0x47b19c[_0x1ae15f(0xa73)];this[_0x1ae15f(0x749)](_0x518d5d,_0x16c646,0x0,![],_0x1ae15f(0x7e6),-0x1),_0x540006[_0x1ae15f(0x2a5)]();const _0x52ec29=VisuMZ[_0x1ae15f(0xa6b)][_0x1ae15f(0xb05)]['ActionSequence'];let _0x38e44d=(_0x47b19c[_0x1ae15f(0xc78)]+_0x540006['width'])/0x2;_0x38e44d*=this[_0x1ae15f(0x40c)]()?0x1:-0x1;let _0x5ece9a=_0x52ec29[_0x1ae15f(0x9b6)]*(this['isActor']()?0x1:-0x1);_0x58fc5f[_0x1ae15f(0xaa9)](_0x38e44d,_0x5ece9a,0x0,![],_0x1ae15f(0x7e6)),_0x47b19c['updatePosition']();},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x780)]=function(_0x4e8e69){const _0x1011d5=_0x58cf34;if(SceneManager[_0x1011d5(0x3d3)]()){const _0x302204=this[_0x1011d5(0x399)]();_0x302204&&(_0x302204[_0x1011d5(0x80a)](_0x4e8e69),[_0x1011d5(0xca6),_0x1011d5(0xce1),_0x1011d5(0xa6f)]['includes'](_0x4e8e69)&&this[_0x1011d5(0xb18)]());}this[_0x1011d5(0xb94)]();},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xb18)]=function(){},Game_Battler['prototype'][_0x58cf34(0xbec)]=function(_0x22f56a){const _0x446509=_0x58cf34;if(SceneManager[_0x446509(0x3d3)]()){const _0x39a837=this[_0x446509(0x399)]();if(_0x39a837)_0x39a837[_0x446509(0x786)](_0x22f56a);}},Game_Battler[_0x58cf34(0x8ef)]['startAttackWeaponAnimation']=function(){const _0xe7b29=_0x58cf34;if(SceneManager[_0xe7b29(0x3d3)]()){const _0x86720a=this[_0xe7b29(0x5c0)]();this[_0xe7b29(0xbec)](_0x86720a);}},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x52a)]=function(_0x77bc03,_0x2e67b4){const _0x324f3c=_0x58cf34;if(!_0x77bc03)return;if(!_0x77bc03[_0x324f3c(0xb8a)]())return;if(_0x77bc03['isAttack']())return;if(_0x77bc03[_0x324f3c(0x6a3)]())return;if(_0x77bc03['isItem']())return;if($gameTemp['_playTestFastMode'])return;let _0x11b098=0x0;const _0x1a291a=VisuMZ['BattleCore'][_0x324f3c(0xb05)][_0x324f3c(0x3f0)],_0x1431d1=_0x77bc03[_0x324f3c(0xb8a)]()[_0x324f3c(0x841)];if(_0x1431d1['match'](/<CAST ANIMATION: (\d+)>/i))_0x11b098=Number(RegExp['$1']);else{if(_0x1431d1[_0x324f3c(0xcbb)](/<NO CAST ANIMATION>/i))return;else{if(_0x77bc03[_0x324f3c(0x3dd)]())_0x11b098=_0x1a291a[_0x324f3c(0x24c)];else{if(_0x77bc03[_0x324f3c(0x467)]())_0x11b098=_0x1a291a[_0x324f3c(0x641)];else _0x77bc03[_0x324f3c(0x4fc)]()&&(_0x11b098=_0x1a291a[_0x324f3c(0x6dc)]);}}}_0x11b098>0x0&&$gameTemp['requestAnimation']([this],_0x11b098,!!_0x2e67b4);},Game_Battler[_0x58cf34(0x8ef)]['performReflection']=function(){const _0x214a12=_0x58cf34;SoundManager[_0x214a12(0xc61)]();let _0x5a64c8=VisuMZ[_0x214a12(0xa6b)]['Settings'][_0x214a12(0x3f0)]['ReflectAnimation'];_0x5a64c8>0x0&&(Imported['VisuMZ_0_CoreEngine']?$gameTemp['requestFauxAnimation']([this],_0x5a64c8):$gameTemp[_0x214a12(0x30d)]([this],_0x5a64c8));},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x6a1)]=function(){const _0x50d796=_0x58cf34;if(!$gameSystem[_0x50d796(0xc41)]())return![];if(!BattleManager[_0x50d796(0x1d9)]())return![];if(!this[_0x50d796(0x328)]())return![];if(this[_0x50d796(0x9b1)]())return!![];if(this[_0x50d796(0xa13)]())return!![];if(this['_tpbChargeTime']>=0x1)return!![];return![];},VisuMZ[_0x58cf34(0xa6b)]['Game_Battler_performDamage']=Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xc70)],Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xc70)]=function(){const _0x12bf90=_0x58cf34;this[_0x12bf90(0x6a1)]()&&(this[_0x12bf90(0xb13)]=!![]),VisuMZ[_0x12bf90(0xa6b)][_0x12bf90(0x351)]['call'](this),this[_0x12bf90(0x628)](),this['performShakeFlinch']();},VisuMZ['BattleCore']['Game_Battler_performMiss']=Game_Battler[_0x58cf34(0x8ef)]['performMiss'],Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xaef)]=function(){const _0xe90b61=_0x58cf34;this[_0xe90b61(0x6a1)]()&&(this[_0xe90b61(0xb13)]=!![]),VisuMZ[_0xe90b61(0xa6b)][_0xe90b61(0x69f)][_0xe90b61(0x9a4)](this),this['performFlinch']();},VisuMZ[_0x58cf34(0xa6b)]['Game_Battler_performEvasion']=Game_Battler['prototype'][_0x58cf34(0x398)],Game_Battler['prototype'][_0x58cf34(0x398)]=function(){const _0x79836d=_0x58cf34;this[_0x79836d(0x6a1)]()&&(this[_0x79836d(0xb13)]=!![]),VisuMZ['BattleCore'][_0x79836d(0x8f1)]['call'](this),this['performFlinch']();},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x628)]=function(){const _0x103219=_0x58cf34;if(!$gameSystem[_0x103219(0xc41)]())return;if(this[_0x103219(0xcba)])return;this[_0x103219(0xcba)]=!![];const _0x180c32=this[_0x103219(0x399)]();if(_0x180c32)_0x180c32[_0x103219(0x995)]();},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xaf3)]=function(){const _0x46899e=_0x58cf34;if(!this[_0x46899e(0x99f)]())return;const _0x630882=VisuMZ[_0x46899e(0xa6b)][_0x46899e(0xb05)]['Actor'];if(!(_0x630882[_0x46899e(0x948)]??![]))return;if(this[_0x46899e(0xa81)]<=0x0)return;const _0x269552=this[_0x46899e(0x399)]();if(_0x269552){const _0xae5d02=this[_0x46899e(0xa81)],_0x5655fb=(_0xae5d02/this[_0x46899e(0xa45)])[_0x46899e(0xaa5)](0.8,0x1),_0x1bf31a=_0x630882[_0x46899e(0xb1b)]??0x30,_0x38b705=_0x5655fb*_0x1bf31a;_0x269552[_0x46899e(0x4d4)](_0x38b705,_0x5655fb);}},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x4cf)]=function(){const _0x136745=_0x58cf34;if(this[_0x136745(0xc87)]()&&this[_0x136745(0x833)]!==_0x136745(0x975)){this[_0x136745(0x780)](_0x136745(0x975));return;}if(this[_0x136745(0xc87)]()&&this[_0x136745(0x833)]===_0x136745(0x975))return;if(!!this['_freezeMotionData'])return;if(this[_0x136745(0x2d8)]()){if(!this[_0x136745(0x552)]()&&this!==BattleManager[_0x136745(0x6f1)]){if(this[_0x136745(0x399)]())this[_0x136745(0x399)]()[_0x136745(0x7d9)]();}this[_0x136745(0xb94)]();return;}if(this[_0x136745(0x833)]==='victory')return;if(this['_motionType']===_0x136745(0x6f3)&&!BattleManager[_0x136745(0x9b1)]())return;if(this[_0x136745(0x833)]==='guard'&&!BattleManager[_0x136745(0x9b1)]())return;this[_0x136745(0x387)]();if(BattleManager[_0x136745(0x1d9)]()&&this===BattleManager['_subject'])return;if(this[_0x136745(0x399)]()&&BattleManager[_0x136745(0x9b1)]()){this[_0x136745(0x399)]()[_0x136745(0x7d9)](),this[_0x136745(0xb94)]();return;}this[_0x136745(0x399)]()&&BattleManager[_0x136745(0x1d9)]()&&this!==BattleManager[_0x136745(0x6f1)]&&this[_0x136745(0x399)]()[_0x136745(0x7d9)]();},Game_Enemy['prototype'][_0x58cf34(0x552)]=function(){const _0xce4c33=_0x58cf34;if(!this[_0xce4c33(0xae1)]())return![];const _0x110085=this[_0xce4c33(0x399)]();if(!_0x110085)return![];const _0x552082=_0x110085[_0xce4c33(0x718)];if(!_0x552082)return![];const _0x2b2881=_0x552082['_motion'];return _0x2b2881&&!_0x2b2881[_0xce4c33(0xabf)];},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x69c)]=function(){return this['_isBattlerFlipped'];},Game_Battler['prototype'][_0x58cf34(0x8b5)]=function(_0x1a4df8){const _0x3427a2=_0x58cf34;if(!$gameSystem['isSideView']())return;this['_isBattlerFlipped']=_0x1a4df8;const _0x2ac71f=this[_0x3427a2(0x399)]();if(_0x2ac71f)_0x2ac71f[_0x3427a2(0x88d)]();},Game_Battler['prototype'][_0x58cf34(0x678)]=function(_0x46554b,_0x3e7e66,_0x33d0d2){const _0x432e15=_0x58cf34;if(!$gameSystem[_0x432e15(0xc41)]())return;const _0x377983=this[_0x432e15(0x399)]();if(!_0x377983)return;if(_0x46554b===_0x377983['_baseX'])return;let _0x10d8cb=![];if(this['isActor']()){if(_0x46554b>_0x377983['_baseX'])_0x10d8cb=!![];if(_0x46554b<_0x377983[_0x432e15(0xc19)])_0x10d8cb=![];}else{if(this[_0x432e15(0x2d8)]()){if(_0x46554b>_0x377983[_0x432e15(0xc19)])_0x10d8cb=![];if(_0x46554b<_0x377983[_0x432e15(0xc19)])_0x10d8cb=!![];}};this[_0x432e15(0x8b5)](_0x33d0d2?!_0x10d8cb:_0x10d8cb),_0x377983['updateFlip']();},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xaa9)]=function(_0xcdea79,_0xe8d90a,_0x20154f,_0x4c174a,_0x4f5e8c){const _0x36e169=_0x58cf34;if(!$gameSystem[_0x36e169(0xc41)]())return;const _0x1effbe=this[_0x36e169(0x399)]();if(!_0x1effbe)return;if(_0x4c174a)this[_0x36e169(0x678)](_0xcdea79+_0x1effbe[_0x36e169(0xc19)],_0xe8d90a+_0x1effbe[_0x36e169(0xa73)],![]);_0xcdea79+=_0x1effbe[_0x36e169(0xc19)]-_0x1effbe['_homeX'],_0xe8d90a+=_0x1effbe['_baseY']-_0x1effbe[_0x36e169(0xb73)],_0x1effbe[_0x36e169(0x634)](_0xcdea79,_0xe8d90a,_0x20154f);if(Imported[_0x36e169(0xaa1)])_0x1effbe[_0x36e169(0xa08)](_0x4f5e8c||_0x36e169(0x7e6));},Game_Battler['prototype'][_0x58cf34(0x749)]=function(_0x4fbdae,_0x2ed348,_0x378a17,_0x19dda8,_0x4e38c0,_0xff34c5){const _0x3ef00e=_0x58cf34;if(!$gameSystem[_0x3ef00e(0xc41)]())return;const _0x3a179e=this[_0x3ef00e(0x399)]();if(!_0x3a179e)return;if(_0x4fbdae===Infinity||_0x2ed348===Infinity)return;if(isNaN(_0x4fbdae)||isNaN(_0x2ed348))return;_0xff34c5=_0xff34c5||0x0;if(_0xff34c5>0x0){if(_0x3a179e[_0x3ef00e(0xc19)]>_0x4fbdae)_0x4fbdae+=_0x3a179e[_0x3ef00e(0xc78)]/0x2+_0xff34c5;if(_0x3a179e[_0x3ef00e(0xc19)]<_0x4fbdae)_0x4fbdae-=_0x3a179e['width']/0x2+_0xff34c5;}if(_0x19dda8)this[_0x3ef00e(0x678)](_0x4fbdae,_0x2ed348,![]);_0x4fbdae-=_0x3a179e[_0x3ef00e(0x43b)],_0x2ed348-=_0x3a179e[_0x3ef00e(0xb73)],_0x3a179e[_0x3ef00e(0x634)](_0x4fbdae,_0x2ed348,_0x378a17);if(Imported[_0x3ef00e(0xaa1)])_0x3a179e['setMoveEasingType'](_0x4e38c0||_0x3ef00e(0x7e6));},Game_Battler[_0x58cf34(0x8ef)]['moveBattlerHomeDistance']=function(_0x2b9a00,_0x3cc91d,_0x44a53c,_0x3463c2,_0x5d1171){const _0x41e805=_0x58cf34;if(!$gameSystem[_0x41e805(0xc41)]())return;const _0x285a08=this[_0x41e805(0x399)]();if(!_0x285a08)return;if(_0x3463c2)this['setBattlerFacePoint'](_0x2b9a00+_0x285a08[_0x41e805(0xc19)],_0x3cc91d+_0x285a08[_0x41e805(0xa73)],![]);_0x2b9a00+=_0x285a08[_0x41e805(0x43b)],_0x3cc91d+=_0x285a08[_0x41e805(0xb73)],_0x285a08['startHomeMove'](_0x2b9a00,_0x3cc91d,_0x44a53c,_0x5d1171),this['_forcedHomeX']=_0x2b9a00,this['_forcedHomeY']=_0x3cc91d;},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x937)]=function(_0x454931,_0x2ad6a0,_0x21049,_0x2f0ff0,_0xc53cff,_0x24867f){const _0x4716de=_0x58cf34;if(!$gameSystem[_0x4716de(0xc41)]())return;const _0x36b54f=this[_0x4716de(0x399)]();if(!_0x36b54f)return;_0x24867f=_0x24867f||0x0;if(_0x24867f>0x0){if(_0x36b54f['_baseX']>_0x454931)_0x454931+=_0x36b54f['width']/0x2+_0x24867f;if(_0x36b54f[_0x4716de(0xc19)]<_0x454931)_0x454931-=_0x36b54f[_0x4716de(0xc78)]/0x2+_0x24867f;}if(_0x2f0ff0)this['setBattlerFacePoint'](_0x454931,_0x2ad6a0,![]);_0x36b54f[_0x4716de(0x77c)](_0x454931,_0x2ad6a0,_0x21049,_0xc53cff),this[_0x4716de(0x697)]=_0x454931,this['_forcedHomeY']=_0x2ad6a0;},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x48c)]=function(_0xe05f50,_0x4b6fa3,_0x841e07){const _0x337da0=_0x58cf34;if(!$gameSystem[_0x337da0(0xc41)]())return;const _0x1f74f1=this[_0x337da0(0x399)]();if(!_0x1f74f1)return;_0x1f74f1[_0x337da0(0x597)](_0xe05f50,_0x4b6fa3,_0x841e07);},Game_Battler['prototype'][_0x58cf34(0x344)]=function(_0x38b189,_0x552f5b){const _0x544875=_0x58cf34;if(!$gameSystem[_0x544875(0xc41)]())return;const _0x5aee2f=this[_0x544875(0x399)]();if(!_0x5aee2f)return;_0x5aee2f[_0x544875(0x7ef)](_0x38b189,_0x552f5b);},Game_Battler['prototype'][_0x58cf34(0x30c)]=function(_0x5dd2c4,_0x14aeec,_0xb88aba,_0x5817cc){const _0x330de4=_0x58cf34;if(!$gameSystem[_0x330de4(0xc41)]())return;const _0x28a592=this['battler']();if(!_0x28a592)return;_0x28a592[_0x330de4(0xb6a)](_0x5dd2c4,_0x14aeec,_0xb88aba,_0x5817cc);},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x76c)]=function(_0x6538f,_0x57f683,_0x433975,_0x4e74a0){const _0x3453ae=_0x58cf34;if(!$gameSystem['isSideView']())return;const _0x458175=this[_0x3453ae(0x399)]();if(!_0x458175)return;this['isActor']()&&(_0x6538f*=-0x1,_0x57f683*=-0x1),_0x458175[_0x3453ae(0x627)](_0x6538f,_0x57f683,_0x433975,_0x4e74a0);},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x5ad)]=function(_0x418a01,_0x64d3cc,_0x63c241,_0x2897cb){const _0xf413c9=_0x58cf34;if(!$gameSystem[_0xf413c9(0xc41)]())return;const _0x1ab8a5=this[_0xf413c9(0x399)]();if(!_0x1ab8a5)return;_0x1ab8a5['startGrow'](_0x418a01,_0x64d3cc,_0x63c241,_0x2897cb);},Game_Battler['prototype'][_0x58cf34(0x4f8)]=function(_0x31acbd,_0x2d9b0e,_0x18cc21){const _0x521169=_0x58cf34;if(!$gameSystem[_0x521169(0xc41)]())return;const _0x45897c=this[_0x521169(0x399)]();if(!_0x45897c)return;_0x45897c[_0x521169(0x36e)](_0x31acbd,_0x2d9b0e,_0x18cc21);},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xb94)]=function(){const _0x2dd4c3=_0x58cf34,_0x13b615=!!this[_0x2dd4c3(0x9b5)];this[_0x2dd4c3(0x9b5)]=undefined,_0x13b615&&(this[_0x2dd4c3(0x4cf)](),this['clearFreezeMotionForWeapons']());},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x6fd)]=function(){const _0x21e31f=_0x58cf34;if(!SceneManager[_0x21e31f(0x3d3)]())return;const _0x196d2b=this[_0x21e31f(0x399)]();if(!_0x196d2b)return;let _0x11f966=this[_0x21e31f(0x40c)]()?_0x196d2b[_0x21e31f(0x9d4)]:_0x196d2b[_0x21e31f(0x718)][_0x21e31f(0x9d4)];_0x11f966&&_0x11f966[_0x21e31f(0x6e1)](0x0);},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xb26)]=function(_0x4e8c5b,_0x161ca1,_0xc5000d){const _0x5ec2e7=_0x58cf34;if(this[_0x5ec2e7(0x2d8)]()&&!this[_0x5ec2e7(0xae1)]())return;let _0x9ed07b=0x0,_0x52d07b=0x0;_0x4e8c5b[_0x5ec2e7(0xcbb)](/ATTACK[ ](\d+)/i)&&(_0x52d07b=Number(RegExp['$1']),_0x52d07b--);if(this[_0x5ec2e7(0x40c)]()){const _0x21c481=this[_0x5ec2e7(0x981)]();_0x9ed07b=_0x21c481[_0x52d07b]?_0x21c481[_0x52d07b][_0x5ec2e7(0x8e1)]:0x0;}else this[_0x5ec2e7(0x2d8)]()&&(_0x9ed07b=this['svBattlerData']()[_0x5ec2e7(0x8e1)]||0x0);const _0x581319=$dataSystem[_0x5ec2e7(0x98b)][_0x9ed07b];_0x4e8c5b[_0x5ec2e7(0xcbb)](/attack/i)&&(_0x4e8c5b=[_0x5ec2e7(0xce1),_0x5ec2e7(0xca6),_0x5ec2e7(0xa6f)][_0x581319['type']]||'swing'),this['_freezeMotionData']={'motionType':_0x4e8c5b,'weaponImageId':_0x161ca1?_0x581319[_0x5ec2e7(0x74d)]:0x0,'pattern':_0xc5000d};},Game_Battler['prototype'][_0x58cf34(0x9de)]=function(_0x40f18e){const _0x289034=_0x58cf34;if(!_0x40f18e)return![];return _0x40f18e[_0x289034(0x8d8)]()===this[_0x289034(0x8d8)]();},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x377)]=function(_0x48cf5e){const _0x22cb19=_0x58cf34;if(!_0x48cf5e)return![];return _0x48cf5e[_0x22cb19(0x907)]()===this[_0x22cb19(0x8d8)]();},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x4aa)]=function(){return![];},Game_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x4aa)]=function(){const _0x20059e=_0x58cf34;return this[_0x20059e(0xb49)]()[_0x20059e(0xcbb)](/\$/i);},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x4aa)]=function(){const _0x47822e=_0x58cf34;return this['hasSvBattler']()&&this[_0x47822e(0x410)]()['match'](/\$/i);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x573)]=Game_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x6e1)],Game_Actor[_0x58cf34(0x8ef)]['setup']=function(_0xc4638a){const _0x3880c4=_0x58cf34;VisuMZ['BattleCore'][_0x3880c4(0x573)][_0x3880c4(0x9a4)](this,_0xc4638a),this['initBattlePortrait']();},Game_Actor[_0x58cf34(0x8ef)][_0x58cf34(0xcc9)]=function(){const _0x880df4=_0x58cf34;this['_battlePortrait']='',this[_0x880df4(0x2fd)]()&&this[_0x880df4(0x2fd)]()[_0x880df4(0x841)][_0x880df4(0xcbb)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=String(RegExp['$1']));},Game_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x990)]=function(){const _0x44f956=_0x58cf34;if(this[_0x44f956(0x2f4)]()!=='')return this[_0x44f956(0x2f4)]();else{if(Imported[_0x44f956(0x3ab)]&&this['getMenuImage']()!=='')return this[_0x44f956(0x66f)]();}return'';},Game_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x2f4)]=function(){const _0x2c8d83=_0x58cf34;if(this[_0x2c8d83(0xb98)]===undefined)this[_0x2c8d83(0xcc9)]();return this[_0x2c8d83(0xb98)];},Game_Actor[_0x58cf34(0x8ef)]['setBattlePortrait']=function(_0x220c0c){const _0x586087=_0x58cf34;if(this['_battlePortrait']===undefined)this[_0x586087(0xcc9)]();this[_0x586087(0xb98)]=_0x220c0c;if(SceneManager[_0x586087(0x3d3)]()&&$gameParty['battleMembers']()[_0x586087(0x375)](this)){const _0xd1a992=SceneManager[_0x586087(0xb85)][_0x586087(0x4f1)];_0xd1a992&&_0xd1a992['refreshActorPortrait'](this);}},Game_Actor[_0x58cf34(0x8ef)]['isSpriteVisible']=function(){return!![];},Game_Actor[_0x58cf34(0x8ef)]['isAutoBattle']=function(){const _0x4f0cb5=_0x58cf34;if(!this[_0x4f0cb5(0xb7c)]()&&BattleManager[_0x4f0cb5(0x7d4)])return!![];return Game_Battler['prototype'][_0x4f0cb5(0x5a6)][_0x4f0cb5(0x9a4)](this);},VisuMZ['BattleCore'][_0x58cf34(0xc11)]=Game_Actor[_0x58cf34(0x8ef)]['makeActionList'],Game_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x549)]=function(){const _0x485d3c=_0x58cf34;if(BattleManager['_autoBattle']&&!ConfigManager[_0x485d3c(0x471)])return this[_0x485d3c(0x76e)]();else{return VisuMZ[_0x485d3c(0xa6b)][_0x485d3c(0xc11)][_0x485d3c(0x9a4)](this);;}},Game_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x76e)]=function(){const _0x180698=_0x58cf34,_0x2500d0=[],_0x3a091b=new Game_Action(this);return _0x3a091b['setAttack'](),_0x2500d0[_0x180698(0x6db)](_0x3a091b),_0x2500d0;},Game_Actor[_0x58cf34(0x8ef)]['battleCommands']=function(){const _0x5e0065=_0x58cf34;return this[_0x5e0065(0x855)]()[_0x5e0065(0x841)][_0x5e0065(0xcbb)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x5e0065(0x69d)](/[\r\n]+/):VisuMZ['BattleCore']['Settings'][_0x5e0065(0x226)][_0x5e0065(0xa29)];},Game_Actor[_0x58cf34(0x8ef)][_0x58cf34(0xa23)]=function(){const _0x599967=_0x58cf34;if(this['_cache'][_0x599967(0x276)]!==undefined)return this[_0x599967(0x78f)]['svAnchorX'];return this['actor']()[_0x599967(0x841)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x599967(0x78f)][_0x599967(0x276)]=eval(RegExp['$1']),this[_0x599967(0x78f)][_0x599967(0x894)]=eval(RegExp['$2'])):this['_cache'][_0x599967(0x276)]=Game_Battler[_0x599967(0x8ef)][_0x599967(0xa23)][_0x599967(0x9a4)](this),this[_0x599967(0x78f)][_0x599967(0x276)];},Game_Actor['prototype'][_0x58cf34(0x775)]=function(){const _0x10a6c5=_0x58cf34;if(this[_0x10a6c5(0x78f)]['svAnchorY']!==undefined)return this[_0x10a6c5(0x78f)][_0x10a6c5(0x894)];return this[_0x10a6c5(0x2fd)]()['note'][_0x10a6c5(0xcbb)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x10a6c5(0x78f)]['svAnchorX']=eval(RegExp['$1']),this['_cache'][_0x10a6c5(0x894)]=eval(RegExp['$2'])):this[_0x10a6c5(0x78f)][_0x10a6c5(0x894)]=Game_Battler['prototype']['svBattlerAnchorY'][_0x10a6c5(0x9a4)](this),this['_cache'][_0x10a6c5(0x894)];},Game_Actor[_0x58cf34(0x8ef)][_0x58cf34(0xadd)]=function(){const _0x43233f=_0x58cf34;if(this[_0x43233f(0x78f)][_0x43233f(0x2fe)]!==undefined)return this[_0x43233f(0x78f)][_0x43233f(0x2fe)];if(this['actor']()['note'][_0x43233f(0xcbb)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x43233f(0x78f)][_0x43233f(0x2fe)]=!![];else this[_0x43233f(0x2fd)]()[_0x43233f(0x841)][_0x43233f(0xcbb)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x43233f(0x78f)][_0x43233f(0x2fe)]=![]:this[_0x43233f(0x78f)][_0x43233f(0x2fe)]=Game_Battler[_0x43233f(0x8ef)][_0x43233f(0xadd)][_0x43233f(0x9a4)](this);return this[_0x43233f(0x78f)][_0x43233f(0x2fe)];},Game_Actor[_0x58cf34(0x8ef)][_0x58cf34(0xa76)]=function(){const _0x4ae500=_0x58cf34;return VisuMZ['BattleCore'][_0x4ae500(0xb05)][_0x4ae500(0xb3d)][_0x4ae500(0x27e)];},Game_Actor['prototype']['performWeaponAnimation']=function(){const _0x4b710a=_0x58cf34,_0x2e8c87=this[_0x4b710a(0x981)](),_0x55379f=_0x2e8c87[0x0]?_0x2e8c87[0x0][_0x4b710a(0x8e1)]:0x0,_0x4009af=$dataSystem[_0x4b710a(0x98b)][_0x55379f];_0x4009af&&this[_0x4b710a(0xbec)](_0x4009af[_0x4b710a(0x74d)]);},Game_Actor['prototype'][_0x58cf34(0xad8)]=function(_0x402e7d){const _0x37c112=_0x58cf34;Game_Battler['prototype']['performAction']['call'](this,_0x402e7d),this[_0x37c112(0x61b)](_0x402e7d);},Game_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x3a9)]=function(){const _0x2c1977=_0x58cf34,_0x3a0807=this[_0x2c1977(0x981)](),_0xe1a649=_0x3a0807[0x0]?_0x3a0807[0x0]['wtypeId']:0x0;return $dataSystem['attackMotions'][_0xe1a649];},Game_Actor[_0x58cf34(0x8ef)][_0x58cf34(0xc86)]=function(_0x457480){const _0x1d3f9b=_0x58cf34;_0x457480=_0x457480||0x1,_0x457480--;const _0x2d32c1=this[_0x1d3f9b(0x981)]();return _0x2d32c1[_0x457480]?_0x2d32c1[_0x457480]['animationId']:0x0;},Game_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x47f)]=function(_0x27c52e){const _0x2c0748=_0x58cf34;_0x27c52e=_0x27c52e||0x1,_0x27c52e--;const _0x3f609c=this[_0x2c0748(0x981)](),_0x510499=_0x3f609c[_0x27c52e]?_0x3f609c[_0x27c52e][_0x2c0748(0x8e1)]:0x0;return $dataSystem[_0x2c0748(0x98b)][_0x510499];},Game_Actor[_0x58cf34(0x8ef)]['performAttackSlot']=function(_0x17b32e){const _0xe54cda=_0x58cf34;_0x17b32e=_0x17b32e||0x1,_0x17b32e--;const _0x25a43e=this[_0xe54cda(0x981)](),_0x31f09a=_0x25a43e[_0x17b32e]?_0x25a43e[_0x17b32e][_0xe54cda(0x8e1)]:0x0,_0x4b75f9=$dataSystem[_0xe54cda(0x98b)][_0x31f09a];if(_0x4b75f9){if(_0x4b75f9[_0xe54cda(0x83c)]===0x0)this[_0xe54cda(0x780)]('thrust');else{if(_0x4b75f9[_0xe54cda(0x83c)]===0x1)this['requestMotion'](_0xe54cda(0xca6));else _0x4b75f9[_0xe54cda(0x83c)]===0x2&&this['requestMotion'](_0xe54cda(0xa6f));}this['startWeaponAnimation'](_0x4b75f9[_0xe54cda(0x74d)]);}},Game_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x39a)]=function(_0x27a4e7){const _0x922cf6=_0x58cf34;if(this[_0x922cf6(0x40c)]()){const _0x3c85bd=this[_0x922cf6(0x981)]();if(_0x3c85bd[_0x922cf6(0x3eb)]>0x0){const _0x56ed77=_0x3c85bd[_0x27a4e7];if(_0x56ed77)_0x27a4e7=this['equips']()[_0x922cf6(0xccf)](_0x56ed77);}}this[_0x922cf6(0x3fa)]=_0x27a4e7||0x0,this[_0x922cf6(0x78f)]={};},Game_Battler[_0x58cf34(0x8ef)]['nextActiveWeaponSlot']=function(){const _0x191503=_0x58cf34;this[_0x191503(0x3fa)]=this[_0x191503(0x3fa)]||0x0,this[_0x191503(0x3fa)]++,this['_cache']={};},Game_Battler[_0x58cf34(0x8ef)]['clearActiveWeaponSlot']=function(){const _0x2c5888=_0x58cf34;this[_0x2c5888(0x3fa)]=undefined,this[_0x2c5888(0x78f)]={};},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x878)]=Game_Actor[_0x58cf34(0x8ef)]['equips'],Game_Actor[_0x58cf34(0x8ef)][_0x58cf34(0xc6d)]=function(){const _0xd5a3c5=_0x58cf34;let _0xd9e5ef=VisuMZ[_0xd5a3c5(0xa6b)][_0xd5a3c5(0x878)][_0xd5a3c5(0x9a4)](this);if(this['_tempEquipCheck'])return _0xd9e5ef;if(this[_0xd5a3c5(0x3fa)]!==undefined){this[_0xd5a3c5(0x2a1)]=!![];const _0x340e19=this['equipSlots']();for(let _0x1d2fae=0x0;_0x1d2fae<_0x340e19['length'];_0x1d2fae++){_0x340e19[_0x1d2fae]===0x1&&this['_activeWeaponSlot']!==_0x1d2fae&&(_0xd9e5ef[_0x1d2fae]=null);}this['_tempEquipCheck']=undefined;}return _0xd9e5ef;},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x5c7)]=function(_0x3d400d){const _0x3ae532=_0x58cf34;return _0x3d400d['isActor']()?_0x3d400d[_0x3ae532(0x981)]()['length']||0x1:0x1;},Window_BattleLog[_0x58cf34(0x8ef)]['setActiveWeaponSet']=function(_0x21e7b5,_0x103327){const _0x41cdd8=_0x58cf34;_0x21e7b5&&_0x21e7b5['isActor']()&&_0x21e7b5[_0x41cdd8(0x39a)](_0x103327),this[_0x41cdd8(0x36d)]();},Window_BattleLog[_0x58cf34(0x8ef)]['clearActiveWeaponSet']=function(_0x591821){const _0x5e0cdc=_0x58cf34;_0x591821&&_0x591821[_0x5e0cdc(0x40c)]()&&_0x591821[_0x5e0cdc(0xa35)](),this['callNextMethod']();},Game_Actor[_0x58cf34(0x8ef)]['battleUIOffsetX']=function(){const _0x1bbc68=_0x58cf34;let _0x2ccaf5=_0x1bbc68(0x58e);if(this[_0x1bbc68(0x1c4)](_0x2ccaf5))return this[_0x1bbc68(0x78f)][_0x2ccaf5];return this[_0x1bbc68(0x78f)][_0x2ccaf5]=this['createBattleUIOffsetX'](this['actor']()),this[_0x1bbc68(0x78f)][_0x2ccaf5];},Game_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x893)]=function(){const _0xfbbf9d=_0x58cf34;let _0x250e7b=_0xfbbf9d(0x893);if(this[_0xfbbf9d(0x1c4)](_0x250e7b))return this[_0xfbbf9d(0x78f)][_0x250e7b];return this[_0xfbbf9d(0x78f)][_0x250e7b]=this[_0xfbbf9d(0x268)](this[_0xfbbf9d(0x2fd)]()),this[_0xfbbf9d(0x78f)][_0x250e7b];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb99)]=Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x6e1)],Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x6e1)]=function(_0xa4cf5b,_0x1db1f5,_0x1d6f98){const _0x133ddd=_0x58cf34;_0xa4cf5b=DataManager[_0x133ddd(0x5d7)](_0xa4cf5b),VisuMZ[_0x133ddd(0xa6b)][_0x133ddd(0xb99)]['call'](this,_0xa4cf5b,_0x1db1f5,_0x1d6f98),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x133ddd(0xabe)](),this['clearBattleCoreData'](),this['setupBattleCoreData'](),this['setupBattleCoreAspects'](),Imported[_0x133ddd(0x5ce)]&&this[_0x133ddd(0x275)]();},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0xa60)]=function(){const _0x4c6bcf=_0x58cf34,_0x1745a4=VisuMZ[_0x4c6bcf(0xa6b)][_0x4c6bcf(0xb05)][_0x4c6bcf(0x48b)];this[_0x4c6bcf(0xc9d)]=_0x1745a4['AttackAnimation'],this[_0x4c6bcf(0x7b8)]={},this[_0x4c6bcf(0x761)]();},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x6fa)]=function(){const _0x5ecea1=_0x58cf34,_0x5bed24=VisuMZ['BattleCore'][_0x5ecea1(0xb05)][_0x5ecea1(0x48b)],_0x2a1c82=this[_0x5ecea1(0xc20)]()[_0x5ecea1(0x841)];this[_0x5ecea1(0x7b8)]={'name':'','wtypeId':_0x5bed24[_0x5ecea1(0x99d)],'collapse':_0x5bed24[_0x5ecea1(0xc3d)],'motionIdle':_0x5bed24[_0x5ecea1(0x524)],'width':_0x5bed24[_0x5ecea1(0x4c3)]||0x40,'height':_0x5bed24[_0x5ecea1(0x5d1)]||0x40,'anchorX':_0x5bed24[_0x5ecea1(0x8a0)]||0x0,'anchorY':_0x5bed24[_0x5ecea1(0x349)]||0x0,'shadow':_0x5bed24[_0x5ecea1(0x283)]};_0x2a1c82[_0x5ecea1(0xcbb)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x5ecea1(0xc9d)]=Number(RegExp['$1']));const _0x451aa9=this[_0x5ecea1(0x7b8)];if(_0x2a1c82[_0x5ecea1(0xcbb)](/<SIDEVIEW BATTLER: (.*)>/i))_0x451aa9[_0x5ecea1(0xc22)]=String(RegExp['$1']);else{if(_0x2a1c82[_0x5ecea1(0xcbb)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x52d2b2=String(RegExp['$1'])['split'](/[\r\n]+/)['remove']('');_0x451aa9[_0x5ecea1(0xc22)]=DataManager['processRandomizedData'](_0x52d2b2);}}_0x2a1c82[_0x5ecea1(0xcbb)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x451aa9[_0x5ecea1(0xca0)]=eval(RegExp['$1']),_0x451aa9[_0x5ecea1(0x633)]=eval(RegExp['$2']));if(_0x2a1c82['match'](/<SIDEVIEW COLLAPSE>/i))_0x451aa9[_0x5ecea1(0xc65)]=!![];else _0x2a1c82[_0x5ecea1(0xcbb)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x451aa9['collapse']=![]);if(_0x2a1c82[_0x5ecea1(0xcbb)](/<SIDEVIEW SHOW SHADOW>/i))_0x451aa9[_0x5ecea1(0x6ef)]=!![];else _0x2a1c82[_0x5ecea1(0xcbb)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x451aa9['shadow']=![]);if(_0x2a1c82['match'](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x451aa9[_0x5ecea1(0x496)]=String(RegExp['$1'])[_0x5ecea1(0x5b9)]()[_0x5ecea1(0x989)]();else{if(_0x2a1c82[_0x5ecea1(0xcbb)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x4f309c=String(RegExp['$1'])[_0x5ecea1(0x69d)](/[\r\n]+/)[_0x5ecea1(0x61f)]('');_0x451aa9[_0x5ecea1(0x496)]=DataManager[_0x5ecea1(0xac0)](_0x4f309c);}}_0x2a1c82[_0x5ecea1(0xcbb)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x451aa9['width']=Number(RegExp['$1']),_0x451aa9[_0x5ecea1(0x725)]=Number(RegExp['$2']));if(_0x2a1c82[_0x5ecea1(0xcbb)](/<SIDEVIEW WEAPON: (.*)>/i))_0x451aa9[_0x5ecea1(0x8e1)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x2a1c82[_0x5ecea1(0xcbb)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x184dc8=String(RegExp['$1'])[_0x5ecea1(0x69d)](/[\r\n]+/)[_0x5ecea1(0x61f)](''),_0x53f253=DataManager[_0x5ecea1(0xac0)](_0x184dc8);_0x451aa9[_0x5ecea1(0x8e1)]=DataManager[_0x5ecea1(0xa5f)](_0x53f253);}}if(Imported['VisuMZ_1_ElementStatusCore']){const _0x4be87=this['getTraitSetKeys']();for(const _0x119e8e of _0x4be87){const _0x299412=this[_0x5ecea1(0x2ac)](_0x119e8e)[_0x5ecea1(0x7c1)][_0x5ecea1(0x6f5)]()[_0x5ecea1(0x989)](),_0x38b5a3=_0x119e8e[_0x5ecea1(0x6f5)]()[_0x5ecea1(0x989)]();if(_0x2a1c82['match'](VisuMZ[_0x5ecea1(0xbd7)][_0x5ecea1(0x32a)][_0x5ecea1(0x935)[_0x5ecea1(0x1d3)](_0x38b5a3,_0x299412)]))_0x451aa9['name']=String(RegExp['$1']);else{if(_0x2a1c82[_0x5ecea1(0xcbb)](VisuMZ[_0x5ecea1(0xbd7)][_0x5ecea1(0x32a)]['SvBattlerMass-%1-%2'[_0x5ecea1(0x1d3)](_0x38b5a3,_0x299412)])){const _0x595922=String(RegExp['$1'])[_0x5ecea1(0x69d)](/[\r\n]+/)[_0x5ecea1(0x61f)]('');_0x451aa9[_0x5ecea1(0xc22)]=DataManager[_0x5ecea1(0xac0)](_0x595922);}}if(_0x2a1c82['match'](VisuMZ[_0x5ecea1(0xbd7)]['RegExp'][_0x5ecea1(0xb50)[_0x5ecea1(0x1d3)](_0x38b5a3,_0x299412)]))_0x451aa9[_0x5ecea1(0x8e1)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x2a1c82[_0x5ecea1(0xcbb)](VisuMZ[_0x5ecea1(0xbd7)][_0x5ecea1(0x32a)]['SvWeaponMass-%1-%2'[_0x5ecea1(0x1d3)](_0x38b5a3,_0x299412)])){const _0x3da70c=String(RegExp['$1'])[_0x5ecea1(0x69d)](/[\r\n]+/)['remove'](''),_0x31bdf6=DataManager['processRandomizedData'](_0x3da70c);_0x451aa9[_0x5ecea1(0x8e1)]=DataManager[_0x5ecea1(0xa5f)](_0x31bdf6);}}if(_0x2a1c82[_0x5ecea1(0xcbb)](VisuMZ[_0x5ecea1(0xbd7)]['RegExp'][_0x5ecea1(0x8aa)['format'](_0x38b5a3,_0x299412)]))_0x451aa9[_0x5ecea1(0x496)]=String(RegExp['$1'])['toLowerCase']()[_0x5ecea1(0x989)]();else{if(_0x2a1c82[_0x5ecea1(0xcbb)](VisuMZ[_0x5ecea1(0xbd7)][_0x5ecea1(0x32a)][_0x5ecea1(0x1ca)['format'](_0x38b5a3,_0x299412)])){const _0x2aaa90=String(RegExp['$1'])[_0x5ecea1(0x69d)](/[\r\n]+/)['remove']('');_0x451aa9[_0x5ecea1(0x496)]=DataManager[_0x5ecea1(0xac0)](_0x2aaa90);}}}}},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0xadf)]=function(){const _0x1bf73c=_0x58cf34;return this[_0x1bf73c(0xc9d)]||0x0;},Game_Enemy[_0x58cf34(0x8ef)]['attackAnimationId2']=function(){const _0x904e39=_0x58cf34;return this[_0x904e39(0xadf)]();},Game_Enemy[_0x58cf34(0x8ef)]['attackAnimationIdSlot']=function(_0x21b2ca){const _0x287304=_0x58cf34;return this[_0x287304(0xadf)]();},Game_Enemy['prototype'][_0x58cf34(0x99f)]=function(){const _0x128edd=_0x58cf34;if(this[_0x128edd(0xc20)]()[_0x128edd(0x841)]['match'](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler['prototype'][_0x128edd(0x99f)][_0x128edd(0x9a4)](this);},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x9f8)]=function(){const _0x96ff8=_0x58cf34;if(this[_0x96ff8(0xc20)]()['note'][_0x96ff8(0xcbb)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x2f1)]=function(){const _0x5ee9ba=_0x58cf34,_0x50a1ca=[];for(const _0x44c44e of this[_0x5ee9ba(0xc20)]()['actions']){const _0x720ae9=$dataSkills[_0x44c44e['skillId']];if(_0x720ae9&&!_0x50a1ca['includes'](_0x720ae9))_0x50a1ca[_0x5ee9ba(0x6db)](_0x720ae9);}return _0x50a1ca;},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x58e)]=function(){const _0x2231e1=_0x58cf34;let _0x4a2be8='battleUIOffsetX';if(this[_0x2231e1(0x1c4)](_0x4a2be8))return this['_cache'][_0x4a2be8];return this[_0x2231e1(0x78f)][_0x4a2be8]=this[_0x2231e1(0x269)](this['enemy']()),this[_0x2231e1(0x78f)][_0x4a2be8];},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x893)]=function(){const _0x1e6094=_0x58cf34;let _0x1b262a=_0x1e6094(0x893);if(this['checkCacheKey'](_0x1b262a))return this[_0x1e6094(0x78f)][_0x1b262a];return this[_0x1e6094(0x78f)][_0x1b262a]=this[_0x1e6094(0x268)](this[_0x1e6094(0xc20)]()),this[_0x1e6094(0x78f)][_0x1b262a];},Game_Enemy['prototype'][_0x58cf34(0x800)]=function(){const _0x52b783=_0x58cf34;if(this[_0x52b783(0x7b8)]!==undefined)return this['_svBattlerData'];return this[_0x52b783(0x6fa)](),this[_0x52b783(0x7b8)];},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0xae1)]=function(){const _0x33576e=_0x58cf34;return this[_0x33576e(0x800)]()[_0x33576e(0xc22)]!=='';},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x410)]=function(){const _0x137c8c=_0x58cf34;return this[_0x137c8c(0x800)]()[_0x137c8c(0xc22)];},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0xa76)]=function(){const _0x5311c9=_0x58cf34;return this[_0x5311c9(0xae1)]()?VisuMZ[_0x5311c9(0xa6b)]['Settings'][_0x5311c9(0xb3d)][_0x5311c9(0x27e)]:VisuMZ['BattleCore'][_0x5311c9(0xb05)]['Enemy'][_0x5311c9(0x27e)];},Game_Enemy['prototype']['performAction']=function(_0x4a134b){const _0x2730cf=_0x58cf34;Game_Battler[_0x2730cf(0x8ef)][_0x2730cf(0xad8)][_0x2730cf(0x9a4)](this,_0x4a134b);if(this[_0x2730cf(0xae1)]())this[_0x2730cf(0x61b)](_0x4a134b);},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0xcc0)]=function(){const _0x2c1cec=_0x58cf34,_0x40a8d1=this[_0x2c1cec(0x800)]()['wtypeId']||0x0,_0x504885=$dataSystem[_0x2c1cec(0x98b)][_0x40a8d1];if(_0x504885){if(_0x504885[_0x2c1cec(0x83c)]===0x0)this['requestMotion'](_0x2c1cec(0xce1));else{if(_0x504885[_0x2c1cec(0x83c)]===0x1)this['requestMotion'](_0x2c1cec(0xca6));else _0x504885['type']===0x2&&this['requestMotion']('missile');}}},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0xb18)]=function(){const _0x5426df=_0x58cf34,_0xc347fd=this[_0x5426df(0x800)]()[_0x5426df(0x8e1)]||0x0,_0x402620=$dataSystem[_0x5426df(0x98b)][_0xc347fd];_0x402620&&this[_0x5426df(0xbec)](_0x402620[_0x5426df(0x74d)]);},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x3a9)]=function(){const _0x399467=_0x58cf34,_0x10fa0c=this['svBattlerData']()['wtypeId']||0x0;return $dataSystem[_0x399467(0x98b)][_0x10fa0c];},Game_Enemy['prototype'][_0x58cf34(0x47f)]=function(_0xd74d6f){return this['getAttackMotion']();},Game_Enemy['prototype'][_0x58cf34(0xc70)]=function(){const _0x2f2b0f=_0x58cf34;Game_Battler['prototype'][_0x2f2b0f(0xc70)][_0x2f2b0f(0x9a4)](this),this['isSpriteVisible']()&&this[_0x2f2b0f(0xae1)]()&&this[_0x2f2b0f(0x780)](_0x2f2b0f(0xacd)),SoundManager[_0x2f2b0f(0x54c)]();},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x398)]=function(){const _0x2b742f=_0x58cf34;Game_Battler['prototype']['performEvasion'][_0x2b742f(0x9a4)](this),this[_0x2b742f(0x780)]('evade');},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x73f)]=function(){const _0x14b16e=_0x58cf34;Game_Battler[_0x14b16e(0x8ef)][_0x14b16e(0x73f)][_0x14b16e(0x9a4)](this),this[_0x14b16e(0x780)](_0x14b16e(0x666));},Game_Enemy['prototype'][_0x58cf34(0xa10)]=function(){const _0x46bc65=_0x58cf34;Game_Battler[_0x46bc65(0x8ef)][_0x46bc65(0xa10)][_0x46bc65(0x9a4)](this),this[_0x46bc65(0xcc0)]();},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x962)]=function(){const _0x32a431=_0x58cf34;if(this['hasSvBattler']()){if(this[_0x32a431(0xcc3)]()>=0x1)return!![];return this[_0x32a431(0x800)]()[_0x32a431(0xc65)];}else return!![];},Game_Enemy[_0x58cf34(0x8ef)]['svBattlerAnchorX']=function(){const _0x5d64f3=_0x58cf34;return this[_0x5d64f3(0x800)]()[_0x5d64f3(0xca0)];},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x775)]=function(){const _0x4959a1=_0x58cf34;return this[_0x4959a1(0x800)]()[_0x4959a1(0x633)];},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0xadd)]=function(){const _0x3bdd08=_0x58cf34;return this[_0x3bdd08(0x800)]()[_0x3bdd08(0x6ef)];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x438)]=Game_Enemy['prototype'][_0x58cf34(0x75a)],Game_Enemy['prototype']['transform']=function(_0x4d08c6){const _0x52d595=_0x58cf34;VisuMZ[_0x52d595(0xa6b)][_0x52d595(0x438)][_0x52d595(0x9a4)](this,_0x4d08c6),this[_0x52d595(0xa60)](),this[_0x52d595(0x6fa)]();const _0x5a3c4f=this[_0x52d595(0x399)]();_0x5a3c4f&&(_0x5a3c4f['_battlerName']=undefined,_0x5a3c4f['setBattler'](this));},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x761)]=function(){const _0x3154de=_0x58cf34,_0x414c14=VisuMZ[_0x3154de(0xa6b)][_0x3154de(0xb05)][_0x3154de(0x48b)];this[_0x3154de(0x7bc)]=_0x414c14[_0x3154de(0x67b)]??0x0;},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0xad9)]=function(){const _0x3c90b1=_0x58cf34;return this[_0x3c90b1(0x7bc)]&&this['_nameTempVisibleDuration']>0x0;},Game_Enemy['prototype'][_0x58cf34(0x743)]=function(){const _0xba085b=_0x58cf34;this[_0xba085b(0x7bc)]&&this[_0xba085b(0x7bc)]>0x0&&this[_0xba085b(0x7bc)]--;},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x859)]=function(){const _0x56794d=_0x58cf34;this[_0x56794d(0x7bc)]=0x0;},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x317)]=function(){const _0x4dbadb=_0x58cf34;this[_0x4dbadb(0x2f2)]();const _0x4fd207=this[_0x4dbadb(0xc20)]()[_0x4dbadb(0x841)]||'';if(_0x4fd207[_0x4dbadb(0xcbb)](/<ASPECT NAME:[ ](.*)>/i)){const _0x5c74b6=String(RegExp['$1']);this[_0x4dbadb(0x803)]()[_0x4dbadb(0xc22)]=_0x5c74b6['format'](this['originalName']());}_0x4fd207[_0x4dbadb(0xcbb)](/<ASPECT ICON:[ ](\d+)>/i)&&(this['getAspectData']()[_0x4dbadb(0x899)]=Number(RegExp['$1'])),_0x4fd207[_0x4dbadb(0xcbb)](/<ASPECT COLOR:[ ](.*)>/i)&&(this[_0x4dbadb(0x803)]()['nameColor']=String(RegExp['$1'])),_0x4fd207[_0x4dbadb(0xcbb)](/<ASPECT DESCRIPTION>\s*([\s\S]*)\s*<\/ASPECT DESCRIPTION>/i)&&(this[_0x4dbadb(0x803)]()[_0x4dbadb(0x3c2)]=String(RegExp['$1']));},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x2f2)]=function(){const _0x23c78e=_0x58cf34,_0x18778a=VisuMZ[_0x23c78e(0xa6b)]['Settings']['Enemy']['AspectNameFmt']??_0x23c78e(0xbdf);this['_aspectData']={'name':_0x18778a[_0x23c78e(0x1d3)](this[_0x23c78e(0x3ae)]()),'iconIndex':VisuMZ[_0x23c78e(0xa6b)][_0x23c78e(0xb05)][_0x23c78e(0x48b)][_0x23c78e(0xab8)]??0x1a,'nameColor':VisuMZ[_0x23c78e(0xa6b)][_0x23c78e(0xb05)]['Enemy'][_0x23c78e(0x9dd)]??'2','description':''};},Game_Enemy['prototype'][_0x58cf34(0x803)]=function(){const _0x1743a2=_0x58cf34;if(this['_aspectData']===undefined)this[_0x1743a2(0x317)]();return this[_0x1743a2(0xb9d)];},Game_Enemy['prototype']['hasAspectData']=function(){const _0x16a5f1=_0x58cf34;return(this[_0x16a5f1(0x803)]()['description']||'')[_0x16a5f1(0x3eb)]>0x0;},Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x46f)]=function(){const _0x20d4b5=_0x58cf34;return VisuMZ['BattleCore'][_0x20d4b5(0xb05)][_0x20d4b5(0x693)][_0x20d4b5(0x9d8)];},Game_Enemy['prototype']['damagePopupPosition']=function(){const _0x3c9f05=_0x58cf34,_0x3ee90a=this[_0x3c9f05(0xc20)]()?this['enemy']()[_0x3c9f05(0x841)]||'':'';if(_0x3ee90a[_0x3c9f05(0xcbb)](/<POPUP POSITION: HEAD>/i))return _0x3c9f05(0x9d5);else{if(_0x3ee90a[_0x3c9f05(0xcbb)](/<POPUP POSITION: CENTER>/i))return _0x3c9f05(0x318);else{if(_0x3ee90a[_0x3c9f05(0xcbb)](/<POPUP POSITION: BASE>/i))return _0x3c9f05(0xc4e);}}return Game_BattlerBase[_0x3c9f05(0x8ef)][_0x3c9f05(0x46f)][_0x3c9f05(0x9a4)](this);},Game_BattlerBase['prototype']['damagePopupOffsetX']=function(){return 0x0;},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x5b4)]=function(){const _0x5053c8=_0x58cf34,_0xf8287c=this['enemy']()?this['enemy']()[_0x5053c8(0x841)]||'':'';if(_0xf8287c[_0x5053c8(0xcbb)](/<POPUP OFFSET X: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x5053c8(0x8ef)][_0x5053c8(0x5b4)]['call'](this);},Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x434)]=function(){return 0x0;},Game_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x434)]=function(){const _0x58b790=_0x58cf34,_0x1c3720=this[_0x58b790(0xc20)]()?this['enemy']()[_0x58b790(0x841)]||'':'';if(_0x1c3720['match'](/<POPUP OFFSET Y: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase['prototype'][_0x58b790(0x434)][_0x58b790(0x9a4)](this);},Game_Unit[_0x58cf34(0x8ef)]['processBattleCoreJS']=function(_0x24c5bc){const _0x3bdb9f=_0x58cf34;for(const _0xe739f of this['members']()){if(_0xe739f)_0xe739f[_0x3bdb9f(0x2ef)](_0x24c5bc);}},Game_Unit[_0x58cf34(0x8ef)]['trueRandomTarget']=function(){const _0xaa1dd8=_0x58cf34,_0x4b937e=this['aliveMembers']();return _0x4b937e[Math[_0xaa1dd8(0x8cb)](_0x4b937e['length'])];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xa3b)]=Game_Party['prototype']['addActor'],Game_Party['prototype'][_0x58cf34(0x5c4)]=function(_0x2afa87){const _0x3220c2=_0x58cf34;VisuMZ[_0x3220c2(0xa6b)][_0x3220c2(0xa3b)][_0x3220c2(0x9a4)](this,_0x2afa87),BattleManager[_0x3220c2(0x9b8)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x6bd)]=Game_Party[_0x58cf34(0x8ef)][_0x58cf34(0xbf2)],Game_Party[_0x58cf34(0x8ef)][_0x58cf34(0xbf2)]=function(_0x5d2341){const _0x141d5a=_0x58cf34;VisuMZ[_0x141d5a(0xa6b)][_0x141d5a(0x6bd)][_0x141d5a(0x9a4)](this,_0x5d2341),BattleManager[_0x141d5a(0x9b8)]();},VisuMZ['BattleCore'][_0x58cf34(0x55f)]=Game_Troop[_0x58cf34(0x8ef)][_0x58cf34(0x6e1)],Game_Troop[_0x58cf34(0x8ef)][_0x58cf34(0x6e1)]=function(_0x307f12){const _0x38ec93=_0x58cf34;$gameTemp[_0x38ec93(0x5e9)](),$gameTemp[_0x38ec93(0x421)](_0x307f12),VisuMZ[_0x38ec93(0xa6b)][_0x38ec93(0x55f)][_0x38ec93(0x9a4)](this,_0x307f12),this[_0x38ec93(0x986)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xc84)]=Game_Troop[_0x58cf34(0x8ef)][_0x58cf34(0x49f)],Game_Troop['prototype'][_0x58cf34(0x49f)]=function(){const _0x175609=_0x58cf34;let _0x32f1a9=VisuMZ[_0x175609(0xa6b)][_0x175609(0xc84)][_0x175609(0x9a4)](this);return this[_0x175609(0xbfd)]&&(_0x32f1a9*=this[_0x175609(0xbfd)]()),Math['ceil'](_0x32f1a9);},Game_Troop['prototype'][_0x58cf34(0xbfd)]=function(){return 0x1;},Game_Troop['prototype'][_0x58cf34(0x986)]=function(){const _0x41edeb=_0x58cf34,_0x451ff4=DataManager['createTroopNote'](this['troop']()['id']);if(_0x451ff4[_0x41edeb(0xcbb)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x463110=RegExp['$1']['split'](',')[_0x41edeb(0x5a0)](_0x1cc0e8=>Number(_0x1cc0e8));this['checkExtendTroopCompatibility'](),this[_0x41edeb(0x807)](_0x463110);}},Game_Troop[_0x58cf34(0x8ef)][_0x58cf34(0x520)]=function(){const _0x4aa885=_0x58cf34;let _0x5e6e36=_0x4aa885(0xb14)+'\x0a';_0x5e6e36+=_0x4aa885(0x66e),Imported[_0x4aa885(0x708)]&&(VisuMZ[_0x4aa885(0x34d)][_0x4aa885(0x7d2)]<1.11&&(alert(_0x5e6e36[_0x4aa885(0x1d3)](_0x4aa885(0x648))),SceneManager[_0x4aa885(0xcb5)]())),Imported['VisuMZ_2_BattleSystemCTB']&&(VisuMZ[_0x4aa885(0xb70)]['version']<1.19&&(alert(_0x5e6e36[_0x4aa885(0x1d3)](_0x4aa885(0x717))),SceneManager[_0x4aa885(0xcb5)]())),Imported[_0x4aa885(0x7a2)]&&(VisuMZ['BattleSystemSTB'][_0x4aa885(0x7d2)]<1.15&&(alert(_0x5e6e36[_0x4aa885(0x1d3)](_0x4aa885(0x8c3))),SceneManager[_0x4aa885(0xcb5)]()));},Game_Troop['prototype']['processExtendTroopMembers']=function(_0x49af0e){const _0x28e5c9=_0x58cf34;this[_0x28e5c9(0x832)]={};for(const _0x21cf47 of this[_0x28e5c9(0x7b4)]()){if(!_0x21cf47)continue;_0x21cf47[_0x28e5c9(0xbf4)]('');}for(const _0x533efe of _0x49af0e){const _0x5e5088=$dataTroops[_0x533efe];if(_0x5e5088)this[_0x28e5c9(0xbe0)](_0x5e5088);}this[_0x28e5c9(0x670)]();},Game_Troop[_0x58cf34(0x8ef)][_0x58cf34(0xbe0)]=function(_0x55fe68){const _0x26b203=_0x58cf34;for(const _0x327382 of _0x55fe68['members']){if($dataEnemies[_0x327382[_0x26b203(0x5e6)]]){const _0x543f6f=_0x327382[_0x26b203(0x5e6)],_0x9198df=_0x327382['x'],_0xdf23a7=_0x327382['y'],_0x4c483c=new Game_Enemy(_0x543f6f,_0x9198df,_0xdf23a7);_0x327382['hidden']&&_0x4c483c[_0x26b203(0x48f)](),this['_enemies'][_0x26b203(0x6db)](_0x4c483c);}}},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x6be)]=Game_Map[_0x58cf34(0x8ef)][_0x58cf34(0x346)],Game_Map[_0x58cf34(0x8ef)]['setupBattleback']=function(){const _0x121fed=_0x58cf34;VisuMZ[_0x121fed(0xa6b)]['Game_Map_setupBattleback'][_0x121fed(0x9a4)](this),this[_0x121fed(0x3d5)]();},Game_Map[_0x58cf34(0x8ef)][_0x58cf34(0x3d5)]=function(){const _0x570886=_0x58cf34;this['_regionBattleback1']={},this[_0x570886(0x473)]={};if(!$dataMap)return;const _0x416b27=$dataMap['note'];if(!_0x416b27)return;const _0x10c24e=_0x416b27[_0x570886(0xcbb)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x10c24e)for(const _0x4cd203 of _0x10c24e){_0x4cd203['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x3618f4=Number(RegExp['$1']),_0x2e72f4=Number(RegExp['$2']),_0x5a51f9=_0x2e72f4===0x1?this[_0x570886(0x478)]:this['_regionBattleback2'],_0xd8469f=String(RegExp['$3']);_0x5a51f9[_0x3618f4]=_0xd8469f;}},VisuMZ['BattleCore'][_0x58cf34(0x274)]=Game_Map[_0x58cf34(0x8ef)][_0x58cf34(0xb3b)],Game_Map[_0x58cf34(0x8ef)]['battleback1Name']=function(){const _0x3b47f2=_0x58cf34;if(!BattleManager['isBattleTest']()){const _0xacc424=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x3b47f2(0x478)][_0xacc424])return this[_0x3b47f2(0x478)][_0xacc424];}return VisuMZ['BattleCore'][_0x3b47f2(0x274)][_0x3b47f2(0x9a4)](this);},VisuMZ['BattleCore'][_0x58cf34(0x8cd)]=Game_Map['prototype']['battleback2Name'],Game_Map[_0x58cf34(0x8ef)][_0x58cf34(0x917)]=function(){const _0x22af02=_0x58cf34;if(!BattleManager['isBattleTest']()){const _0x102d98=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x22af02(0x478)]&&this[_0x22af02(0x473)][_0x102d98])return this[_0x22af02(0x473)][_0x102d98];}return VisuMZ[_0x22af02(0xa6b)][_0x22af02(0x8cd)]['call'](this);},VisuMZ[_0x58cf34(0xa6b)]['Game_Map_encounterList']=Game_Map[_0x58cf34(0x8ef)][_0x58cf34(0xc0c)],Game_Map[_0x58cf34(0x8ef)][_0x58cf34(0xc0c)]=function(){const _0x371222=_0x58cf34;let _0x546a40=JsonEx['makeDeepCopy'](VisuMZ[_0x371222(0xa6b)]['Game_Map_encounterList'][_0x371222(0x9a4)](this));return VisuMZ[_0x371222(0xa6b)][_0x371222(0xa92)](_0x546a40);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xa92)]=function(_0x57e1b6){const _0x25ce1c=_0x58cf34;var _0x3d7754,_0x2276a6,_0x580ece;for(_0x580ece=_0x57e1b6[_0x25ce1c(0x3eb)]-0x1;_0x580ece>0x0;_0x580ece--){_0x3d7754=Math[_0x25ce1c(0x951)](Math['random']()*(_0x580ece+0x1)),_0x2276a6=_0x57e1b6[_0x580ece],_0x57e1b6[_0x580ece]=_0x57e1b6[_0x3d7754],_0x57e1b6[_0x3d7754]=_0x2276a6;}return _0x57e1b6;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x4e3)]=Game_Interpreter[_0x58cf34(0x8ef)][_0x58cf34(0x45c)],Game_Interpreter[_0x58cf34(0x8ef)][_0x58cf34(0x45c)]=function(_0x3b136d){const _0x56bbb7=_0x58cf34;return $gameTemp[_0x56bbb7(0x9d2)](this),VisuMZ[_0x56bbb7(0xa6b)][_0x56bbb7(0x4e3)][_0x56bbb7(0x9a4)](this,_0x3b136d);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x741)]=Game_Interpreter[_0x58cf34(0x8ef)][_0x58cf34(0xbc0)],Game_Interpreter[_0x58cf34(0x8ef)][_0x58cf34(0xbc0)]=function(){const _0x129774=_0x58cf34;if(SceneManager[_0x129774(0x3d3)]())switch(this['_waitMode']){case _0x129774(0x923):if(Imported[_0x129774(0x5d3)]){if($gameScreen[_0x129774(0x8bf)]()[_0x129774(0x816)]>0x0)return!![];this['_waitMode']='';}break;case _0x129774(0xc43):if(BattleManager['_spriteset'][_0x129774(0x8a6)]())return!![];this[_0x129774(0xaa8)]='';break;case _0x129774(0x320):if(BattleManager[_0x129774(0x5ae)][_0x129774(0x2f0)]())return!![];this['_waitMode']='';break;case _0x129774(0x210):if(Imported[_0x129774(0x5d3)]){if($gameScreen[_0x129774(0x8bf)]()[_0x129774(0xc91)]>0x0)return!![];if($gameScreen['battleCameraData']()[_0x129774(0x2a9)]>0x0)return!![];this[_0x129774(0xaa8)]='';}break;case _0x129774(0x6f2):if(BattleManager[_0x129774(0x5ae)][_0x129774(0x6ba)]())return!![];this[_0x129774(0xaa8)]='';break;case _0x129774(0x9bf):if(BattleManager[_0x129774(0x5ae)][_0x129774(0xa40)]())return!![];this['_waitMode']='';break;case _0x129774(0x631):if(BattleManager[_0x129774(0x5ae)][_0x129774(0x6ed)]())return!![];this['_waitMode']='';break;case _0x129774(0x738):if(BattleManager[_0x129774(0x55c)][_0x129774(0x68b)]())return!![];this[_0x129774(0xaa8)]='';break;case _0x129774(0x443):if(BattleManager['_spriteset'][_0x129774(0xcd0)]())return!![];this[_0x129774(0xaa8)]='';break;case _0x129774(0x37e):if(BattleManager[_0x129774(0x5ae)][_0x129774(0xa4c)]())return!![];this['_waitMode']='';break;case _0x129774(0x886):if(BattleManager['_spriteset']['isAnyoneGrowing']())return!![];this['_waitMode']='';break;case _0x129774(0x802):if(BattleManager['_spriteset'][_0x129774(0x2e8)]())return!![];this[_0x129774(0xaa8)]='';break;case'battleProjectiles':if(Imported['VisuMZ_3_ActSeqProjectiles']){if(BattleManager['_spriteset'][_0x129774(0xbc4)]())return!![];this['_waitMode']='';}break;case _0x129774(0x2e0):if(Imported[_0x129774(0x5d3)]){if($gameScreen['battleCameraData']()['skewDuration']>0x0)return!![];this['_waitMode']='';}break;case _0x129774(0x64d):if(BattleManager[_0x129774(0x5ae)][_0x129774(0x2c7)]())return!![];this['_waitMode']='';break;case _0x129774(0x1c8):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x129774(0x8bf)]()[_0x129774(0x52d)]>0x0)return!![];this[_0x129774(0xaa8)]='';}break;case _0x129774(0x672):if(Imported[_0x129774(0xbe3)]){if(BattleManager[_0x129774(0x5ae)][_0x129774(0xc69)]){if(BattleManager['_spriteset'][_0x129774(0xc69)]())return!![];this[_0x129774(0xaa8)]='battleInjectAni';}else this['_waitMode']='';break;}break;case _0x129774(0x6ee):if(Imported[_0x129774(0xbe3)]){if(BattleManager[_0x129774(0x5ae)]['isAnyoneInjectAnimating']())return!![];this['_waitMode']='';}break;}return VisuMZ['BattleCore']['Game_Interpreter_updateWaitMode'][_0x129774(0x9a4)](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x95e)]=Game_Interpreter[_0x58cf34(0x8ef)][_0x58cf34(0x2a3)],Game_Interpreter[_0x58cf34(0x8ef)][_0x58cf34(0x2a3)]=function(_0x1d2a7f){const _0x517dcb=_0x58cf34;return!$gameParty[_0x517dcb(0xa7b)]()?this[_0x517dcb(0xc2b)](_0x1d2a7f):VisuMZ[_0x517dcb(0xa6b)]['Game_Interpreter_command301'][_0x517dcb(0x9a4)](this,_0x1d2a7f);},Game_Interpreter[_0x58cf34(0x8ef)][_0x58cf34(0x9bb)]=function(_0x4a75d5){const _0x5ae3a4=_0x58cf34;return VisuMZ['BattleCore'][_0x5ae3a4(0x95e)][_0x5ae3a4(0x9a4)](this,_0x4a75d5),BattleManager[_0x5ae3a4(0x56d)](_0x51a041=>{const _0x5156da=_0x5ae3a4;this[_0x5156da(0xafb)][this['_indent']]=_0x51a041;}),!![];},VisuMZ['BattleCore'][_0x58cf34(0x27d)]=function(_0x346ee6){const _0x49570e=_0x58cf34,_0x5aebae=$dataCommonEvents[_0x346ee6];if(!_0x5aebae)return![];if(_0x5aebae[_0x49570e(0x83e)][_0x49570e(0x3eb)]<=0x1)return![];return!![];},Game_Interpreter[_0x58cf34(0x8ef)][_0x58cf34(0xc2b)]=function(_0x26d4ea){const _0x277c1c=_0x58cf34,_0x5c1d1f=VisuMZ['BattleCore'][_0x277c1c(0xb05)][_0x277c1c(0x2ec)],_0x541cb8=_0x5c1d1f[_0x277c1c(0x401)],_0x239720=$dataCommonEvents[_0x541cb8];if(_0x239720&&VisuMZ[_0x277c1c(0xa6b)][_0x277c1c(0x27d)](_0x541cb8)){const _0x2898e3=this[_0x277c1c(0x568)]()?this[_0x277c1c(0xc98)]:0x0,_0x2729ae=_0x239720[_0x277c1c(0x83e)];this[_0x277c1c(0xa89)](_0x2729ae,_0x2898e3),this[_0x277c1c(0xaad)]=JsonEx['makeDeepCopy'](this[_0x277c1c(0xaad)]);const _0x31ad9a={'code':0xbc3,'indent':this[_0x277c1c(0x7dc)],'parameters':JsonEx[_0x277c1c(0x402)](_0x26d4ea)};return this[_0x277c1c(0xaad)][_0x277c1c(0x5e4)](this['_index']+0x1,0x0,_0x31ad9a),!![];}else return VisuMZ['BattleCore'][_0x277c1c(0x95e)]['call'](this,_0x26d4ea);},VisuMZ['BattleCore'][_0x58cf34(0x8dc)]=BattleManager[_0x58cf34(0xa98)],BattleManager['onEncounter']=function(){const _0x42dece=_0x58cf34;VisuMZ[_0x42dece(0xa6b)][_0x42dece(0x8dc)]['call'](this),this['onEncounterBattleCore']();},BattleManager[_0x58cf34(0x943)]=function(){const _0x43fe0e=_0x58cf34,_0x20c234=VisuMZ[_0x43fe0e(0xa6b)][_0x43fe0e(0xb05)][_0x43fe0e(0x2ec)],_0x475b7c=_0x20c234[_0x43fe0e(0x401)];_0x475b7c&&VisuMZ['BattleCore'][_0x43fe0e(0x27d)](_0x475b7c)&&(this['_battleCoreBattleStartEvent']=!![],$gameTemp[_0x43fe0e(0x75f)](_0x20c234[_0x43fe0e(0x401)]),$gameMap['updateInterpreter'](),$gameMap['_interpreter'][_0x43fe0e(0x302)]=!![]),_0x20c234[_0x43fe0e(0x7ca)]>0x0&&(this[_0x43fe0e(0x207)]=!![]);},VisuMZ[_0x58cf34(0xa6b)]['Scene_Map_updateCallMenu']=Scene_Map[_0x58cf34(0x8ef)][_0x58cf34(0xcc2)],Scene_Map[_0x58cf34(0x8ef)]['updateCallMenu']=function(){const _0x4c513c=_0x58cf34;if(BattleManager[_0x4c513c(0xa03)])return;VisuMZ[_0x4c513c(0xa6b)][_0x4c513c(0x563)][_0x4c513c(0x9a4)](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xaba)]=Scene_Map[_0x58cf34(0x8ef)][_0x58cf34(0x6f0)],Scene_Map['prototype'][_0x58cf34(0x6f0)]=function(){const _0x418dbd=_0x58cf34;BattleManager[_0x418dbd(0xa03)]?this[_0x418dbd(0x202)]():VisuMZ[_0x418dbd(0xa6b)]['Scene_Map_launchBattle'][_0x418dbd(0x9a4)](this);},Scene_Map['prototype']['battleCorePreBattleCommonEvent']=function(){const _0x234d42=_0x58cf34;this[_0x234d42(0x396)]=!![];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x8fc)]=SceneManager[_0x58cf34(0xbda)],SceneManager[_0x58cf34(0xbda)]=function(){const _0x261f3f=_0x58cf34;if(BattleManager[_0x261f3f(0xa03)])return![];return VisuMZ[_0x261f3f(0xa6b)][_0x261f3f(0x8fc)][_0x261f3f(0x9a4)](this);},VisuMZ[_0x58cf34(0xa6b)]['Game_Interpreter_terminate']=Game_Interpreter['prototype']['terminate'],Game_Interpreter['prototype']['terminate']=function(){const _0x156205=_0x58cf34;VisuMZ[_0x156205(0xa6b)][_0x156205(0xb2f)]['call'](this),this[_0x156205(0x302)]&&(this[_0x156205(0x302)]=undefined,SceneManager[_0x156205(0xb85)]['battleCoreResumeLaunchBattle']());},Scene_Map[_0x58cf34(0x8ef)][_0x58cf34(0x966)]=function(){const _0xcc9a9f=_0x58cf34;BattleManager[_0xcc9a9f(0xa03)]=undefined,BattleManager[_0xcc9a9f(0x26a)]=!![],this[_0xcc9a9f(0xa0a)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x869)]=Scene_Map[_0x58cf34(0x8ef)]['initialize'],Scene_Map['prototype'][_0x58cf34(0xb4e)]=function(){const _0xfde3bf=_0x58cf34;VisuMZ[_0xfde3bf(0xa6b)]['Scene_Map_initializeAfter']['call'](this),BattleManager[_0xfde3bf(0x26a)]&&(this[_0xfde3bf(0x396)]=!![],BattleManager[_0xfde3bf(0x26a)]=undefined);},VisuMZ[_0x58cf34(0xa6b)]['Scene_Map_initialize']=Scene_Map[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)],Scene_Map[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)]=function(){const _0x4debfa=_0x58cf34;VisuMZ[_0x4debfa(0xa6b)][_0x4debfa(0xb1d)][_0x4debfa(0x9a4)](this),$gameTemp[_0x4debfa(0x5e9)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x422)]=Scene_ItemBase[_0x58cf34(0x8ef)][_0x58cf34(0x3fb)],Scene_ItemBase['prototype'][_0x58cf34(0x3fb)]=function(){const _0x340285=_0x58cf34;VisuMZ[_0x340285(0xa6b)][_0x340285(0x422)][_0x340285(0x9a4)](this);if(this[_0x340285(0xb8a)]()[_0x340285(0x841)][_0x340285(0xcbb)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x340285(0xb8a)]()[_0x340285(0x841)][_0x340285(0xcbb)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x340285(0x6a9)]=[]),DataManager[_0x340285(0x942)](this[_0x340285(0xb8a)]())&&($gameTemp['_commonEventQueue']=[]);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x211)]=Scene_Options[_0x58cf34(0x8ef)][_0x58cf34(0x59a)],Scene_Options[_0x58cf34(0x8ef)][_0x58cf34(0x59a)]=function(){const _0x21a30d=_0x58cf34;let _0x52f579=VisuMZ[_0x21a30d(0xa6b)][_0x21a30d(0x211)][_0x21a30d(0x9a4)](this);const _0x2c57f4=VisuMZ[_0x21a30d(0xa6b)][_0x21a30d(0xb05)];if(_0x2c57f4['AutoBattle']['AddOption']&&_0x2c57f4[_0x21a30d(0x96a)][_0x21a30d(0xcc4)])_0x52f579+=0x2;if(_0x2c57f4[_0x21a30d(0x26d)][_0x21a30d(0xacb)]&&_0x2c57f4[_0x21a30d(0x26d)]['AdjustRect'])_0x52f579+=0x1;return _0x52f579;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x223)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)]=function(){const _0x10bbf1=_0x58cf34;VisuMZ[_0x10bbf1(0xa6b)][_0x10bbf1(0x223)][_0x10bbf1(0x9a4)](this),this[_0x10bbf1(0x973)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xa6a)]=Scene_Battle['prototype'][_0x58cf34(0xa1a)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xa1a)]=function(){const _0x24a65a=_0x58cf34;SceneManager[_0x24a65a(0x8b6)]()?(Scene_Message['prototype'][_0x24a65a(0xa1a)]['call'](this),this[_0x24a65a(0x5ae)]&&this['_spriteset']['update'](),BattleManager[_0x24a65a(0x463)]&&BattleManager['revertTpbCachedActor']()):(VisuMZ[_0x24a65a(0xa6b)]['Scene_Battle_start']['call'](this),$gameTroop[_0x24a65a(0x60e)]());},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x8be)]=Scene_Battle['prototype']['stop'],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xa0a)]=function(){const _0x5b4db6=_0x58cf34;SceneManager[_0x5b4db6(0xac3)]()?Scene_Message[_0x5b4db6(0x8ef)][_0x5b4db6(0xa0a)][_0x5b4db6(0x9a4)](this):VisuMZ[_0x5b4db6(0xa6b)][_0x5b4db6(0x8be)][_0x5b4db6(0x9a4)](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xac7)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xcd2)],Scene_Battle['prototype'][_0x58cf34(0xcd2)]=function(){const _0x408131=_0x58cf34;SceneManager[_0x408131(0xac3)]()?Scene_Message[_0x408131(0x8ef)][_0x408131(0xcd2)][_0x408131(0x9a4)](this):VisuMZ[_0x408131(0xa6b)][_0x408131(0xac7)]['call'](this),$gameTemp['clearBattleBalloons'](),this[_0x408131(0x973)]();},Scene_Battle[_0x58cf34(0x8ef)]['isRightInputMode']=function(){const _0x52f2f1=_0x58cf34;if(ConfigManager[_0x52f2f1(0xb6f)]&&ConfigManager['uiInputPosition']!==undefined)return ConfigManager['uiInputPosition'];else{if(this[_0x52f2f1(0x9df)]()===_0x52f2f1(0xa21))return![];else{return Scene_Message[_0x52f2f1(0x8ef)]['isRightInputMode'][_0x52f2f1(0x9a4)](this);;}}},VisuMZ[_0x58cf34(0xa6b)]['Scene_Battle_createCancelButton']=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x6d9)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x6d9)]=function(){const _0x513580=_0x58cf34;VisuMZ['BattleCore'][_0x513580(0xb16)]['call'](this),this['battleLayoutStyle']()===_0x513580(0xa21)&&this[_0x513580(0x3ee)]();},Scene_Battle[_0x58cf34(0x8ef)]['setVisibleUI']=function(_0x55c34c){const _0x49197e=_0x58cf34;_0x55c34c?(this[_0x49197e(0x233)]['x']=(Graphics['width']-Graphics[_0x49197e(0x9ad)])/0x2,this[_0x49197e(0x233)]['y']=(Graphics[_0x49197e(0x725)]-Graphics['boxHeight'])/0x2):(this['_windowLayer']['x']=Graphics['width']*0xa,this['_windowLayer']['y']=Graphics[_0x49197e(0x725)]*0xa);},VisuMZ['BattleCore'][_0x58cf34(0x86d)]=Scene_Battle['prototype'][_0x58cf34(0x354)],Scene_Battle[_0x58cf34(0x8ef)]['selectNextCommand']=function(){const _0x2a1b38=_0x58cf34,_0x10b907=BattleManager['actor']();VisuMZ[_0x2a1b38(0xa6b)]['Scene_Battle_selectNextCommand']['call'](this);if(_0x10b907){if(_0x10b907===BattleManager[_0x2a1b38(0x2fd)]())return;if(_0x10b907===BattleManager[_0x2a1b38(0x6f1)])return;if(_0x10b907[_0x2a1b38(0x399)]())_0x10b907[_0x2a1b38(0x399)]()[_0x2a1b38(0x71a)]();}},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x6b1)]=Scene_Battle[_0x58cf34(0x8ef)]['selectPreviousCommand'],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x6ad)]=function(){const _0x5a3720=_0x58cf34,_0x43675d=BattleManager[_0x5a3720(0x2fd)]();if(_0x43675d&&_0x43675d['battler'])_0x43675d['battler']()[_0x5a3720(0x71a)]();VisuMZ[_0x5a3720(0xa6b)][_0x5a3720(0x6b1)]['call'](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xbe7)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xa7c)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xa7c)]=function(){const _0x3bafdf=_0x58cf34;this[_0x3bafdf(0x81a)](),VisuMZ['BattleCore'][_0x3bafdf(0xbe7)][_0x3bafdf(0x9a4)](this),this[_0x3bafdf(0x70e)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x618)]=Scene_Battle['prototype']['logWindowRect'],Scene_Battle['prototype'][_0x58cf34(0x517)]=function(){const _0x1a7cd9=_0x58cf34;if(VisuMZ[_0x1a7cd9(0xa6b)][_0x1a7cd9(0xb05)]['BattleLog']['BattleLogRectJS'])return VisuMZ[_0x1a7cd9(0xa6b)][_0x1a7cd9(0xb05)][_0x1a7cd9(0xaca)][_0x1a7cd9(0xa9c)]['call'](this);return VisuMZ[_0x1a7cd9(0xa6b)][_0x1a7cd9(0x618)]['call'](this);},VisuMZ[_0x58cf34(0xa6b)]['Scene_Battle_createPartyCommandWindow']=Scene_Battle[_0x58cf34(0x8ef)]['createPartyCommandWindow'],Scene_Battle['prototype'][_0x58cf34(0xae8)]=function(){const _0x4286e1=_0x58cf34;VisuMZ[_0x4286e1(0xa6b)]['Scene_Battle_createPartyCommandWindow'][_0x4286e1(0x9a4)](this),this[_0x4286e1(0x792)]();},Scene_Battle['prototype']['createPartyCommandWindowBattleCore']=function(){const _0x48c572=_0x58cf34,_0x13b884=this[_0x48c572(0x8da)];_0x13b884[_0x48c572(0x5b3)](_0x48c572(0x8f0),this[_0x48c572(0x3a1)][_0x48c572(0xaf2)](this)),_0x13b884[_0x48c572(0x5b3)](_0x48c572(0x292),this['commandOptions']['bind'](this));const _0x4c45a=this['battleLayoutStyle']();switch(_0x4c45a){case'xp':case _0x48c572(0x445):return this['_partyCommandWindow']['setBackgroundType'](0x1);break;}},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x3a1)]=function(){const _0x183289=_0x58cf34;BattleManager[_0x183289(0x7d4)]=!![],$gameParty[_0x183289(0x753)](),this[_0x183289(0x354)](),BattleManager[_0x183289(0x2b7)]()&&(BattleManager['_inputting']=![]);},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xa7e)]=function(){const _0x14c7c2=_0x58cf34;this['isQueueOptionsMenu']()?(this[_0x14c7c2(0x21f)]=!![],this['_logWindow']['push']('addText',VisuMZ[_0x14c7c2(0xa6b)][_0x14c7c2(0xb05)][_0x14c7c2(0x25c)][_0x14c7c2(0x868)])):this['callOptions']();},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x8f9)]=function(){return BattleManager['isActiveTpb']();},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x9b2)]=function(){const _0x57e89d=_0x58cf34;this[_0x57e89d(0x21f)]=![],this['_spriteset'][_0x57e89d(0x6a2)](),this[_0x57e89d(0x233)][_0x57e89d(0x1e4)]=![];if(BattleManager[_0x57e89d(0x7d3)]())($dataSystem[_0x57e89d(0xb3b)]||$dataSystem[_0x57e89d(0x917)])&&SceneManager['snapForBackground']();else($gameMap[_0x57e89d(0xb3b)]()||$gameMap[_0x57e89d(0x917)]())&&SceneManager[_0x57e89d(0xbf9)]();SceneManager[_0x57e89d(0x6db)](Scene_Options),BattleManager[_0x57e89d(0x2b7)]()&&(BattleManager[_0x57e89d(0x463)]=BattleManager['actor']());},VisuMZ['BattleCore'][_0x58cf34(0x2aa)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x585)],Scene_Battle[_0x58cf34(0x8ef)]['updateBattleProcess']=function(){const _0x458785=_0x58cf34;VisuMZ[_0x458785(0xa6b)][_0x458785(0x2aa)][_0x458785(0x9a4)](this);if(this[_0x458785(0x21f)]&&!BattleManager[_0x458785(0x6f1)])this[_0x458785(0x9b2)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x36b)]=Scene_Battle['prototype'][_0x58cf34(0x6a2)],Scene_Battle['prototype'][_0x58cf34(0x6a2)]=function(){const _0x391ad8=_0x58cf34;VisuMZ['BattleCore'][_0x391ad8(0x36b)]['call'](this),this[_0x391ad8(0x874)]();},Scene_Battle[_0x58cf34(0x8ef)]['createAutoBattleWindow']=function(){const _0x17ca09=_0x58cf34,_0x1fa589=this[_0x17ca09(0x89f)]();this['_autoBattleWindow']=new Window_AutoBattleCancel(_0x1fa589),this[_0x17ca09(0x282)]['hide'](),this['addChild'](this[_0x17ca09(0x282)]);},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x89f)]=function(){const _0x2e5463=_0x58cf34;return VisuMZ['BattleCore'][_0x2e5463(0xb05)][_0x2e5463(0x96a)][_0x2e5463(0x85b)]['call'](this);},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x973)]=function(){this['_onceParallelInterpreters']=[];},Scene_Battle[_0x58cf34(0x8ef)]['updateOnceParallelInterpreters']=function(){const _0xb5a6b5=_0x58cf34;if(!this['_onceParallelInterpreters'])return;for(const _0x58784d of this[_0xb5a6b5(0x569)]){_0x58784d&&_0x58784d[_0xb5a6b5(0x6a2)]();}},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x20f)]=function(_0xc87433){const _0x309713=_0x58cf34,_0x4bc17d=$dataCommonEvents[_0xc87433];if(!_0x4bc17d)return;const _0x35b791=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x35b791),_0x35b791[_0x309713(0x938)](_0xc87433);},Scene_Battle[_0x58cf34(0x8ef)]['addOnceParallelInterpreter']=function(_0x3fc256){const _0x594246=_0x58cf34;this[_0x594246(0x569)]=this[_0x594246(0x569)]||[],this[_0x594246(0x569)]['push'](_0x3fc256);},Scene_Battle['prototype'][_0x58cf34(0x2b3)]=function(_0x49e7a0){const _0xcc1049=_0x58cf34;this[_0xcc1049(0x569)]=this[_0xcc1049(0x569)]||[],this[_0xcc1049(0x569)][_0xcc1049(0x61f)](_0x49e7a0);},Game_Troop[_0x58cf34(0x8ef)][_0x58cf34(0x60e)]=function(){const _0x4630a1=_0x58cf34;for(const _0x123081 of this['troop']()[_0x4630a1(0x765)]){if(!this[_0x4630a1(0x645)](_0x123081))continue;SceneManager[_0x4630a1(0xb85)][_0x4630a1(0x2cf)](_0x123081);}},Game_Troop[_0x58cf34(0x8ef)][_0x58cf34(0x645)]=function(_0x2a7c8c){const _0x18ef8e=_0x58cf34;if(!_0x2a7c8c)return;for(const _0x1034a6 of _0x2a7c8c['list']){if([0x6c,0x198][_0x18ef8e(0x375)](_0x1034a6[_0x18ef8e(0xbe2)])){const _0x43b7a4=_0x1034a6[_0x18ef8e(0xbce)][0x0];if(_0x43b7a4[_0x18ef8e(0xcbb)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x2cf)]=function(_0x249940){const _0x1e642a=_0x58cf34;if(!_0x249940)return;const _0x552c4c=new Game_BattleOnceParallelInterpreter();this[_0x1e642a(0x360)](_0x552c4c),_0x552c4c[_0x1e642a(0xca2)](_0x249940);};function Game_BattleOnceParallelInterpreter(){const _0x107e64=_0x58cf34;this[_0x107e64(0xb4e)](...arguments);}Game_BattleOnceParallelInterpreter[_0x58cf34(0x8ef)]=Object[_0x58cf34(0x5fa)](Game_Interpreter[_0x58cf34(0x8ef)]),Game_BattleOnceParallelInterpreter[_0x58cf34(0x8ef)][_0x58cf34(0x408)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype'][_0x58cf34(0x938)]=function(_0x47dc66){const _0x378336=_0x58cf34,_0x3c60cb=$dataCommonEvents[_0x47dc66];_0x3c60cb?this[_0x378336(0x6e1)](_0x3c60cb['list'],0x0):this[_0x378336(0xcd2)]();},Game_BattleOnceParallelInterpreter[_0x58cf34(0x8ef)]['terminate']=function(){const _0x1afdd0=_0x58cf34;if(!SceneManager[_0x1afdd0(0x3d3)]())return;SceneManager[_0x1afdd0(0xb85)][_0x1afdd0(0x2b3)](this),Game_Interpreter[_0x1afdd0(0x8ef)]['terminate'][_0x1afdd0(0x9a4)](this);},Game_BattleOnceParallelInterpreter[_0x58cf34(0x8ef)][_0x58cf34(0xca2)]=function(_0x5ac3d7){const _0x265f5c=_0x58cf34;_0x5ac3d7?this[_0x265f5c(0x6e1)](_0x5ac3d7[_0x265f5c(0x83e)],0x0):this['terminate']();},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x3cd)]=function(){const _0x34f755=_0x58cf34;return VisuMZ['BattleCore'][_0x34f755(0xb05)][_0x34f755(0x25c)]['DisablePartyCmd'];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xa3a)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xca7)],Scene_Battle['prototype']['startPartyCommandSelection']=function(){const _0x8a19de=_0x58cf34;this[_0x8a19de(0x3cd)]()?this[_0x8a19de(0x8df)]():VisuMZ['BattleCore'][_0x8a19de(0xa3a)][_0x8a19de(0x9a4)](this);},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x8df)]=function(){const _0x3f2bb4=_0x58cf34;if(BattleManager[_0x3f2bb4(0x4b1)]())this['selectNextCommand']();else BattleManager[_0x3f2bb4(0x2b7)]()&&VisuMZ[_0x3f2bb4(0xa6b)][_0x3f2bb4(0xa3a)][_0x3f2bb4(0x9a4)](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xa7d)]=Scene_Battle['prototype'][_0x58cf34(0x98d)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x98d)]=function(){const _0x1081f3=_0x58cf34;BattleManager[_0x1081f3(0x2b7)]()?(this[_0x1081f3(0x7bd)](),this[_0x1081f3(0x643)]()):VisuMZ[_0x1081f3(0xa6b)]['Scene_Battle_commandFight'][_0x1081f3(0x9a4)](this);},Scene_Battle['prototype']['tpbCommandFight']=function(){const _0x438a1b=_0x58cf34;if(!VisuMZ['BattleCore'][_0x438a1b(0x56f)])return;if(Imported[_0x438a1b(0x528)]&&BattleManager[_0x438a1b(0x8a3)]())return;const _0x3627df=$gameParty[_0x438a1b(0x565)]()[_0x438a1b(0x8b3)](_0x1e640b=>_0x1e640b[_0x438a1b(0x80f)]()&&_0x1e640b[_0x438a1b(0x861)]());BattleManager[_0x438a1b(0x87a)]=_0x3627df[0x0]||null,BattleManager[_0x438a1b(0x87a)]&&BattleManager[_0x438a1b(0x87a)][_0x438a1b(0xc59)](_0x438a1b(0x7ed));},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x9e8)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x201)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x201)]=function(){const _0x4071c9=_0x58cf34;VisuMZ[_0x4071c9(0xa6b)][_0x4071c9(0x9e8)][_0x4071c9(0x9a4)](this);if(!BattleManager[_0x4071c9(0x2b7)]())BattleManager[_0x4071c9(0x87a)]=null;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x5b7)]=Scene_Battle['prototype'][_0x58cf34(0x976)],Scene_Battle[_0x58cf34(0x8ef)]['createActorCommandWindow']=function(){const _0x3e9430=_0x58cf34;VisuMZ['BattleCore']['Scene_Battle_createActorCommandWindow'][_0x3e9430(0x9a4)](this),this['createActorCommandWindowBattleCore']();},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x91a)]=function(){const _0x1b69d5=_0x58cf34,_0x11e1d2=this['_actorCommandWindow'];_0x11e1d2[_0x1b69d5(0x5b3)]('escape',this['actorCommandEscape']['bind'](this)),_0x11e1d2[_0x1b69d5(0x5b3)](_0x1b69d5(0x8f0),this[_0x1b69d5(0x7e9)][_0x1b69d5(0xaf2)](this)),_0x11e1d2[_0x1b69d5(0x5b3)](_0x1b69d5(0x87e),this[_0x1b69d5(0x430)][_0x1b69d5(0xaf2)](this)),BattleManager[_0x1b69d5(0x2b7)]()&&(this[_0x1b69d5(0x3cd)]()?delete _0x11e1d2['_handlers'][_0x1b69d5(0x3aa)]:_0x11e1d2[_0x1b69d5(0x5b3)](_0x1b69d5(0x3aa),this['actorCommandCancelTPB']['bind'](this)));},Scene_Battle[_0x58cf34(0x8ef)]['actorCommandEscape']=function(){const _0x559b4a=_0x58cf34;this[_0x559b4a(0x201)]();},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x7e9)]=function(){const _0x47ac85=_0x58cf34;BattleManager[_0x47ac85(0x2fd)]()[_0x47ac85(0x44e)](),BattleManager['finishActorInput'](),BattleManager[_0x47ac85(0x497)](),this[_0x47ac85(0x22d)]();},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x430)]=function(){const _0x248d58=_0x58cf34,_0x3f8d97=BattleManager[_0x248d58(0xc4f)](),_0x209312=this[_0x248d58(0x30f)][_0x248d58(0xcb2)]();_0x3f8d97['setSkill'](_0x209312),BattleManager[_0x248d58(0x2fd)]()[_0x248d58(0x4ec)]($dataSkills[_0x209312]),this[_0x248d58(0x727)]();},Scene_Battle[_0x58cf34(0x8ef)]['actorCommandCancelTPB']=function(){const _0x54f12d=_0x58cf34;this[_0x54f12d(0x593)]()?this[_0x54f12d(0x68c)]():this[_0x54f12d(0x830)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x56f)]=![],Scene_Battle['prototype'][_0x58cf34(0x593)]=function(){const _0x157d1e=_0x58cf34;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager['isCTB']())return![];else{if(!VisuMZ[_0x157d1e(0xa6b)][_0x157d1e(0x56f)])return![];const _0x102832=$gameParty[_0x157d1e(0x565)]()[_0x157d1e(0x8b3)](_0x5c15d0=>_0x5c15d0['isTpbCharged']()&&_0x5c15d0[_0x157d1e(0x861)]());return _0x102832['length']>0x0&&BattleManager[_0x157d1e(0x2fd)]()!==_0x102832[_0x102832['length']-0x1];}},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x68c)]=function(){const _0x1fd1e7=_0x58cf34,_0x37803e=BattleManager[_0x1fd1e7(0x2fd)](),_0x35b121=_0x37803e[_0x1fd1e7(0x399)]();if(_0x35b121)_0x35b121[_0x1fd1e7(0x71a)]();const _0x25bdb5=$gameParty['aliveMembers']()[_0x1fd1e7(0x8b3)](_0x4220ee=>_0x4220ee['isTpbCharged']()&&_0x4220ee[_0x1fd1e7(0x861)]()),_0xae090e=_0x25bdb5['indexOf'](_0x37803e),_0x179b1b=_0x25bdb5[_0xae090e+0x1];BattleManager[_0x1fd1e7(0x87a)]=_0x179b1b||null;if(_0x179b1b)_0x179b1b[_0x1fd1e7(0xc59)](_0x1fd1e7(0x7ed));_0x37803e['setActionState'](_0x1fd1e7(0x7f4)),this[_0x1fd1e7(0x22d)]();},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x830)]=function(){const _0x5f2d74=_0x58cf34;this[_0x5f2d74(0x8da)][_0x5f2d74(0x6e1)](),this[_0x5f2d74(0x30f)][_0x5f2d74(0x932)]();if(!VisuMZ[_0x5f2d74(0xa6b)][_0x5f2d74(0x56f)])return;if(Imported[_0x5f2d74(0x528)]&&BattleManager[_0x5f2d74(0x8a3)]())return;if(BattleManager[_0x5f2d74(0x87a)]){BattleManager['_currentActor']['setActionState'](_0x5f2d74(0x7f4));const _0x26668b=BattleManager[_0x5f2d74(0x87a)][_0x5f2d74(0x399)]();if(_0x26668b)_0x26668b[_0x5f2d74(0x71a)]();}BattleManager[_0x5f2d74(0x87a)]=null;},VisuMZ['BattleCore'][_0x58cf34(0xa8c)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x295)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x295)]=function(){const _0x3531a0=_0x58cf34;VisuMZ[_0x3531a0(0xa6b)][_0x3531a0(0xa8c)][_0x3531a0(0x9a4)](this),this[_0x3531a0(0x2b2)]();},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x2b2)]=function(){const _0x697b5d=_0x58cf34;this[_0x697b5d(0x30f)][_0x697b5d(0x94e)](this[_0x697b5d(0xa32)]),this['_partyCommandWindow'][_0x697b5d(0x94e)](this[_0x697b5d(0xa32)]);},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x81a)]=function(){const _0x1ff2b7=_0x58cf34;if(!VisuMZ[_0x1ff2b7(0xa6b)][_0x1ff2b7(0xb05)][_0x1ff2b7(0x48b)][_0x1ff2b7(0xb3c)])return;this[_0x1ff2b7(0x61c)]=new Sprite(),this[_0x1ff2b7(0x61c)]['x']=this[_0x1ff2b7(0x233)]['x'],this[_0x1ff2b7(0x61c)]['y']=this['_windowLayer']['y'];const _0x3a7a04=this[_0x1ff2b7(0x9fa)][_0x1ff2b7(0xccf)](this[_0x1ff2b7(0x233)]);this[_0x1ff2b7(0x7ec)](this[_0x1ff2b7(0x61c)],_0x3a7a04);for(let _0x33c3ca=0x0;_0x33c3ca<0x8;_0x33c3ca++){const _0x5062a0=new Window_EnemyName(_0x33c3ca);this['_enemyNameContainer'][_0x1ff2b7(0x3ac)](_0x5062a0);}},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x36f)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xb6b)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xb6b)]=function(){const _0x44d2c6=_0x58cf34;VisuMZ[_0x44d2c6(0xa6b)][_0x44d2c6(0x36f)][_0x44d2c6(0x9a4)](this),this[_0x44d2c6(0x993)]();},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x993)]=function(){const _0x269e32=_0x58cf34;this[_0x269e32(0x3d2)](!![]),this['createMultiTargetWindow'](![]);},Scene_Battle['prototype'][_0x58cf34(0xb89)]=function(_0x359160){const _0x52ad00=_0x58cf34,_0x616acb=Window_BattleMultiTarget[_0x52ad00(0x2d0)],_0x7511a6=this['calcWindowHeight'](0x1,!![]);let _0x317c54=_0x359160?Graphics[_0x52ad00(0x9ad)]-_0x616acb:0x0;_0x317c54+=_0x359160?Window_BattleMultiTarget[_0x52ad00(0xc0b)]:Window_BattleMultiTarget[_0x52ad00(0x9c0)];const _0x1b6e08=[_0x52ad00(0x38e)][_0x52ad00(0x375)](this[_0x52ad00(0x9df)]())?0x0:this[_0x52ad00(0x4f1)][_0x52ad00(0x725)];let _0x23ba28=Graphics[_0x52ad00(0x1cb)]-_0x1b6e08-_0x7511a6;return _0x23ba28+=_0x359160?Window_BattleMultiTarget['ACTOR_OFFSET_Y']:Window_BattleMultiTarget['ENEMY_OFFSET_Y'],new Rectangle(_0x317c54,_0x23ba28,_0x616acb,_0x7511a6);},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x3d2)]=function(_0x382f16){const _0x24ea9a=_0x58cf34,_0x358632=this['multiTargetWindowRect'](_0x382f16),_0x328bd8=new Window_BattleMultiTarget(_0x358632,_0x382f16);this[_0x24ea9a(0x280)](_0x328bd8),_0x382f16?this['_actorMultiTargetWindow']=_0x328bd8:this['_enemyMultiTargetWindow']=_0x328bd8;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x73e)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x73a)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x73a)]=function(){const _0x5cb649=_0x58cf34;if(this[_0x5cb649(0xb79)])return![];return VisuMZ[_0x5cb649(0xa6b)][_0x5cb649(0x73e)][_0x5cb649(0x9a4)](this);},VisuMZ['BattleCore'][_0x58cf34(0x6d6)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x7df)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x7df)]=function(){const _0x485f3f=_0x58cf34;if(this[_0x485f3f(0x93a)]&&this['_inBattleStatusMode']){this[_0x485f3f(0x93a)][_0x485f3f(0x1e4)]=!![];return;}VisuMZ[_0x485f3f(0xa6b)][_0x485f3f(0x6d6)][_0x485f3f(0x9a4)](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x1d7)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xb0d)],Scene_Battle['prototype']['isTimeActive']=function(){const _0x4d63d5=_0x58cf34;if(this[_0x4d63d5(0xb79)])return![];return VisuMZ[_0x4d63d5(0xa6b)][_0x4d63d5(0x1d7)][_0x4d63d5(0x9a4)](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x5e3)]=Scene_Battle[_0x58cf34(0x8ef)]['createAllWindows'],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xa7c)]=function(){const _0x15e1e2=_0x58cf34;VisuMZ['BattleCore']['Scene_Battle_createAllWindowsIBS'][_0x15e1e2(0x9a4)](this),this[_0x15e1e2(0xa0b)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x847)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xae8)],Scene_Battle['prototype'][_0x58cf34(0xae8)]=function(){const _0x4bb269=_0x58cf34;VisuMZ[_0x4bb269(0xa6b)][_0x4bb269(0x847)]['call'](this);const _0x14a2fe=this['_partyCommandWindow'];_0x14a2fe['setHandler'](_0x4bb269(0xa5a),this[_0x4bb269(0x2ba)][_0x4bb269(0xaf2)](this,_0x14a2fe));},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x880)]=Scene_Battle['prototype'][_0x58cf34(0x976)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x976)]=function(){const _0x2710e2=_0x58cf34;VisuMZ[_0x2710e2(0xa6b)][_0x2710e2(0x880)][_0x2710e2(0x9a4)](this);const _0x2a95c0=this['_actorCommandWindow'];_0x2a95c0[_0x2710e2(0x5b3)](_0x2710e2(0xa5a),this[_0x2710e2(0x2ba)][_0x2710e2(0xaf2)](this,_0x2a95c0));},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xa0b)]=function(){const _0x57292a=_0x58cf34,_0x3a9537=this['inBattleStatusWindowRect'](),_0x3e9c70=new Window_InBattleStatus(_0x3a9537);this['addWindow'](_0x3e9c70),_0x3e9c70[_0x57292a(0x48f)](),_0x3e9c70['close'](),this[_0x57292a(0x605)]=_0x3e9c70;},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x79f)]=function(){const _0x40ef99=_0x58cf34;if(VisuMZ[_0x40ef99(0xa6b)][_0x40ef99(0xb05)][_0x40ef99(0x691)]['StatusWindow_RectJS'])return VisuMZ[_0x40ef99(0xa6b)]['Settings'][_0x40ef99(0x691)][_0x40ef99(0xa20)][_0x40ef99(0x9a4)](this);const _0x27f645=Graphics[_0x40ef99(0x9ad)]>0x3e8?0x78:0x0,_0x4923dc=this[_0x40ef99(0xa32)]['y']+this['_helpWindow']['height'],_0x3a18a4=Graphics[_0x40ef99(0x9ad)]-_0x27f645*0x2,_0x3226b5=Graphics[_0x40ef99(0x1cb)]-_0x4923dc-this[_0x40ef99(0xbfc)]();return new Rectangle(_0x27f645,_0x4923dc,_0x3a18a4,_0x3226b5);},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x2ba)]=function(_0x66e15b){const _0x5af55d=_0x58cf34;this['addWindow'](this[_0x5af55d(0x605)]),this[_0x5af55d(0xb79)]=!![],this[_0x5af55d(0xa32)][_0x5af55d(0x68d)]();const _0x48fd17=['xp',_0x5af55d(0x445),'border',_0x5af55d(0x509),'frontview_ui'];let _0x42cf28=_0x48fd17[_0x5af55d(0x375)](this[_0x5af55d(0x9df)]());_0x42cf28&&(_0x66e15b[_0x5af55d(0x48f)](),_0x66e15b[_0x5af55d(0x932)]()),this[_0x5af55d(0x605)][_0x5af55d(0x8b1)](BattleManager[_0x5af55d(0x2fd)]()||$gameParty[_0x5af55d(0x623)]()[0x0]),this['_inBattleStatusWindow'][_0x5af55d(0x888)](_0x66e15b),this['_inBattleStatusWindow']['show'](),this[_0x5af55d(0x605)][_0x5af55d(0x9be)]();},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x8d1)]=function(){const _0xd05068=_0x58cf34;this[_0xd05068(0xb79)]=![],this[_0xd05068(0xa32)][_0xd05068(0x48f)]();const _0x37b5f=this[_0xd05068(0x605)][_0xd05068(0x285)]();_0x37b5f[_0xd05068(0x68d)](),_0x37b5f[_0xd05068(0x9be)](),_0x37b5f[_0xd05068(0x279)](),this['_inBattleStatusWindow'][_0xd05068(0x48f)](),this['_inBattleStatusWindow'][_0xd05068(0x932)]();},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x9df)]=function(){const _0x1ea48a=_0x58cf34;if($gameTemp['_forcedBattleLayout']!==undefined)return $gameTemp['_forcedBattleLayout'];if(this[_0x1ea48a(0x608)])return this[_0x1ea48a(0x608)];return this[_0x1ea48a(0x608)]=VisuMZ[_0x1ea48a(0xa6b)][_0x1ea48a(0xb05)][_0x1ea48a(0x272)]['Style'][_0x1ea48a(0x5b9)]()[_0x1ea48a(0x989)](),this[_0x1ea48a(0x608)]===_0x1ea48a(0x509)&&!Imported[_0x1ea48a(0x9aa)]&&(this[_0x1ea48a(0x608)]='default'),this[_0x1ea48a(0x608)]==='frontview_ui'&&!Imported[_0x1ea48a(0x53c)]&&(this['_battleLayoutStyle']=_0x1ea48a(0x246)),this[_0x1ea48a(0x608)];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x21d)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xbfc)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xbfc)]=function(){const _0x42a226=_0x58cf34,_0x32f418=this['battleLayoutStyle']();switch(_0x32f418){case _0x42a226(0x83e):return this['calcWindowHeight'](Math['max'](0x1,$gameParty['maxBattleMembers']()),!![]);break;case _0x42a226(0xa21):return this[_0x42a226(0x7b2)](0x4,!![]);break;default:return VisuMZ['BattleCore'][_0x42a226(0x21d)][_0x42a226(0x9a4)](this);break;}},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xa48)]=Scene_Battle['prototype'][_0x58cf34(0x9fb)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x9fb)]=function(){const _0x3bb3a1=_0x58cf34,_0x212744=this[_0x3bb3a1(0x9df)]();switch(_0x212744){case _0x3bb3a1(0xa21):return this[_0x3bb3a1(0x8f2)]();break;case _0x3bb3a1(0x246):case _0x3bb3a1(0x83e):case'xp':case _0x3bb3a1(0x445):default:return VisuMZ[_0x3bb3a1(0xa6b)]['Scene_Battle_helpWindowRect'][_0x3bb3a1(0x9a4)](this);break;}},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x541)]=function(){const _0x2f67d2=_0x58cf34,_0x13ec77=this['battleLayoutStyle']();switch(_0x13ec77){case'xp':case'portrait':return this['statusWindowRectXPStyle']();break;case _0x2f67d2(0xa21):return this[_0x2f67d2(0x505)]();break;case _0x2f67d2(0x246):case _0x2f67d2(0x83e):default:return this[_0x2f67d2(0x39d)]();break;}},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xce4)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xccd)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xccd)]=function(){const _0x35cc37=_0x58cf34,_0x2c976e=this[_0x35cc37(0x9df)]();switch(_0x2c976e){case'xp':case _0x35cc37(0x445):return this[_0x35cc37(0x89c)]();break;case'border':return this[_0x35cc37(0x1ed)]();case _0x35cc37(0x246):case _0x35cc37(0x83e):default:return this[_0x35cc37(0x332)]();break;}},Scene_Battle[_0x58cf34(0x8ef)]['partyCommandWindowRectDefaultStyle']=function(){const _0x5ad287=_0x58cf34,_0x592cb6=VisuMZ['BattleCore'][_0x5ad287(0xb05)]['BattleLayout'],_0x4ffecb=_0x592cb6[_0x5ad287(0xc0f)]||0xc0,_0x480e11=this[_0x5ad287(0xbfc)](),_0x31d4ff=this[_0x5ad287(0x692)]()?Graphics[_0x5ad287(0x9ad)]-_0x4ffecb:0x0,_0x31b657=Graphics[_0x5ad287(0x1cb)]-_0x480e11;return new Rectangle(_0x31d4ff,_0x31b657,_0x4ffecb,_0x480e11);},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xa28)]=function(){const _0x4d5906=_0x58cf34;return this[_0x4d5906(0xccd)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x8ce)]=Scene_Battle['prototype'][_0x58cf34(0x6f8)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x6f8)]=function(){const _0x258b87=_0x58cf34;if(this['_inBattleStatusMode'])return;const _0x2bceab=this[_0x258b87(0x9df)]();switch(_0x2bceab){case'xp':case'portrait':case'border':break;case _0x258b87(0x246):case _0x258b87(0x83e):default:VisuMZ[_0x258b87(0xa6b)][_0x258b87(0x8ce)][_0x258b87(0x9a4)](this);break;}},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x39d)]=function(){const _0x3e0abf=_0x58cf34,_0x4ccd00=VisuMZ[_0x3e0abf(0xa6b)]['Settings'][_0x3e0abf(0x272)],_0x211059=Window_BattleStatus['prototype']['extraHeight'](),_0x4ce6d5=Graphics[_0x3e0abf(0x9ad)]-(_0x4ccd00['CommandWidth']||0xc0),_0x3f7873=this['windowAreaHeight']()+_0x211059,_0x5ed745=this['isRightInputMode']()?0x0:Graphics[_0x3e0abf(0x9ad)]-_0x4ce6d5,_0x99833f=Graphics['boxHeight']-_0x3f7873+_0x211059;return new Rectangle(_0x5ed745,_0x99833f,_0x4ce6d5,_0x3f7873);},Scene_Battle['prototype']['statusWindowRectXPStyle']=function(){const _0x40815e=_0x58cf34,_0x5c409c=Window_BattleStatus[_0x40815e(0x8ef)][_0x40815e(0x673)](),_0x292724=Graphics[_0x40815e(0x9ad)],_0x37ae34=this['windowAreaHeight']()+_0x5c409c,_0x4bc4a8=0x0,_0xcd4e50=Graphics[_0x40815e(0x1cb)]-_0x37ae34+_0x5c409c;return new Rectangle(_0x4bc4a8,_0xcd4e50,_0x292724,_0x37ae34);},Scene_Battle['prototype'][_0x58cf34(0x89c)]=function(){const _0x2b3081=_0x58cf34,_0x1d0c0d=Graphics[_0x2b3081(0x9ad)]/0x2,_0x4057ca=this[_0x2b3081(0x7b2)](VisuMZ[_0x2b3081(0xa6b)]['Settings']['BattleLayout']['XPActorCommandLines'],!![]),_0x557bad=Math[_0x2b3081(0x92e)]((Graphics[_0x2b3081(0x9ad)]-_0x1d0c0d)/0x2),_0x3a322a=Graphics[_0x2b3081(0x1cb)]-_0x4057ca-this['statusWindowRectXPStyle']()[_0x2b3081(0x725)];return new Rectangle(_0x557bad,_0x3a322a,_0x1d0c0d,_0x4057ca);},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x8f2)]=function(){const _0x2d1c85=_0x58cf34,_0x3b59ab=Graphics[_0x2d1c85(0xc78)],_0x160d48=Math['round']((Graphics['boxWidth']-_0x3b59ab)/0x2),_0x33b89a=this[_0x2d1c85(0x1bf)](),_0x5ff7ea=(Graphics[_0x2d1c85(0x725)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x160d48,_0x5ff7ea,_0x3b59ab,_0x33b89a);},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x505)]=function(){const _0x2c5f4b=_0x58cf34,_0x541d6a=Graphics[_0x2c5f4b(0xc78)],_0x295784=Math[_0x2c5f4b(0x92e)]((Graphics[_0x2c5f4b(0x9ad)]-_0x541d6a)/0x2),_0x21341a=this[_0x2c5f4b(0x7b2)](0x4,!![]),_0x5b7fe9=Graphics[_0x2c5f4b(0x1cb)]-_0x21341a+(Graphics[_0x2c5f4b(0x725)]-Graphics[_0x2c5f4b(0x1cb)])/0x2;return new Rectangle(_0x295784,_0x5b7fe9,_0x541d6a,_0x21341a);},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x1ed)]=function(){const _0x4db5f4=_0x58cf34,_0x341f94=Math[_0x4db5f4(0x951)](Graphics[_0x4db5f4(0xc78)]/0x3),_0x279d13=this[_0x4db5f4(0x692)]()?(Graphics[_0x4db5f4(0xc78)]+Graphics['boxWidth'])/0x2-_0x341f94:(Graphics[_0x4db5f4(0xc78)]-Graphics[_0x4db5f4(0x9ad)])/-0x2,_0x5272be=this[_0x4db5f4(0x8f2)](),_0x10846c=_0x5272be['y']+_0x5272be[_0x4db5f4(0x725)],_0xc64d81=this['statusWindowRectBorderStyle'](),_0x1e0b43=_0xc64d81['y']-_0x10846c;return new Rectangle(_0x279d13,_0x10846c,_0x341f94,_0x1e0b43);},Scene_Battle[_0x58cf34(0x8ef)]['skillItemWindowRectBorderStyle']=function(){const _0x1f18f4=_0x58cf34,_0xd40cc0=Math[_0x1f18f4(0xafc)](Graphics[_0x1f18f4(0xc78)]/0x3),_0x28a7a0=Math[_0x1f18f4(0x92e)]((Graphics[_0x1f18f4(0x9ad)]-_0xd40cc0)/0x2),_0x4943fc=this[_0x1f18f4(0x1ed)](),_0x13060d=_0x4943fc['y'],_0x2271d5=_0x4943fc[_0x1f18f4(0x725)];return new Rectangle(_0x28a7a0,_0x13060d,_0xd40cc0,_0x2271d5);},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x3ee)]=function(){const _0x2ae196=_0x58cf34;this[_0x2ae196(0x93a)]['y']=this[_0x2ae196(0xa32)]['y']+this[_0x2ae196(0xa32)]['height'],this['isRightInputMode']()?this[_0x2ae196(0x9df)]()===_0x2ae196(0xa21)?this[_0x2ae196(0x93a)]['x']=0x8:this['_cancelButton']['x']=-this['_cancelButton'][_0x2ae196(0xc78)]-0x4:this[_0x2ae196(0x93a)]['x']=Graphics[_0x2ae196(0xc78)]-(Graphics['width']-Graphics[_0x2ae196(0x9ad)])/0x2-this[_0x2ae196(0x93a)][_0x2ae196(0xc78)]-0x4;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x35c)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x5a9)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x5a9)]=function(){const _0x204f2e=_0x58cf34;if(this['battleLayoutStyle']()===_0x204f2e(0xa21))return this['skillItemWindowRectBorderStyle']();else return this['isSkillItemWindowsMiddle']()?this[_0x204f2e(0x69a)]():VisuMZ[_0x204f2e(0xa6b)][_0x204f2e(0x35c)][_0x204f2e(0x9a4)](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xc27)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xb0c)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xb0c)]=function(){const _0x26eef5=_0x58cf34;if(this['battleLayoutStyle']()==='border')return this['skillItemWindowRectBorderStyle']();else return this[_0x26eef5(0x67f)]()?this[_0x26eef5(0x69a)]():VisuMZ[_0x26eef5(0xa6b)][_0x26eef5(0xc27)]['call'](this);},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x67f)]=function(){const _0x274564=_0x58cf34;return VisuMZ['BattleCore'][_0x274564(0xb05)]['BattleLayout']['SkillItemMiddleLayout'];},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x69a)]=function(){const _0x2389ea=_0x58cf34,_0x1579aa=Sprite_Button[_0x2389ea(0x8ef)][_0x2389ea(0x46d)]()*0x2+0x4;let _0x514052=Graphics[_0x2389ea(0x9ad)]-_0x1579aa;Imported[_0x2389ea(0xaa1)]&&SceneManager[_0x2389ea(0x3f9)]()&&(_0x514052+=_0x1579aa);const _0x40b7cb=this['helpAreaBottom'](),_0x39dd22=Graphics[_0x2389ea(0x1cb)]-_0x40b7cb-this[_0x2389ea(0x541)]()['height']+Window_BattleStatus[_0x2389ea(0x8ef)][_0x2389ea(0x673)](),_0x31bc2c=0x0;return new Rectangle(_0x31bc2c,_0x40b7cb,_0x514052,_0x39dd22);},VisuMZ[_0x58cf34(0xa6b)]['Scene_Battle_startActorSelection']=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x781)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x781)]=function(){const _0x5c5542=_0x58cf34;VisuMZ['BattleCore'][_0x5c5542(0x959)][_0x5c5542(0x9a4)](this),this[_0x5c5542(0xbba)]();},VisuMZ[_0x58cf34(0xa6b)]['Scene_Battle_startEnemySelection']=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x547)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x547)]=function(){const _0x4271a2=_0x58cf34;VisuMZ[_0x4271a2(0xa6b)][_0x4271a2(0x3c7)][_0x4271a2(0x9a4)](this),this[_0x4271a2(0xa6e)][_0x4271a2(0x7dd)](),this[_0x4271a2(0xbba)]();},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xbba)]=function(){const _0x2fca5b=_0x58cf34,_0x4ee72f=this['battleLayoutStyle']();['xp','portrait',_0x2fca5b(0xa21)][_0x2fca5b(0x375)](_0x4ee72f)&&this[_0x2fca5b(0x30f)]['close'](),(_0x4ee72f==='border'||this[_0x2fca5b(0x67f)]())&&(this[_0x2fca5b(0x611)][_0x2fca5b(0x932)](),this[_0x2fca5b(0x2fb)]['close']());},VisuMZ['BattleCore'][_0x58cf34(0x23a)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xbbc)],Scene_Battle[_0x58cf34(0x8ef)]['onActorOk']=function(){const _0xaf05ee=_0x58cf34;VisuMZ[_0xaf05ee(0xa6b)]['Scene_Battle_onActorOk'][_0xaf05ee(0x9a4)](this),this[_0xaf05ee(0xb2b)]();},Scene_Battle['prototype'][_0x58cf34(0xcce)]=function(){const _0x2d44ef=_0x58cf34;return[_0x2d44ef(0x873),'guard','singleSkill'][_0x2d44ef(0x375)](this['_actorCommandWindow'][_0x2d44ef(0xaec)]());},VisuMZ['BattleCore'][_0x58cf34(0xb9c)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xc79)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xc79)]=function(){const _0xa74cd8=_0x58cf34;this[_0xa74cd8(0xcce)]()?(this['_statusWindow']['show'](),this[_0xa74cd8(0x79b)]['hide'](),this[_0xa74cd8(0x30f)][_0xa74cd8(0x279)]()):VisuMZ[_0xa74cd8(0xa6b)]['Scene_Battle_onActorCancel'][_0xa74cd8(0x9a4)](this),this[_0xa74cd8(0x38b)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x68e)]=Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x546)],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x546)]=function(){const _0x52b500=_0x58cf34;if(!this['_enemyWindow'][_0x52b500(0xc20)]()){this['_enemyWindow'][_0x52b500(0x279)]();return;}const _0x4cc6e9=BattleManager['inputtingAction']();_0x4cc6e9[_0x52b500(0xba2)](this[_0x52b500(0xa6e)][_0x52b500(0xc20)]()),this[_0x52b500(0xa6e)][_0x52b500(0x213)](),VisuMZ['BattleCore']['Scene_Battle_onEnemyOk'][_0x52b500(0x9a4)](this),this['okTargetSelectionVisibility']();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb5d)]=Scene_Battle['prototype']['onEnemyCancel'],Scene_Battle['prototype']['onEnemyCancel']=function(){const _0x44c080=_0x58cf34;this['isNonSubmenuCancel']()?(this['_statusWindow'][_0x44c080(0x68d)](),this[_0x44c080(0xa6e)][_0x44c080(0x48f)](),this[_0x44c080(0x30f)][_0x44c080(0x279)]()):VisuMZ[_0x44c080(0xa6b)][_0x44c080(0xb5d)]['call'](this),this[_0x44c080(0x38b)](),this['_enemyWindow'][_0x44c080(0x213)]();},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xb2b)]=function(){const _0x1a89bd=_0x58cf34,_0x170d2f=this['battleLayoutStyle']();(_0x170d2f===_0x1a89bd(0xa21)||this[_0x1a89bd(0x67f)]())&&(this['_skillWindow'][_0x1a89bd(0x9be)](),this[_0x1a89bd(0x611)][_0x1a89bd(0x6c5)]&&this[_0x1a89bd(0x611)]['show'](),this[_0x1a89bd(0x2fb)][_0x1a89bd(0x9be)](),this[_0x1a89bd(0x2fb)]['active']&&this[_0x1a89bd(0x2fb)][_0x1a89bd(0x68d)]());},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x38b)]=function(){const _0x20052f=_0x58cf34,_0x7fe2ab=this[_0x20052f(0x9df)]();['xp',_0x20052f(0x445),_0x20052f(0xa21)][_0x20052f(0x375)](_0x7fe2ab)&&this['_actorCommandWindow'][_0x20052f(0x9be)](),this[_0x20052f(0xb2b)]();},Sprite_Battler[_0x58cf34(0xb41)]=VisuMZ[_0x58cf34(0xa6b)]['Settings']['Actor'][_0x58cf34(0x790)],VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x746)]=Sprite_Battler['prototype'][_0x58cf34(0x7c8)],Sprite_Battler['prototype']['initMembers']=function(){const _0x2dfcc8=_0x58cf34;VisuMZ[_0x2dfcc8(0xa6b)][_0x2dfcc8(0x746)][_0x2dfcc8(0x9a4)](this),this[_0x2dfcc8(0x84c)]();if(this['constructor']===Sprite_Enemy)this[_0x2dfcc8(0x77f)]();this['createDistortionSprite']();},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x84c)]=function(){const _0x14e781=_0x58cf34;this[_0x14e781(0xc19)]=0x0,this['_baseY']=0x0,this[_0x14e781(0xb74)]=0x0,this[_0x14e781(0x557)]=0x0,this[_0x14e781(0x853)]=0x0,this[_0x14e781(0x843)]=0x0,this[_0x14e781(0x5e8)]=_0x14e781(0x7e6),this[_0x14e781(0x982)]=0x0,this['_jumpMaxHeight']=0x0,this[_0x14e781(0x92c)]=0x0,this['_jumpWholeDuration']=0x0,this[_0x14e781(0x7fc)]=0xff,this[_0x14e781(0x3b4)]=0x0,this['_opacityWholeDuration']=0x0,this[_0x14e781(0x3b3)]=_0x14e781(0x7e6),this['_currentAngle']=0x0,this[_0x14e781(0xae7)]=0x0,this[_0x14e781(0xa94)]=0x0,this[_0x14e781(0x551)]=0x0,this[_0x14e781(0x376)]=_0x14e781(0x7e6),this[_0x14e781(0x8b4)]=!![],this[_0x14e781(0x61a)]=0x0,this[_0x14e781(0x682)]=0x0,this[_0x14e781(0x815)]=0x0,this[_0x14e781(0x522)]=0x0,this[_0x14e781(0x462)]=0x0,this[_0x14e781(0x773)]=0x0,this['_skewEasing']=_0x14e781(0x7e6),this[_0x14e781(0x6d3)]=0x1,this[_0x14e781(0x3e7)]=0x1,this[_0x14e781(0x79c)]=0x1,this[_0x14e781(0x31d)]=0x1,this['_growDuration']=0x0,this[_0x14e781(0x439)]=0x0,this[_0x14e781(0x600)]=_0x14e781(0x7e6),this[_0x14e781(0x8c8)]=0x1,this[_0x14e781(0x63f)]=0x0,this['_targetHomeY']=0x0,this[_0x14e781(0x817)]=0x0,this[_0x14e781(0x4b9)]=0x0,this['_homeEasing']=_0x14e781(0x7e6),this[_0x14e781(0xbb2)]=0x0,this['_shakeFlinchPower']=0x0;},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x77f)]=function(){const _0xa33a0b=_0x58cf34;this[_0xa33a0b(0x7f7)]=new Sprite(),this[_0xa33a0b(0x7f7)][_0xa33a0b(0xa41)]=ImageManager[_0xa33a0b(0xace)](_0xa33a0b(0xbcc)),this[_0xa33a0b(0x7f7)]['bitmap'][_0xa33a0b(0x78d)]=VisuMZ[_0xa33a0b(0xa6b)][_0xa33a0b(0xb05)][_0xa33a0b(0xb3d)][_0xa33a0b(0x27e)],this[_0xa33a0b(0x7f7)][_0xa33a0b(0x9cc)]['x']=0.5,this['_shadowSprite']['anchor']['y']=0.5,this['_shadowSprite']['y']=-0x2,this[_0xa33a0b(0x7f7)][_0xa33a0b(0x1e4)]=![],this['addChild'](this[_0xa33a0b(0x7f7)]);},Sprite_Battler[_0x58cf34(0x8ef)]['createDistortionSprite']=function(){const _0x524535=_0x58cf34;this[_0x524535(0x426)]=new Sprite(),this[_0x524535(0x426)][_0x524535(0x9cc)]['x']=0.5,this['_distortionSprite'][_0x524535(0x9cc)]['y']=0.5,this[_0x524535(0x3ac)](this[_0x524535(0x426)]);},Sprite_Battler['prototype'][_0x58cf34(0x713)]=function(){const _0x3670eb=_0x58cf34;if(this['getDragonbones']&&this[_0x3670eb(0xc15)]()){Sprite[_0x3670eb(0x8ef)][_0x3670eb(0x713)][_0x3670eb(0x9a4)](this);return;}const _0x5625de=this['_distortionSprite'];if(!_0x5625de)return;!_0x5625de[_0x3670eb(0x6b4)]&&_0x5625de[_0x3670eb(0x4c7)](),_0x5625de[_0x3670eb(0x6b4)]['setHue'](this['_hue']),_0x5625de[_0x3670eb(0x6b4)][_0x3670eb(0x602)](this[_0x3670eb(0x508)]),_0x5625de[_0x3670eb(0x6b4)]['setColorTone'](this[_0x3670eb(0xa70)]);},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xa49)]=function(){const _0x32018e=_0x58cf34;if(!this['_distortionSprite'])return;if(this['_shadowSprite']){const _0x57f96b=this[_0x32018e(0xc8f)](this[_0x32018e(0x426)]);this[_0x32018e(0x7ec)](this[_0x32018e(0x7f7)],_0x57f96b),this[_0x32018e(0xae9)]();}this[_0x32018e(0x718)]&&this[_0x32018e(0x426)]['addChild'](this['_svBattlerSprite']),this[_0x32018e(0x9d4)]&&this[_0x32018e(0x426)][_0x32018e(0x3ac)](this[_0x32018e(0x9d4)]),this[_0x32018e(0x61e)]&&this[_0x32018e(0x426)][_0x32018e(0x3ac)](this[_0x32018e(0x61e)]),this[_0x32018e(0xbd8)]&&this['_distortionSprite']['addChild'](this[_0x32018e(0xbd8)]),this['_dragonbonesSpriteContainer']&&this[_0x32018e(0x426)]['addChild'](this['_dragonbonesSpriteContainer']);},Sprite_Battler[_0x58cf34(0x8ef)]['updateShadowVisibility']=function(){const _0x36a736=_0x58cf34;if(!this[_0x36a736(0x7f7)])return;if(this[_0x36a736(0xc92)]&&this['_battler'][_0x36a736(0xadd)]()){const _0x1dfc17=this[_0x36a736(0x7f7)]['bitmap'];this[_0x36a736(0x7f7)][_0x36a736(0x4a5)](0x0,0x0,_0x1dfc17[_0x36a736(0xc78)],_0x1dfc17['height']);}else this['_shadowSprite'][_0x36a736(0x4a5)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x385)]=function(){const _0x46062f=_0x58cf34;return SceneManager['isSceneBattle']()?SceneManager[_0x46062f(0xb85)][_0x46062f(0x5ae)][_0x46062f(0x9e4)]:this[_0x46062f(0x504)];},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x797)]=function(_0x140f6d,_0x23e0e3){const _0x581ab4=_0x58cf34;if(!this[_0x581ab4(0xc92)][_0x581ab4(0xa24)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x44efa1=VisuMZ[_0x581ab4(0xa6b)][_0x581ab4(0xb05)][_0x581ab4(0x693)],_0x39d015=new Sprite_Damage();_0x39d015[_0x581ab4(0x4b5)]=_0x44efa1['PopupDuration'],this[_0x581ab4(0x5f2)](_0x39d015),_0x39d015[_0x581ab4(0x797)](_0x140f6d,_0x23e0e3),this['addDamageSprite'](_0x39d015);},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x6aa)]=function(_0x1a96d3,_0x2afbf9,_0x5227aa){const _0x2bcd1c=_0x58cf34;if(!this['_battler']['isSpriteVisible']())return;if(BattleManager[_0x2bcd1c(0xa19)]())return;const _0x3fdaec=VisuMZ[_0x2bcd1c(0xa6b)][_0x2bcd1c(0xb05)]['Damage'],_0x518fc3=new Sprite_Damage();_0x518fc3[_0x2bcd1c(0x4b5)]=_0x3fdaec[_0x2bcd1c(0x5f3)],this[_0x2bcd1c(0x5f2)](_0x518fc3),_0x518fc3[_0x2bcd1c(0x6aa)](_0x1a96d3,_0x2afbf9,_0x5227aa),this[_0x2bcd1c(0x435)](_0x518fc3);},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x6fe)]=function(){const _0x40e268=_0x58cf34;if(!this[_0x40e268(0xc92)][_0x40e268(0x763)]())return;while(this[_0x40e268(0xc92)][_0x40e268(0x763)]()){this[_0x40e268(0xc92)][_0x40e268(0xa24)]()&&this[_0x40e268(0x37c)]();}this['_battler'][_0x40e268(0xa39)](),this[_0x40e268(0xc92)][_0x40e268(0x5dd)]();},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x37c)]=function(){const _0x3a3c62=_0x58cf34;if(BattleManager[_0x3a3c62(0xa19)]())return;const _0x50597b=VisuMZ[_0x3a3c62(0xa6b)][_0x3a3c62(0xb05)][_0x3a3c62(0x693)],_0x2d2c3b=new Sprite_Damage();_0x2d2c3b[_0x3a3c62(0x4b5)]=_0x50597b[_0x3a3c62(0x5f3)],this[_0x3a3c62(0x5f2)](_0x2d2c3b),_0x2d2c3b[_0x3a3c62(0x6e1)](this[_0x3a3c62(0xc92)]),_0x2d2c3b[_0x3a3c62(0x4b6)](this[_0x3a3c62(0xc92)]),this['addDamageSprite'](_0x2d2c3b);},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x435)]=function(_0x51caf6){const _0x42be3b=_0x58cf34;this[_0x42be3b(0x365)][_0x42be3b(0x6db)](_0x51caf6);if(this[_0x42be3b(0x8f3)]()){const _0x209fe9=SceneManager[_0x42be3b(0xb85)][_0x42be3b(0x4f1)];if(_0x209fe9)_0x209fe9[_0x42be3b(0x435)](_0x51caf6,this[_0x42be3b(0xc92)]);}else{this[_0x42be3b(0x385)]()['addChild'](_0x51caf6);if(SceneManager['isBattleFlipped']())_0x51caf6[_0x42be3b(0x527)]['x']=-0x1;}},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x8f3)]=function(){const _0x4ce895=_0x58cf34;return!$gameSystem[_0x4ce895(0xc41)]()&&this[_0x4ce895(0xc92)]&&this[_0x4ce895(0xc92)][_0x4ce895(0x40c)]();return!$gameSystem['isSideView']()&&this[_0x4ce895(0xc92)]&&this['_battler']['isActor']()&&Window_BattleStatus[_0x4ce895(0x8ef)][_0x4ce895(0x9df)]()==='portrait';},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x5f2)]=function(_0x3135b2){const _0x32918c=_0x58cf34;this[_0x32918c(0x4b3)](_0x3135b2,!![]);const _0x1c1c0d=VisuMZ['BattleCore']['Settings'][_0x32918c(0x693)],_0x1191a2=SceneManager[_0x32918c(0x52c)]()?-0x1:0x1;if(_0x1c1c0d[_0x32918c(0x3ce)])for(const _0x1a093c of this[_0x32918c(0x365)]){_0x1a093c['x']+=_0x1c1c0d[_0x32918c(0x33a)]*_0x1191a2,_0x1a093c['y']+=_0x1c1c0d[_0x32918c(0x3a2)];}else{const _0x1dd82c=this[_0x32918c(0x365)][this['_damages']['length']-0x1];_0x1dd82c&&(_0x3135b2['x']=_0x1dd82c['x']+_0x1c1c0d[_0x32918c(0x33a)]*_0x1191a2,_0x3135b2['y']=_0x1dd82c['y']+_0x1c1c0d['PopupShiftY']);}},Sprite_Battler['prototype'][_0x58cf34(0x4b3)]=function(_0x24c35a,_0x17c328){const _0x2179ce=_0x58cf34,_0x1856c5=SceneManager[_0x2179ce(0x52c)]()?-0x1:0x1;let _0x1a46b2=this['_baseX'];_0x1a46b2+=this[_0x2179ce(0x1da)]();let _0x167362=this[_0x2179ce(0xa73)];const _0x177b38=this[_0x2179ce(0x426)]['scale']['y'];_0x167362+=this[_0x2179ce(0xb17)]();const _0x27c3a4=SceneManager[_0x2179ce(0xb85)][_0x2179ce(0x4f1)];if(_0x27c3a4&&this[_0x2179ce(0x504)]===_0x27c3a4){_0x1a46b2+=_0x27c3a4['x']-this[_0x2179ce(0x81d)]();const _0x3a288d=_0x27c3a4['lineHeight']()*0x3/0x4;_0x167362=_0x27c3a4['y']+_0x3a288d,_0x167362=Math[_0x2179ce(0xa8f)](_0x167362,_0x27c3a4['y']+this['y']-this[_0x2179ce(0x725)]+_0x3a288d);}_0x24c35a['x']=Math[_0x2179ce(0x92e)](_0x1a46b2+this[_0x2179ce(0x81d)]()*_0x1856c5),_0x24c35a['y']=Math[_0x2179ce(0x92e)](_0x167362+this[_0x2179ce(0x66b)]());},VisuMZ[_0x58cf34(0xa6b)]['Sprite_Battler_damageOffsetX']=Sprite_Battler['prototype'][_0x58cf34(0x81d)],Sprite_Battler[_0x58cf34(0x8ef)]['damageOffsetX']=function(){const _0x1c4f0a=_0x58cf34;let _0x17534b=VisuMZ[_0x1c4f0a(0xa6b)][_0x1c4f0a(0x9c7)][_0x1c4f0a(0x9a4)](this),_0x29b36f=VisuMZ[_0x1c4f0a(0xa6b)][_0x1c4f0a(0xb05)][_0x1c4f0a(0x693)][_0x1c4f0a(0x601)]||0x0;return _0x29b36f+=this[_0x1c4f0a(0xc92)][_0x1c4f0a(0x5b4)](),Math['round'](_0x17534b+_0x29b36f);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x961)]=Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x66b)],Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x66b)]=function(){const _0x247a9f=_0x58cf34;let _0x4ef766=VisuMZ[_0x247a9f(0xa6b)][_0x247a9f(0x961)][_0x247a9f(0x9a4)](this);switch(this['_battler']['damagePopupPosition']()){case'head':_0x4ef766-=this[_0x247a9f(0x725)]*this[_0x247a9f(0x527)]['y'];break;case'center':_0x4ef766-=this[_0x247a9f(0x725)]*this[_0x247a9f(0x527)]['y']*0.5;break;}let _0x362ca=VisuMZ[_0x247a9f(0xa6b)]['Settings'][_0x247a9f(0x693)][_0x247a9f(0xa0c)]||0x0;return _0x362ca+=this['_battler'][_0x247a9f(0x434)](),Math[_0x247a9f(0x92e)](_0x4ef766+_0x362ca);},Sprite_Actor[_0x58cf34(0x8ef)]['damageOffsetX']=function(){const _0x38f197=_0x58cf34;return Sprite_Battler[_0x38f197(0x8ef)][_0x38f197(0x81d)]['call'](this);},Sprite_Actor[_0x58cf34(0x8ef)]['damageOffsetY']=function(){const _0x174cfe=_0x58cf34;return Sprite_Battler['prototype']['damageOffsetY'][_0x174cfe(0x9a4)](this);},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x4be)]=function(_0xe61dbc){const _0x2f23cb=_0x58cf34;this[_0x2f23cb(0x8f3)]()?SceneManager[_0x2f23cb(0xb85)][_0x2f23cb(0x4f1)][_0x2f23cb(0x7d0)](_0xe61dbc):(this['damageContainer']()['removeChild'](_0xe61dbc),this[_0x2f23cb(0x365)][_0x2f23cb(0x61f)](_0xe61dbc),_0xe61dbc['destroy']());},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x42b)]=Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xa09)],Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xa09)]=function(_0x55b944,_0x53f2fd){const _0x212d81=_0x58cf34,_0x1acadc=VisuMZ[_0x212d81(0xa6b)][_0x212d81(0xb05)];if(this[_0x212d81(0x408)]===Sprite_Actor)_0x55b944+=_0x1acadc[_0x212d81(0xb3d)][_0x212d81(0x6da)]||0x0,_0x53f2fd+=_0x1acadc['Actor'][_0x212d81(0x5fb)]||0x0;else this[_0x212d81(0x408)]===Sprite_Enemy&&(_0x55b944+=_0x1acadc[_0x212d81(0x48b)]['OffsetX']||0x0,_0x53f2fd+=_0x1acadc[_0x212d81(0x48b)]['OffsetY']||0x0);this[_0x212d81(0xc92)]&&(_0x55b944=this['_battler'][_0x212d81(0x697)]??_0x55b944,_0x53f2fd=this['_battler'][_0x212d81(0xbfe)]??_0x53f2fd),VisuMZ['BattleCore'][_0x212d81(0x42b)][_0x212d81(0x9a4)](this,_0x55b944,_0x53f2fd),this[_0x212d81(0x63f)]=this[_0x212d81(0x43b)],this['_targetHomeY']=this[_0x212d81(0xb73)],this['_homeDuration']=0x0,this['_homeWholeDuration']=0x0,this[_0x212d81(0xcb9)]=_0x212d81(0x7e6);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x931)]=Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x6a2)],Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x6a2)]=function(){const _0x2c8a4f=_0x58cf34;VisuMZ[_0x2c8a4f(0xa6b)]['Sprite_Battler_update'][_0x2c8a4f(0x9a4)](this),!this[_0x2c8a4f(0xc92)]&&this[_0x2c8a4f(0x2df)]&&(this[_0x2c8a4f(0x2df)][_0x2c8a4f(0x1e4)]=![]);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x674)]=Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x41f)],Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x41f)]=function(){const _0x378209=_0x58cf34;this[_0x378209(0x81e)](),this[_0x378209(0x229)](),this['updateSpin'](),this[_0x378209(0x88d)](),VisuMZ[_0x378209(0xa6b)][_0x378209(0x674)][_0x378209(0x9a4)](this),this[_0x378209(0x26e)](),this['updateShakeFlinch']();if(this[_0x378209(0x408)]===Sprite_Enemy)this[_0x378209(0xa91)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x5cc)]=Sprite_Battler['prototype'][_0x58cf34(0x2a5)],Sprite_Battler['prototype'][_0x58cf34(0x2a5)]=function(){const _0x5b097c=_0x58cf34;this[_0x5b097c(0x545)](),VisuMZ[_0x5b097c(0xa6b)][_0x5b097c(0x5cc)]['call'](this),this[_0x5b097c(0x417)](),this[_0x5b097c(0xc39)]();},Sprite_Battler[_0x58cf34(0x8ef)]['updateSelectionEffect']=function(){const _0x1dbfc5=_0x58cf34,_0x51b753=this[_0x1dbfc5(0x4c6)]();if(this[_0x1dbfc5(0xc92)]['isSelected']())this[_0x1dbfc5(0x7d5)]++,Graphics[_0x1dbfc5(0x458)]%0x1e<0xf?_0x51b753['setBlendColor']([0xff,0xff,0xff,0x40]):_0x51b753[_0x1dbfc5(0x602)]([0x0,0x0,0x0,0x0]);else this['_selectionEffectCount']>0x0&&(this[_0x1dbfc5(0x7d5)]=0x0,_0x51b753['setBlendColor']([0x0,0x0,0x0,0x0]));},Sprite_Battler['prototype'][_0x58cf34(0x7a6)]=function(_0x3a7032,_0x3e75df){const _0x33d61e=_0x58cf34,_0x3da9ee=VisuMZ[_0x33d61e(0xa6b)]['Settings'];if(this[_0x33d61e(0x408)]===Sprite_Actor)_0x3a7032+=_0x3da9ee['Actor'][_0x33d61e(0x6da)]||0x0,_0x3e75df+=_0x3da9ee['Actor'][_0x33d61e(0x5fb)]||0x0;else this[_0x33d61e(0x408)]===Sprite_Enemy&&(_0x3a7032+=_0x3da9ee[_0x33d61e(0x48b)][_0x33d61e(0x6da)]||0x0,_0x3e75df+=_0x3da9ee[_0x33d61e(0x48b)][_0x33d61e(0x5fb)]||0x0);const _0x184729=_0x3a7032-this[_0x33d61e(0x43b)],_0x558b0d=_0x3e75df-this[_0x33d61e(0xb73)];this[_0x33d61e(0x43b)]=_0x3a7032,this[_0x33d61e(0xb73)]=_0x3e75df,this['_offsetX']-=_0x184729,this[_0x33d61e(0x4df)]-=_0x558b0d,this[_0x33d61e(0x6f4)]-=_0x184729,this[_0x33d61e(0x56a)]-=_0x558b0d,this[_0x33d61e(0x2a5)]();},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x77c)]=function(_0x12a298,_0x18563e,_0x7ba2c8,_0x362516){const _0x5cb0d7=_0x58cf34,_0x45a3c1=VisuMZ[_0x5cb0d7(0xa6b)][_0x5cb0d7(0xb05)];if(this[_0x5cb0d7(0x408)]===Sprite_Actor)_0x12a298+=_0x45a3c1['Actor'][_0x5cb0d7(0x6da)]||0x0,_0x18563e+=_0x45a3c1[_0x5cb0d7(0xb3d)][_0x5cb0d7(0x5fb)]||0x0;else this[_0x5cb0d7(0x408)]===Sprite_Enemy&&(_0x12a298+=_0x45a3c1[_0x5cb0d7(0x48b)][_0x5cb0d7(0x6da)]||0x0,_0x18563e+=_0x45a3c1['Enemy'][_0x5cb0d7(0x5fb)]||0x0);(this[_0x5cb0d7(0x63f)]!==_0x12a298||this[_0x5cb0d7(0x56c)]!==_0x18563e)&&(this[_0x5cb0d7(0x63f)]=_0x12a298,this[_0x5cb0d7(0x56c)]=_0x18563e,this[_0x5cb0d7(0x817)]=_0x7ba2c8,this['_homeWholeDuration']=_0x7ba2c8,this[_0x5cb0d7(0xcb9)]=_0x362516,_0x7ba2c8<=0x0&&this[_0x5cb0d7(0xa66)]());},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x545)]=function(){const _0x4ea1a6=_0x58cf34;if(this[_0x4ea1a6(0x817)]<=0x0)return;const _0x455edb=this[_0x4ea1a6(0x817)],_0x5bc154=this[_0x4ea1a6(0x4b9)],_0x430359=this[_0x4ea1a6(0xcb9)];Imported[_0x4ea1a6(0xaa1)]?(this['_homeX']=this[_0x4ea1a6(0x502)](this[_0x4ea1a6(0x43b)],this[_0x4ea1a6(0x63f)],_0x455edb,_0x5bc154,_0x430359),this['_homeY']=this['applyEasing'](this[_0x4ea1a6(0xb73)],this['_targetHomeY'],_0x455edb,_0x5bc154,_0x430359)):(this['_homeX']=(this[_0x4ea1a6(0x43b)]*(_0x455edb-0x1)+this[_0x4ea1a6(0x63f)])/_0x455edb,this[_0x4ea1a6(0xb73)]=(this[_0x4ea1a6(0xb73)]*(_0x455edb-0x1)+this[_0x4ea1a6(0x56c)])/_0x455edb);this['_homeDuration']--;if(this[_0x4ea1a6(0x817)]<=0x0)this[_0x4ea1a6(0xa66)]();},Sprite_Battler[_0x58cf34(0x8ef)]['onHomeMoveEnd']=function(){const _0x4ae8c2=_0x58cf34;this['_homeX']=this[_0x4ae8c2(0x63f)],this[_0x4ae8c2(0xb73)]=this[_0x4ae8c2(0x56c)];},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x417)]=function(){const _0x21c2f8=_0x58cf34;this[_0x21c2f8(0xc19)]=this['x'],this[_0x21c2f8(0xa73)]=this['y'],this[_0x21c2f8(0xb88)](),this['updateJump'](),this['x']+=this[_0x21c2f8(0x1da)](),this['y']+=this['extraPositionY'](),this['y']+=this[_0x21c2f8(0xca8)](),this['x']=Math[_0x21c2f8(0x951)](this['x']),this['y']=Math['floor'](this['y']);},Sprite_Battler[_0x58cf34(0x8ef)]['extraPositionX']=function(){let _0x40c4ce=0x0;return _0x40c4ce;},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xb17)]=function(){const _0x36140a=_0x58cf34;let _0x309c9e=0x0;return this[_0x36140a(0xc92)]&&!this[_0x36140a(0xc92)][_0x36140a(0x9f8)]()&&(_0x309c9e-=this[_0x36140a(0xb74)],_0x309c9e-=this[_0x36140a(0x982)]),_0x309c9e;},Sprite_Battler[_0x58cf34(0x8ef)]['extraPositionScaledY']=function(){const _0x3a8066=_0x58cf34;let _0x5b8784=0x0;if(this[_0x3a8066(0x426)]&&this[_0x3a8066(0x408)]!==Sprite_SvEnemy){const _0x4bca10=this[_0x3a8066(0x426)][_0x3a8066(0x527)]['y'];_0x5b8784-=(_0x4bca10-0x1)*this[_0x3a8066(0x725)];}return _0x5b8784;},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x88d)]=function(){const _0x17425a=_0x58cf34,_0x33c88b=this[_0x17425a(0xc92)]&&this[_0x17425a(0xc92)][_0x17425a(0x69c)]();this[_0x17425a(0x8c8)]=(_0x33c88b?-0x1:0x1)*Math[_0x17425a(0x85c)](this['scale']['x']);},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x597)]=function(_0x13c4ec,_0x331be8,_0x1d2b48){const _0x4e03db=_0x58cf34;if(!this[_0x4e03db(0x4f3)]())return;if(this[_0x4e03db(0x557)]===_0x13c4ec)return;this[_0x4e03db(0x557)]=_0x13c4ec,this[_0x4e03db(0x853)]=_0x331be8,this[_0x4e03db(0x843)]=_0x331be8,this[_0x4e03db(0x5e8)]=_0x1d2b48||_0x4e03db(0x7e6);if(_0x331be8<=0x0)this[_0x4e03db(0xb74)]=_0x13c4ec;},Sprite_Battler['prototype'][_0x58cf34(0xb88)]=function(){const _0x434a06=_0x58cf34;if(this[_0x434a06(0x853)]<=0x0)return;const _0x272100=this[_0x434a06(0x853)],_0x5a5827=this[_0x434a06(0x843)],_0x246dd0=this[_0x434a06(0x5e8)];Imported[_0x434a06(0xaa1)]?this['_floatHeight']=this[_0x434a06(0x502)](this['_floatHeight'],this[_0x434a06(0x557)],_0x272100,_0x5a5827,_0x246dd0):this[_0x434a06(0xb74)]=(this[_0x434a06(0xb74)]*(_0x272100-0x1)+this[_0x434a06(0x557)])/_0x272100;this['_floatDuration']--;if(this['_floatDuration']<=0x0)this[_0x434a06(0xb28)]();},Sprite_Battler[_0x58cf34(0x8ef)]['onFloatEnd']=function(){const _0x8efffc=_0x58cf34;this[_0x8efffc(0xb74)]=this['_targetFloatHeight'];},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x79a)]=function(){const _0x39ff8b=_0x58cf34;return this[_0x39ff8b(0x853)]>0x0;},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x7ef)]=function(_0x58df9c,_0x3fe6f7){const _0x5eac9e=_0x58cf34;if(!this[_0x5eac9e(0x4f3)]())return;if(_0x3fe6f7<=0x0)return;this['_jumpMaxHeight']=_0x58df9c,this[_0x5eac9e(0x92c)]=_0x3fe6f7,this[_0x5eac9e(0x98f)]=_0x3fe6f7;},Sprite_Battler['prototype']['updateJump']=function(){const _0xf36d8c=_0x58cf34;if(this[_0xf36d8c(0x92c)]<=0x0)return;const _0x28b65b=this[_0xf36d8c(0x98f)]-this[_0xf36d8c(0x92c)],_0x5056fc=this[_0xf36d8c(0x98f)]/0x2,_0x5acdb6=this['_jumpMaxHeight'],_0x2e1d79=-_0x5acdb6/Math[_0xf36d8c(0xa44)](_0x5056fc,0x2);this[_0xf36d8c(0x982)]=_0x2e1d79*Math['pow'](_0x28b65b-_0x5056fc,0x2)+_0x5acdb6,this[_0xf36d8c(0x92c)]--;if(this[_0xf36d8c(0x92c)]<=0x0)return this[_0xf36d8c(0x904)]();},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x904)]=function(){const _0xdf8d6d=_0x58cf34;this[_0xdf8d6d(0x982)]=0x0;},Sprite_Battler['prototype'][_0x58cf34(0xc90)]=function(){const _0x23787f=_0x58cf34;return this[_0x23787f(0x92c)]>0x0;},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x36e)]=function(_0x9c0088,_0x4257dc,_0x5a5d5c){const _0x3a9f75=_0x58cf34;if(this['_targetOpacity']===_0x9c0088)return;this[_0x3a9f75(0x7fc)]=_0x9c0088,this[_0x3a9f75(0x3b4)]=_0x4257dc,this[_0x3a9f75(0x2c9)]=_0x4257dc,this['_opacityEasing']=_0x5a5d5c||_0x3a9f75(0x7e6);if(_0x4257dc<=0x0)this['opacity']=_0x9c0088;},Sprite_Battler['prototype']['updateOpacity']=function(){const _0x2c524e=_0x58cf34;if(this[_0x2c524e(0x408)][_0x2c524e(0xc22)]===_0x2c524e(0x5ba))return;if(this[_0x2c524e(0x3b4)]<=0x0)return;const _0x8342ef=this[_0x2c524e(0x3b4)],_0x45e357=this['_opacityWholeDuration'],_0x58bdd2=this['_opacityEasing'];Imported[_0x2c524e(0xaa1)]?this['opacity']=this[_0x2c524e(0x502)](this[_0x2c524e(0xc46)],this[_0x2c524e(0x7fc)],_0x8342ef,_0x45e357,_0x58bdd2):this[_0x2c524e(0xc46)]=(this[_0x2c524e(0xc46)]*(_0x8342ef-0x1)+this[_0x2c524e(0x7fc)])/_0x8342ef;this[_0x2c524e(0x3b4)]--;if(this['_opacityDuration']<=0x0)this[_0x2c524e(0x592)]();},Sprite_Battler[_0x58cf34(0x8ef)]['onOpacityEnd']=function(){const _0x48834e=_0x58cf34;this[_0x48834e(0xc46)]=this[_0x48834e(0x7fc)];},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xa65)]=function(){const _0x4f86ae=_0x58cf34;return this[_0x4f86ae(0x3b4)]>0x0;},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xa91)]=function(){const _0xfe5b4d=_0x58cf34;this[_0xfe5b4d(0x7f7)][_0xfe5b4d(0x1e4)]=this['_battler'][_0xfe5b4d(0xae1)](),this['updateShadowPosition']();},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x5f4)]=function(){const _0x3d373f=_0x58cf34;if(!this['_shadowSprite'])return;this[_0x3d373f(0x7f7)]['y']=this[_0x3d373f(0xa73)]-this['y']-0x2;},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xcdb)]=function(){const _0x509e7e=_0x58cf34;if(!this[_0x509e7e(0xc92)])return;this[_0x509e7e(0x8ca)]=this[_0x509e7e(0xc92)][_0x509e7e(0x95b)](),this[_0x509e7e(0x6c1)]=this[_0x509e7e(0xc92)][_0x509e7e(0x92d)]();},Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x95b)]=function(){const _0x563195=_0x58cf34,_0x45953c=this[_0x563195(0x40c)]()?this[_0x563195(0x2fd)]():this['enemy']();if(_0x45953c){const _0x3b842c=_0x45953c[_0x563195(0x841)];if(_0x3b842c[_0x563195(0xcbb)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x3b842c[_0x563195(0xcbb)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x58cf34(0x8ef)]['battlerShadowScaleY']=function(){const _0x3f50c4=_0x58cf34,_0x29a4f2=this[_0x3f50c4(0x40c)]()?this['actor']():this[_0x3f50c4(0xc20)]();if(_0x29a4f2){const _0x18d734=_0x29a4f2[_0x3f50c4(0x841)];if(_0x18d734['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x18d734[_0x3f50c4(0xcbb)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x81e)]=function(){const _0x42d2a5=_0x58cf34;if(this[_0x42d2a5(0x408)]===Sprite_SvEnemy)return;this[_0x42d2a5(0x6b2)](),this[_0x42d2a5(0x247)]();},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x247)]=function(){const _0x22f88f=_0x58cf34,_0x7059d5=this['_distortionSprite'];_0x7059d5&&(_0x7059d5['scale']['x']=this[_0x22f88f(0x62a)](),_0x7059d5[_0x22f88f(0x527)]['y']=this[_0x22f88f(0x22a)]());},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x62a)]=function(){const _0xf318b0=_0x58cf34;let _0x3d3183=0x1;return _0x3d3183*=this[_0xf318b0(0x8c8)],_0x3d3183*=this['_growX'],_0x3d3183;},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x22a)]=function(){return 0x1*this['_growY'];},Sprite_Battler['prototype'][_0x58cf34(0x654)]=function(){const _0x153021=_0x58cf34;return this[_0x153021(0xc78)]*this[_0x153021(0x62a)]();},Sprite_Battler['prototype'][_0x58cf34(0x420)]=function(){const _0x4d7072=_0x58cf34;return this[_0x4d7072(0x725)]*this[_0x4d7072(0x22a)]();},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x1ec)]=function(_0x43cedf,_0x5dce31,_0x1d874a,_0x304b29){const _0x41c066=_0x58cf34;if(!this[_0x41c066(0x4f3)]())return;if(!this[_0x41c066(0x426)])return;if(this[_0x41c066(0x79c)]===_0x43cedf&&this[_0x41c066(0x31d)]===_0x5dce31)return;this[_0x41c066(0x79c)]=_0x43cedf,this[_0x41c066(0x31d)]=_0x5dce31,this[_0x41c066(0x785)]=_0x1d874a,this[_0x41c066(0x439)]=_0x1d874a,this[_0x41c066(0x600)]=_0x304b29||_0x41c066(0x7e6),_0x1d874a<=0x0&&(this['_growX']=this[_0x41c066(0x79c)],this[_0x41c066(0x3e7)]=this[_0x41c066(0x31d)]);},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x6b2)]=function(){const _0x55fe88=_0x58cf34;if(this[_0x55fe88(0x785)]<=0x0)return;if(!this['_distortionSprite'])return;const _0xf7d5b1=this[_0x55fe88(0x785)],_0x4dc87d=this['_growWholeDuration'],_0x423f7b=this[_0x55fe88(0x600)];Imported[_0x55fe88(0xaa1)]?(this['_growX']=this[_0x55fe88(0x502)](this[_0x55fe88(0x6d3)],this[_0x55fe88(0x79c)],_0xf7d5b1,_0x4dc87d,_0x423f7b),this[_0x55fe88(0x3e7)]=this['applyEasing'](this[_0x55fe88(0x3e7)],this['_targetGrowY'],_0xf7d5b1,_0x4dc87d,_0x423f7b)):(this[_0x55fe88(0x6d3)]=(this[_0x55fe88(0x6d3)]*(_0xf7d5b1-0x1)+this[_0x55fe88(0x79c)])/_0xf7d5b1,this[_0x55fe88(0x3e7)]=(this[_0x55fe88(0x3e7)]*(_0xf7d5b1-0x1)+this[_0x55fe88(0x31d)])/_0xf7d5b1);this[_0x55fe88(0x785)]--;if(this[_0x55fe88(0x785)]<=0x0)this[_0x55fe88(0xc49)]();},Sprite_Battler['prototype'][_0x58cf34(0xc49)]=function(){const _0x202636=_0x58cf34;this['_growX']=this['_targetGrowX'],this[_0x202636(0x3e7)]=this[_0x202636(0x31d)];},Sprite_Battler['prototype'][_0x58cf34(0x8f5)]=function(){const _0xdfdd3=_0x58cf34;return this[_0xdfdd3(0x785)]>0x0;},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x627)]=function(_0x58fee5,_0x34daf2,_0x4e9787,_0x586114){const _0x330374=_0x58cf34;if(!this[_0x330374(0x4f3)]())return;if(!this['_distortionSprite'])return;if(this[_0x330374(0x815)]===_0x58fee5&&this[_0x330374(0x522)]===_0x34daf2)return;this[_0x330374(0x815)]=_0x58fee5,this[_0x330374(0x522)]=_0x34daf2,this[_0x330374(0x462)]=_0x4e9787,this['_skewWholeDuration']=_0x4e9787,this['_skewEasing']=_0x586114||_0x330374(0x7e6),_0x4e9787<=0x0&&(this[_0x330374(0x426)]['skew']['x']=this[_0x330374(0x815)],this[_0x330374(0x426)][_0x330374(0x45f)]['y']=this[_0x330374(0x522)]);},Sprite_Battler['prototype'][_0x58cf34(0x229)]=function(){const _0x7ba5ba=_0x58cf34;if(this[_0x7ba5ba(0x462)]<=0x0)return;if(!this[_0x7ba5ba(0x426)])return;const _0x4874a3=this[_0x7ba5ba(0x462)],_0x5406bc=this[_0x7ba5ba(0x773)],_0x27f7e5=this[_0x7ba5ba(0x6f7)],_0x1b4882=this['_distortionSprite'];Imported[_0x7ba5ba(0xaa1)]?(_0x1b4882[_0x7ba5ba(0x45f)]['x']=this['applyEasing'](_0x1b4882[_0x7ba5ba(0x45f)]['x'],this['_targetSkewX'],_0x4874a3,_0x5406bc,_0x27f7e5),_0x1b4882[_0x7ba5ba(0x45f)]['y']=this[_0x7ba5ba(0x502)](_0x1b4882['skew']['y'],this['_targetSkewY'],_0x4874a3,_0x5406bc,_0x27f7e5)):(_0x1b4882[_0x7ba5ba(0x45f)]['x']=(_0x1b4882[_0x7ba5ba(0x45f)]['x']*(_0x4874a3-0x1)+this[_0x7ba5ba(0x815)])/_0x4874a3,_0x1b4882[_0x7ba5ba(0x45f)]['y']=(_0x1b4882[_0x7ba5ba(0x45f)]['y']*(_0x4874a3-0x1)+this[_0x7ba5ba(0x522)])/_0x4874a3);this[_0x7ba5ba(0x462)]--;if(this[_0x7ba5ba(0x462)]<=0x0)this[_0x7ba5ba(0x457)]();},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x457)]=function(){const _0x4f5789=_0x58cf34;this[_0x4f5789(0x426)]['skew']['x']=this[_0x4f5789(0x815)],this[_0x4f5789(0x426)][_0x4f5789(0x45f)]['y']=this['_targetSkewY'];},Sprite_Battler['prototype'][_0x58cf34(0xbe9)]=function(){const _0x5b5943=_0x58cf34;return this[_0x5b5943(0x462)]>0x0;},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xb6a)]=function(_0x1e1606,_0x16e96d,_0x24ef18,_0x3cb3a6){const _0xd69026=_0x58cf34;if(!this['canMove']())return;if(!this[_0xd69026(0x426)])return;if(this['_targetAngle']===_0x1e1606)return;this['_targetAngle']=_0x1e1606,this[_0xd69026(0xa94)]=_0x16e96d,this[_0xd69026(0x551)]=_0x16e96d,this[_0xd69026(0x376)]=_0x24ef18||_0xd69026(0x7e6),this[_0xd69026(0x8b4)]=_0x3cb3a6,this[_0xd69026(0x8b4)]===undefined&&(this[_0xd69026(0x8b4)]=!![]),_0x16e96d<=0x0&&(this['_currentAngle']=_0x1e1606,this['_angleRevertOnFinish']&&(this['_targetAngle']=0x0,this['_currentAngle']=0x0));},Sprite_Battler[_0x58cf34(0x8ef)]['updateSpin']=function(){const _0x1a9f29=_0x58cf34;this[_0x1a9f29(0x837)](),this[_0x1a9f29(0x44c)]();},Sprite_Battler['prototype'][_0x58cf34(0x837)]=function(){const _0x2feb85=_0x58cf34;if(this['_angleDuration']<=0x0)return;const _0x4608af=this['_angleDuration'],_0x4a61b2=this[_0x2feb85(0x551)],_0x5b73ee=this[_0x2feb85(0x376)];Imported[_0x2feb85(0xaa1)]?this[_0x2feb85(0x214)]=this[_0x2feb85(0x502)](this[_0x2feb85(0x214)],this[_0x2feb85(0xae7)],_0x4608af,_0x4a61b2,_0x5b73ee):this[_0x2feb85(0x214)]=(this['_currentAngle']*(_0x4608af-0x1)+this[_0x2feb85(0xae7)])/_0x4608af;this[_0x2feb85(0xa94)]--;if(this[_0x2feb85(0xa94)]<=0x0)this[_0x2feb85(0x465)]();},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x465)]=function(){const _0x251e4b=_0x58cf34;this[_0x251e4b(0x214)]=this['_targetAngle'],this[_0x251e4b(0x8b4)]&&(this[_0x251e4b(0xae7)]=0x0,this[_0x251e4b(0x214)]=0x0);},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x1ce)]=function(){const _0x36de39=_0x58cf34;return this[_0x36de39(0xa94)]>0x0;},Sprite_Battler['prototype'][_0x58cf34(0x44c)]=function(){const _0x2eb160=_0x58cf34;if(!this['_distortionSprite'])return;const _0x3f3a82=this[_0x2eb160(0x214)],_0x42c43c=this[_0x2eb160(0x527)]['x'],_0x17bc87=this[_0x2eb160(0xc92)][_0x2eb160(0x40c)]()?-0x1:0x1;this[_0x2eb160(0x426)]['angle']=_0x3f3a82*_0x42c43c*_0x17bc87;const _0x29a8a5=this[_0x2eb160(0x426)]['scale']['y'];this['_distortionSprite']['y']=this[_0x2eb160(0x725)]*-0.5*(0x2-_0x29a8a5),this[_0x2eb160(0x426)]['y']=Math['ceil'](this[_0x2eb160(0x426)]['y']);const _0x46d90b=[this[_0x2eb160(0x61e)],this[_0x2eb160(0x718)],this[_0x2eb160(0x664)]];for(const _0x517b7e of _0x46d90b){if(!_0x517b7e)continue;_0x517b7e['y']=this[_0x2eb160(0x725)]*0.5;}this['_shadowSprite']&&(this[_0x2eb160(0x8ca)]=this[_0x2eb160(0x8ca)]??0x1,this[_0x2eb160(0x6c1)]=this[_0x2eb160(0x6c1)]??0x1,this[_0x2eb160(0x7f7)][_0x2eb160(0x527)]['x']=this[_0x2eb160(0x426)]['scale']['x']*this[_0x2eb160(0x8ca)],this[_0x2eb160(0x7f7)][_0x2eb160(0x527)]['y']=this[_0x2eb160(0x426)]['scale']['y']*this['_shadowScaleY']);},VisuMZ[_0x58cf34(0xa6b)]['Sprite_Actor_createStateSprite']=Sprite_Actor['prototype'][_0x58cf34(0x7fa)],Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x7fa)]=function(){const _0x55bf63=_0x58cf34;VisuMZ[_0x55bf63(0xa6b)][_0x55bf63(0x9da)][_0x55bf63(0x9a4)](this),VisuMZ[_0x55bf63(0xa6b)][_0x55bf63(0xb05)][_0x55bf63(0x26d)][_0x55bf63(0x933)]&&this[_0x55bf63(0xbb1)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x55b)]=Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x4bb)],Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x4bb)]=function(){const _0x70f5c1=_0x58cf34;VisuMZ[_0x70f5c1(0xa6b)][_0x70f5c1(0xb05)][_0x70f5c1(0x26d)][_0x70f5c1(0x4ca)]&&this[_0x70f5c1(0xbb1)](),VisuMZ[_0x70f5c1(0xa6b)]['Sprite_Enemy_createStateIconSprite'][_0x70f5c1(0x9a4)](this);},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xbb1)]=function(){const _0x50c8ce=_0x58cf34;if(!ConfigManager[_0x50c8ce(0x818)])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x36c640=VisuMZ[_0x50c8ce(0xa6b)][_0x50c8ce(0xb05)]['HpGauge'],_0x4ffcb9=new Sprite_HpGauge();_0x4ffcb9['anchor']['x']=_0x36c640[_0x50c8ce(0x8a0)],_0x4ffcb9[_0x50c8ce(0x9cc)]['y']=_0x36c640[_0x50c8ce(0x349)],_0x4ffcb9[_0x50c8ce(0x527)]['x']=_0x4ffcb9['scale']['y']=_0x36c640[_0x50c8ce(0x91e)],this[_0x50c8ce(0x2df)]=_0x4ffcb9,this[_0x50c8ce(0x3ac)](this['_hpGaugeSprite']),Spriteset_Battle[_0x50c8ce(0x28d)]&&BattleManager[_0x50c8ce(0x7c9)](this[_0x50c8ce(0x2df)]);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x397)]=Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x8b1)],Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x8b1)]=function(_0x47e86c){const _0x36b6d7=_0x58cf34,_0x4fd00e=this[_0x36b6d7(0xc92)];VisuMZ['BattleCore'][_0x36b6d7(0x397)][_0x36b6d7(0x9a4)](this,_0x47e86c),this[_0x36b6d7(0x22b)](_0x47e86c);if(_0x4fd00e!==_0x47e86c)this[_0x36b6d7(0xcdb)]();},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x22b)]=function(_0x4b53ab){const _0x2965de=_0x58cf34;if(!_0x4b53ab)return;if(!this[_0x2965de(0x2df)])return;if(_0x4b53ab['isActor']()){}else{if(_0x4b53ab[_0x2965de(0x2d8)]()){if(this[_0x2965de(0x408)]===Sprite_SvEnemy&&!_0x4b53ab[_0x2965de(0xae1)]())return;}}this['_hpGaugeSprite'][_0x2965de(0x6e1)](_0x4b53ab,'hp');},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x4aa)]=function(){const _0x12c9e7=_0x58cf34;return this[_0x12c9e7(0xc92)]&&this['_battler'][_0x12c9e7(0x4aa)]();},Sprite_Battler['prototype']['updateStaticSvBattlerFrames']=function(){const _0x21b704=_0x58cf34,_0x3bcd21=this[_0x21b704(0x61e)][_0x21b704(0xa41)];if(!_0x3bcd21)return;const _0x468063=_0x3bcd21[_0x21b704(0xc78)];let _0x2081a4=_0x3bcd21[_0x21b704(0x725)];if(this[_0x21b704(0xc92)]['isDead']()){if(this[_0x21b704(0x21c)])_0x2081a4=Math[_0x21b704(0x238)](0x0,this[_0x21b704(0x21c)]['height']-0x4);}this[_0x21b704(0x61e)][_0x21b704(0x4a5)](0x0,0x0,_0x468063,_0x2081a4),this[_0x21b704(0x4a5)](0x0,0x0,_0x468063,_0x2081a4);},Sprite_Battler['prototype'][_0x58cf34(0x26e)]=function(){const _0x550fd6=_0x58cf34;if(!this['_battler'])return;if(!this[_0x550fd6(0x2df)])return;const _0x59da87=VisuMZ[_0x550fd6(0xa6b)]['Settings']['HpGauge'],_0x1edd3f=this[_0x550fd6(0x2df)];_0x1edd3f[_0x550fd6(0x1e4)]=this['isVisualHpGaugeDisplayed']();const _0x288674=_0x59da87['OffsetX'],_0x2ac4f3=_0x59da87[_0x550fd6(0x5fb)];_0x1edd3f['x']=_0x288674,_0x1edd3f['x']+=this[_0x550fd6(0xc92)][_0x550fd6(0x58e)](),_0x1edd3f['y']=-this[_0x550fd6(0x725)]+_0x2ac4f3,_0x1edd3f['y']+=this[_0x550fd6(0xc92)][_0x550fd6(0x893)](),Spriteset_Battle['ANTI_TINT_UI']&&SceneManager['_scene']['_spriteset']&&(_0x1edd3f['x']+=this['x'],_0x1edd3f['y']+=this['y']);},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xc3e)]=function(){const _0xf8f3a5=_0x58cf34;if(!this[_0xf8f3a5(0xc92)])return![];if(this[_0xf8f3a5(0xc92)][_0xf8f3a5(0x40c)]())return!![];if(this[_0xf8f3a5(0xc92)]['isHidden']())return![];if(this[_0xf8f3a5(0xc46)]<=0x0)return![];const _0xe4aba2=this[_0xf8f3a5(0xc92)][_0xf8f3a5(0xc20)]()[_0xf8f3a5(0x841)];if(_0xe4aba2['match'](/<SHOW HP GAUGE>/i))return!![];if(_0xe4aba2['match'](/<HIDE HP GAUGE>/i))return![];const _0x4d4c89=VisuMZ[_0xf8f3a5(0xa6b)][_0xf8f3a5(0xb05)][_0xf8f3a5(0x26d)];if(_0x4d4c89[_0xf8f3a5(0xbd2)]){if(_0x4d4c89['BTestBypass']&&BattleManager[_0xf8f3a5(0x7d3)]())return!![];if(this[_0xf8f3a5(0xc92)][_0xf8f3a5(0xca3)])return![];return this[_0xf8f3a5(0xc92)]['hasBeenDefeatedBefore']();}return!![];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xc40)]=Sprite_Battler['prototype'][_0x58cf34(0x4da)],Sprite_Battler[_0x58cf34(0x8ef)]['isMoving']=function(){const _0x5e8e21=_0x58cf34;if(!this[_0x5e8e21(0xc92)])return![];if(this[_0x5e8e21(0x817)]>0x0)return!![];return VisuMZ[_0x5e8e21(0xa6b)][_0x5e8e21(0xc40)]['call'](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x7ee)]=Sprite_Battler[_0x58cf34(0x8ef)]['startMove'],Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x634)]=function(_0x25eb6d,_0xac7520,_0x26a18e){const _0x51a9a9=_0x58cf34;this[_0x51a9a9(0x4f3)]()&&VisuMZ[_0x51a9a9(0xa6b)]['Sprite_Battler_startMove'][_0x51a9a9(0x9a4)](this,_0x25eb6d,_0xac7520,_0x26a18e);},Sprite_Battler['prototype']['canMove']=function(){const _0x1c71b8=_0x58cf34;if(this[_0x1c71b8(0xc92)]&&this[_0x1c71b8(0xc92)][_0x1c71b8(0xc87)]())return![];if(this[_0x1c71b8(0xc92)]&&!this[_0x1c71b8(0xc92)]['canBattlerMove']())return![];return $gameSystem[_0x1c71b8(0xc41)]();},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0xa7a)]=function(){},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x71a)]=function(){const _0x2c4f4c=_0x58cf34;this[_0x2c4f4c(0x634)](0x0,0x0,0xc);},Sprite_Battler['prototype']['retreat']=function(){},Sprite_Battler['prototype'][_0x58cf34(0x995)]=function(){const _0x357aed=_0x58cf34,_0x17a531=VisuMZ[_0x357aed(0xa6b)][_0x357aed(0xb05)][_0x357aed(0xb3d)],_0xdb2168=this[_0x357aed(0xc92)]&&this['_battler']['isActor']()?0x1:-0x1,_0x25cdf2=this[_0x357aed(0xc19)]-this[_0x357aed(0x43b)]+_0xdb2168*_0x17a531[_0x357aed(0x1f9)],_0x27b59d=this['_baseY']-this[_0x357aed(0xb73)]+_0xdb2168*_0x17a531[_0x357aed(0x736)],_0x186630=_0x17a531[_0x357aed(0xa71)];this[_0x357aed(0x634)](_0x25cdf2,_0x27b59d,_0x186630);},Sprite_Battler['prototype'][_0x58cf34(0x4d4)]=function(_0x486fc6,_0x4f8c51){const _0x12c60b=_0x58cf34,_0x357ebf=VisuMZ[_0x12c60b(0xa6b)][_0x12c60b(0xb05)]['Actor'];this[_0x12c60b(0xbb2)]=Math[_0x12c60b(0xafc)]((_0x357ebf[_0x12c60b(0x805)]??0x18)*_0x4f8c51),this[_0x12c60b(0xcab)]=Math[_0x12c60b(0x238)](this[_0x12c60b(0xcab)],_0x486fc6);},Sprite_Battler[_0x58cf34(0x8ef)][_0x58cf34(0x369)]=function(){const _0x37b47b=_0x58cf34,_0x4ddfc2=VisuMZ[_0x37b47b(0xa6b)][_0x37b47b(0xb05)][_0x37b47b(0xb3d)];if(!(_0x4ddfc2[_0x37b47b(0x948)]??![]))return;if(this[_0x37b47b(0xbb2)]>0x0){const _0x5b9134=this[_0x37b47b(0xbb2)];this['_shakeFlinchPower']=this[_0x37b47b(0xcab)]*(_0x5b9134-0x1)/_0x5b9134,this['_shakeFlinchDuration']--,this[_0x37b47b(0xbb2)]<=0x0&&(this[_0x37b47b(0xcab)]=0x0);}this[_0x37b47b(0xcab)]>0x0?(this[_0x37b47b(0x61e)]['x']=Math['randomInt'](this[_0x37b47b(0xcab)])*(Math[_0x37b47b(0x613)]()<0.5?-0x1:0x1),this[_0x37b47b(0xa73)]!==this['y']&&(this[_0x37b47b(0x61e)]['y']=this[_0x37b47b(0x725)]*0.5,this[_0x37b47b(0x61e)]['y']+=Math[_0x37b47b(0x8cb)](this[_0x37b47b(0xcab)])*(Math['random']()<0.5?-0x1:0x1))):(this[_0x37b47b(0x61e)]['x']=0x0,this[_0x37b47b(0x61e)]['y']=this[_0x37b47b(0x725)]*0.5);},VisuMZ[_0x58cf34(0xa6b)]['Sprite_Actor_initMembers']=Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x7c8)],Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x7c8)]=function(){const _0x199d5e=_0x58cf34;VisuMZ[_0x199d5e(0xa6b)][_0x199d5e(0x963)][_0x199d5e(0x9a4)](this),this['attachSpritesToDistortionSprite']();},Sprite_Actor['prototype'][_0x58cf34(0x4c6)]=function(){const _0x502dc8=_0x58cf34;return this[_0x502dc8(0x426)]||this[_0x502dc8(0x61e)]||this;},VisuMZ['BattleCore'][_0x58cf34(0x29e)]=Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x622)],Sprite_Actor['prototype']['moveToStartPosition']=function(){},Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x39e)]=function(_0xd412db){const _0x4fcf7f=_0x58cf34;if(SceneManager[_0x4fcf7f(0x8b6)]())return;if(!_0xd412db)return;if(!_0xd412db[_0x4fcf7f(0x4f3)]())return;VisuMZ[_0x4fcf7f(0xa6b)]['Sprite_Actor_moveToStartPosition']['call'](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xbb5)]=Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x43a)],Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x43a)]=function(_0x14fe2a){const _0x484318=_0x58cf34;VisuMZ[_0x484318(0xa6b)][_0x484318(0xb05)][_0x484318(0xb3d)][_0x484318(0xab3)]?VisuMZ[_0x484318(0xa6b)][_0x484318(0xb05)][_0x484318(0xb3d)][_0x484318(0xab3)][_0x484318(0x9a4)](this,_0x14fe2a):VisuMZ[_0x484318(0xa6b)]['Sprite_Actor_setActorHome']['call'](this,_0x14fe2a);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x7bb)]=Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x8b1)],Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x8b1)]=function(_0x109283){const _0x4683d1=_0x58cf34;VisuMZ['BattleCore'][_0x4683d1(0x7bb)][_0x4683d1(0x9a4)](this,_0x109283),this[_0x4683d1(0x8bc)](_0x109283);},Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x8bc)]=function(_0x4fcb3f){const _0x10aec4=_0x58cf34;if(!_0x4fcb3f)return;if(!this[_0x10aec4(0x61e)])return;this[_0x10aec4(0x61e)][_0x10aec4(0x9cc)]['x']=this[_0x10aec4(0xcc7)]['svBattlerAnchorX'](),this[_0x10aec4(0x61e)]['anchor']['y']=this['_actor'][_0x10aec4(0x775)](),this['updateShadowVisibility']();},VisuMZ[_0x58cf34(0xa6b)]['Sprite_Actor_update']=Sprite_Actor['prototype'][_0x58cf34(0x6a2)],Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x6a2)]=function(){const _0x52192f=_0x58cf34;VisuMZ[_0x52192f(0xa6b)][_0x52192f(0xc4a)][_0x52192f(0x9a4)](this),this[_0x52192f(0xcc7)]&&(this[_0x52192f(0xbbb)](),this[_0x52192f(0x90e)]());},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x616)]=Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x93d)],Sprite_Actor[_0x58cf34(0x8ef)]['updateBitmap']=function(){const _0x2d3b9c=_0x58cf34;VisuMZ[_0x2d3b9c(0xa6b)][_0x2d3b9c(0x616)][_0x2d3b9c(0x9a4)](this),this[_0x2d3b9c(0x61e)]&&this[_0x2d3b9c(0x61e)]['bitmap']&&this['_battler']&&(this[_0x2d3b9c(0x61e)]['bitmap'][_0x2d3b9c(0x78d)]!==this[_0x2d3b9c(0xc92)][_0x2d3b9c(0xa76)]()&&(this[_0x2d3b9c(0x61e)][_0x2d3b9c(0xa41)][_0x2d3b9c(0x78d)]=this['_battler'][_0x2d3b9c(0xa76)]()));},VisuMZ[_0x58cf34(0xa6b)]['Sprite_Actor_updateShadow']=Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0xa91)],Sprite_Actor['prototype'][_0x58cf34(0xa91)]=function(){const _0xd2ac3f=_0x58cf34;VisuMZ['BattleCore'][_0xd2ac3f(0x49b)][_0xd2ac3f(0x9a4)](this),this['updateShadowBattleCore']();},Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x236)]=function(){const _0x1f7721=_0x58cf34;if(!this[_0x1f7721(0x61e)])return;if(!this[_0x1f7721(0x7f7)])return;this[_0x1f7721(0xae9)](),this[_0x1f7721(0x5f4)]();},Sprite_Actor[_0x58cf34(0x8ef)]['updateStateSprite']=function(){const _0x212c45=_0x58cf34;{this['_stateSprite'][_0x212c45(0x527)]['x']=0x1/(this[_0x212c45(0x527)]['x']||0.001),this['_stateSprite'][_0x212c45(0x527)]['y']=0x1/(this['scale']['y']||0.001);}{this[_0x212c45(0x9f4)]['x']=0x0,this[_0x212c45(0x9f4)]['y']=-this[_0x212c45(0x725)]-0x20+0x60;const _0x1febaf=VisuMZ[_0x212c45(0xa6b)]['Settings'][_0x212c45(0xb3d)];this[_0x212c45(0x9f4)]['x']+=_0x1febaf[_0x212c45(0x57a)]??0x0,this['_stateSprite']['y']+=_0x1febaf[_0x212c45(0xab2)]??0x0;}},Sprite_Actor[_0x58cf34(0x8ef)]['updateStyleOpacity']=function(){const _0x29462a=_0x58cf34;if(!$gameSystem[_0x29462a(0xc41)]()&&this['constructor']===Sprite_Actor){const _0x3f02ba=Scene_Battle[_0x29462a(0x8ef)][_0x29462a(0x9df)]();[_0x29462a(0x246),_0x29462a(0x83e),'portrait',_0x29462a(0xa21)][_0x29462a(0x375)](_0x3f02ba)&&(this['opacity']=0x0);}},Sprite_Actor['prototype']['refreshMotion']=function(){const _0x555aa0=_0x58cf34,_0x14a9a4=this[_0x555aa0(0xcc7)];if(_0x14a9a4){if(_0x14a9a4[_0x555aa0(0xb13)])return;const _0x13926d=_0x14a9a4[_0x555aa0(0x595)]();if(_0x14a9a4[_0x555aa0(0x9b1)]()||_0x14a9a4[_0x555aa0(0x2d4)]())this['startMotion'](_0x555aa0(0x793));else{if(_0x13926d===0x3)this[_0x555aa0(0x2c0)](_0x555aa0(0x975));else{if(_0x13926d===0x2)this[_0x555aa0(0x2c0)](_0x555aa0(0x8a9));else{if(this[_0x555aa0(0x712)])this[_0x555aa0(0x2c0)](_0x555aa0(0x6f3));else{if(_0x14a9a4[_0x555aa0(0x60c)]())this[_0x555aa0(0x2c0)](_0x555aa0(0xa15));else{if(_0x14a9a4['isChanting']())this[_0x555aa0(0x2c0)]('chant');else{if(_0x14a9a4[_0x555aa0(0x6a3)]()||_0x14a9a4[_0x555aa0(0x9f3)]())this['startMotion']('guard');else{if(_0x13926d===0x1)this[_0x555aa0(0x2c0)](_0x555aa0(0xc29));else{if(_0x14a9a4['isDying']())this[_0x555aa0(0x2c0)](_0x555aa0(0x1f3));else{if(_0x14a9a4[_0x555aa0(0xb11)]())this['startMotion'](_0x555aa0(0x793));else _0x14a9a4[_0x555aa0(0x559)]()?this[_0x555aa0(0x2c0)](_0x555aa0(0xa15)):this['startMotion']('walk');}}}}}}}}}}},Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x483)]=function(){const _0x3c7494=_0x58cf34,_0x242ce6=0xa,_0xec1a63=0x12c*_0x242ce6,_0x4954e6=0x1e*_0x242ce6;this[_0x3c7494(0x634)](_0xec1a63,0x0,_0x4954e6);},Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x858)]=function(){const _0x3a8ce5=_0x58cf34;Sprite_Battler[_0x3a8ce5(0x8ef)][_0x3a8ce5(0x858)][_0x3a8ce5(0x9a4)](this);},Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0xb55)]=function(){const _0x33d92b=_0x58cf34;return Sprite_Battler[_0x33d92b(0xb41)];},Sprite_Weapon['prototype']['animationWait']=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x60a)]=function(){},Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0xcaf)]=function(){},Sprite_Actor['prototype'][_0x58cf34(0x433)]=function(){const _0x7b33cb=_0x58cf34;if(this[_0x7b33cb(0xa69)]&&++this['_motionCount']>=this[_0x7b33cb(0xb55)]()){if(this['_motion'][_0x7b33cb(0xabf)])this[_0x7b33cb(0xb5a)]=(this['_pattern']+0x1)%0x4;else{if(this['_pattern']<0x2)this['_pattern']++;else{const _0x4dce28=this[_0x7b33cb(0xcc7)];if(_0x4dce28)_0x4dce28['_performDamageMotion']=undefined;this[_0x7b33cb(0x7d9)]();}}this['_motionCount']=0x0;}},Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x80a)]=function(_0x43a58d){const _0x29ad32=_0x58cf34;if(this[_0x29ad32(0xc92)]&&this[_0x29ad32(0xc92)]['isDead']()){this[_0x29ad32(0xa69)]=Sprite_Actor[_0x29ad32(0x7ac)][_0x29ad32(0x975)];return;}const _0x2a1f08=Sprite_Actor[_0x29ad32(0x7ac)][_0x43a58d];this[_0x29ad32(0xa69)]=_0x2a1f08,this[_0x29ad32(0x381)]=0x0,this[_0x29ad32(0xb5a)]=0x0;},Sprite_Actor[_0x58cf34(0x8ef)]['forceWeaponAnimation']=function(_0x7602b){const _0x469c17=_0x58cf34;if(this[_0x469c17(0x4aa)]())return;this[_0x469c17(0x44b)](),this[_0x469c17(0x9d4)]['setup'](_0x7602b),this[_0x469c17(0xcc7)]['clearWeaponAnimation']();},Sprite_Actor[_0x58cf34(0x8ef)]['adjustWeaponSpriteOffset']=function(){const _0x22c0eb=_0x58cf34;let _0x4cc56c=-0x10,_0x162331=this[_0x22c0eb(0x725)]*0.5;const _0x56676d=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x26ad67=this[_0x22c0eb(0xc92)]['traitObjects']()['map'](_0x4372e9=>_0x4372e9&&_0x4372e9[_0x22c0eb(0x841)][_0x22c0eb(0xcbb)](_0x56676d)?Number(RegExp['$1']):0x0),_0x113e19=this[_0x22c0eb(0xc92)][_0x22c0eb(0x1f5)]()['map'](_0x36e0c4=>_0x36e0c4&&_0x36e0c4[_0x22c0eb(0x841)][_0x22c0eb(0xcbb)](_0x56676d)?Number(RegExp['$2']):0x0);_0x4cc56c=_0x26ad67[_0x22c0eb(0xa43)]((_0x1df1cc,_0x538eb8)=>_0x1df1cc+_0x538eb8,_0x4cc56c),_0x162331=_0x113e19[_0x22c0eb(0xa43)]((_0xd77ebf,_0x23c89b)=>_0xd77ebf+_0x23c89b,_0x162331),this['_weaponSprite']['x']=_0x4cc56c,this['_weaponSprite']['y']=_0x162331,this[_0x22c0eb(0x9d4)][_0x22c0eb(0x6a2)]();},Sprite_Weapon[_0x58cf34(0x8ef)][_0x58cf34(0x6e1)]=function(_0x33627c){const _0x5d2fbf=_0x58cf34;this[_0x5d2fbf(0x45e)]=_0x33627c,this[_0x5d2fbf(0x2bc)]=-0x1,this[_0x5d2fbf(0xb5a)]=0x0,this[_0x5d2fbf(0x695)](),this['updateFrame']();},Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x849)]=function(){},Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0xa7a)]=function(){const _0x48df52=_0x58cf34,_0x4c57b9=VisuMZ[_0x48df52(0xa6b)]['Settings']['ActionSequence'],_0x5a217a=_0x4c57b9['StepDistanceX'],_0x4f1944=_0x4c57b9[_0x48df52(0x9b6)],_0x4e58b2=_0x4c57b9[_0x48df52(0xcae)];this['startMove'](-_0x5a217a,-_0x4f1944,_0x4e58b2);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x91f)]=Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0xc9a)],Sprite_Actor[_0x58cf34(0x8ef)][_0x58cf34(0xc9a)]=function(){const _0x41537c=_0x58cf34;this[_0x41537c(0x4aa)]()?this[_0x41537c(0x9e1)]():(this['applyFreezeMotionFrames'](),VisuMZ['BattleCore'][_0x41537c(0x91f)][_0x41537c(0x9a4)](this));},Sprite_Actor['prototype'][_0x58cf34(0xb95)]=function(){const _0x4289f6=_0x58cf34;if(this[_0x4289f6(0xc92)]&&this[_0x4289f6(0xc92)][_0x4289f6(0x9b5)]){const _0x2bb493=this[_0x4289f6(0xc92)][_0x4289f6(0x9b5)];this[_0x4289f6(0xa69)]=Sprite_Actor[_0x4289f6(0x7ac)][_0x2bb493[_0x4289f6(0x88b)]],this[_0x4289f6(0xb5a)]=_0x2bb493[_0x4289f6(0x53d)];const _0x120ca8=this['_weaponSprite'];_0x120ca8[_0x4289f6(0x2a2)](_0x2bb493[_0x4289f6(0x74d)],_0x2bb493[_0x4289f6(0x53d)]),this['adjustWeaponSpriteOffset']();}},Sprite_Weapon['prototype'][_0x58cf34(0x2a2)]=function(_0x16538d,_0x43914a){const _0x412dcf=_0x58cf34;this[_0x412dcf(0x45e)]=_0x16538d,this[_0x412dcf(0x2bc)]=-Infinity,this[_0x412dcf(0xb5a)]=_0x43914a,this[_0x412dcf(0x695)](),this['updateFrame']();},Sprite_Enemy[_0x58cf34(0x8ef)]['initMembers']=function(){const _0x25aefa=_0x58cf34;Sprite_Battler[_0x25aefa(0x8ef)][_0x25aefa(0x7c8)][_0x25aefa(0x9a4)](this),this[_0x25aefa(0xbea)]=null,this[_0x25aefa(0x77d)]=![],this['_battlerName']='',this['_battlerHue']=0x0,this[_0x25aefa(0x863)]=null,this['_effectDuration']=0x0,this['_shake']=0x0,this[_0x25aefa(0x7d6)](),this['createStateIconSprite']();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x1df)]=Sprite_Enemy[_0x58cf34(0x8ef)]['update'],Sprite_Enemy[_0x58cf34(0x8ef)]['update']=function(){const _0x4e1e8d=_0x58cf34;VisuMZ['BattleCore']['Sprite_Enemy_update'][_0x4e1e8d(0x9a4)](this),this[_0x4e1e8d(0xae9)](),this[_0x4e1e8d(0x743)]();},Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x7d6)]=function(){const _0x3ea8dc=_0x58cf34;this[_0x3ea8dc(0x61e)]=new Sprite(),this[_0x3ea8dc(0x61e)][_0x3ea8dc(0x9cc)]['x']=0.5,this[_0x3ea8dc(0x61e)][_0x3ea8dc(0x9cc)]['y']=0x1,this[_0x3ea8dc(0x3ac)](this[_0x3ea8dc(0x61e)]),this[_0x3ea8dc(0xa49)]();},Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x4c6)]=function(){const _0x5e447e=_0x58cf34;return this['_distortionSprite']||this[_0x5e447e(0x61e)]||this;},Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x695)]=function(_0x341b25){const _0x1b2876=_0x58cf34;this[_0x1b2876(0xa41)]=new Bitmap(0x1,0x1);if(this[_0x1b2876(0xae1)]()){const _0x1abaaa=this[_0x1b2876(0xbea)][_0x1b2876(0x800)]();this[_0x1b2876(0xa41)]=new Bitmap(_0x1abaaa[_0x1b2876(0xc78)],_0x1abaaa[_0x1b2876(0x725)]),this['_mainSprite'][_0x1b2876(0xa41)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x1b2876(0xc41)]()){const _0x4f3b1f=ImageManager['loadSvEnemy'](_0x341b25);_0x4f3b1f['addLoadListener'](this['onStaticEnemyBitmapLoad'][_0x1b2876(0xaf2)](this,_0x4f3b1f));}else{const _0x163ab9=ImageManager['loadEnemy'](_0x341b25);_0x163ab9['addLoadListener'](this[_0x1b2876(0x277)]['bind'](this,_0x163ab9));}}},Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x277)]=function(_0x78c2aa){const _0x3a40bd=_0x58cf34;this[_0x3a40bd(0x61e)][_0x3a40bd(0xa41)]=_0x78c2aa,this['bitmap']=new Bitmap(_0x78c2aa['width'],_0x78c2aa[_0x3a40bd(0x725)]);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x6d4)]=Sprite_Enemy['prototype'][_0x58cf34(0x6d8)],Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x6d8)]=function(_0x2e1c79){const _0x2e5357=_0x58cf34;this[_0x2e5357(0x61e)]&&this[_0x2e5357(0x61e)]['setHue'](_0x2e1c79);},VisuMZ['BattleCore'][_0x58cf34(0x3e3)]=Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x450)],Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x450)]=function(){const _0x33a9b7=_0x58cf34;this['allowCollapse']()?VisuMZ[_0x33a9b7(0xa6b)][_0x33a9b7(0x3e3)][_0x33a9b7(0x9a4)](this):(this['_appeared']=!this['_enemy'][_0x33a9b7(0x6ac)](),!this[_0x33a9b7(0x77d)]&&(this[_0x33a9b7(0xc46)]=0x0));},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x72c)]=Sprite_Enemy[_0x58cf34(0x8ef)]['updateCollapse'],Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x444)]=function(){const _0x4f5986=_0x58cf34;if(this[_0x4f5986(0x962)]())VisuMZ[_0x4f5986(0xa6b)]['Sprite_Enemy_updateCollapse']['call'](this);},Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0xc9a)]=function(){const _0x410aec=_0x58cf34;Sprite_Battler[_0x410aec(0x8ef)][_0x410aec(0xc9a)][_0x410aec(0x9a4)](this);const _0x551a5d=this[_0x410aec(0x4c6)]()||this;if(!_0x551a5d)return;!_0x551a5d['bitmap']&&(_0x551a5d[_0x410aec(0xa41)]=new Bitmap(this[_0x410aec(0xc78)]||0x1,this[_0x410aec(0x725)]||0x1));if(this['_effectType']==='bossCollapse')this[_0x410aec(0x61e)]['setFrame'](0x0,0x0,this['_mainSprite']['width']||0x1,this['_effectDuration']);else{let _0x321302=0x1;if(_0x551a5d&&_0x551a5d[_0x410aec(0xa41)])_0x321302=_0x551a5d['bitmap'][_0x410aec(0xc78)];let _0x754a39=0x1;if(this[_0x410aec(0xa41)])_0x754a39=this[_0x410aec(0xa41)][_0x410aec(0x725)];_0x551a5d['setFrame'](0x0,0x0,_0x321302,_0x754a39);}},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb04)]=Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x323)],Sprite_Enemy['prototype'][_0x58cf34(0x323)]=function(){const _0x566637=_0x58cf34;if(this['allowCollapse']())VisuMZ[_0x566637(0xa6b)]['Sprite_Enemy_updateBossCollapse'][_0x566637(0x9a4)](this);},Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x4da)]=function(){const _0x48525e=_0x58cf34;return Sprite_Battler['prototype'][_0x48525e(0x4da)][_0x48525e(0x9a4)](this);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x5cf)]=Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0xbbb)],Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0xbbb)]=function(){const _0x4b4613=_0x58cf34;VisuMZ[_0x4b4613(0xa6b)][_0x4b4613(0x5cf)]['call'](this),this[_0x4b4613(0x472)]();},Sprite_Enemy[_0x58cf34(0x8ef)]['updateStateSpriteBattleCore']=function(){const _0x3d1dff=_0x58cf34,_0x3f47d0=VisuMZ[_0x3d1dff(0xa6b)][_0x3d1dff(0xb05)][_0x3d1dff(0x48b)];if(_0x3f47d0[_0x3d1dff(0xaf0)]&&!_0x3f47d0[_0x3d1dff(0xb3c)]){this[_0x3d1dff(0x2cd)][_0x3d1dff(0xc46)]=0x0;return;}this[_0x3d1dff(0x2cd)]['x']=0x0,this[_0x3d1dff(0x2cd)]['x']+=this['_battler'][_0x3d1dff(0x58e)]();let _0x2281b3=0x1;if(this[_0x3d1dff(0xa41)])_0x2281b3=this[_0x3d1dff(0xa41)]['height'];this[_0x3d1dff(0x2cd)]['y']=-_0x2281b3-this[_0x3d1dff(0x2cd)]['height']-0x4,this[_0x3d1dff(0x2cd)]['y']+=this[_0x3d1dff(0xc92)][_0x3d1dff(0x893)](),this[_0x3d1dff(0x2cd)][_0x3d1dff(0x527)]['x']=0x1/(this[_0x3d1dff(0x527)]['x']||0.001),this[_0x3d1dff(0x2cd)]['scale']['y']=0x1/(this[_0x3d1dff(0x527)]['y']||0.001),this['hasSvBattler']()&&(this['_svBattlerSprite'][_0x3d1dff(0x9f4)][_0x3d1dff(0x527)]['x']=-0x1/(this[_0x3d1dff(0x527)]['x']||0.001),this['_svBattlerSprite'][_0x3d1dff(0x9f4)][_0x3d1dff(0x527)]['y']=0x1/(this['scale']['y']||0.001));},Sprite_Enemy['prototype'][_0x58cf34(0x743)]=function(){const _0x2ca5b8=_0x58cf34;this[_0x2ca5b8(0xc92)]&&this[_0x2ca5b8(0xc92)][_0x2ca5b8(0x743)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xaf8)]=Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x8b1)],Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x8b1)]=function(_0x121409){const _0x22a163=_0x58cf34;VisuMZ[_0x22a163(0xa6b)]['Sprite_Enemy_setBattler'][_0x22a163(0x9a4)](this,_0x121409),this[_0x22a163(0x500)](_0x121409);},Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x500)]=function(_0x833383){const _0x5a4864=_0x58cf34;!this['_svBattlerSprite']&&(this[_0x5a4864(0x718)]=new Sprite_SvEnemy(_0x833383),this[_0x5a4864(0xa49)]()),this[_0x5a4864(0x718)][_0x5a4864(0x8b1)](_0x833383);},Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0xae1)]=function(){const _0x336d9f=_0x58cf34;return this[_0x336d9f(0xbea)]&&this[_0x336d9f(0xbea)][_0x336d9f(0xae1)]();},Sprite_Enemy[_0x58cf34(0x8ef)]['allowCollapse']=function(){const _0x4f6ebb=_0x58cf34;return this['hasSvBattler']()?this[_0x4f6ebb(0xbea)][_0x4f6ebb(0x962)]():!![];},Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x7d9)]=function(){const _0x1ed23f=_0x58cf34;this[_0x1ed23f(0xae1)]()&&this[_0x1ed23f(0x718)][_0x1ed23f(0x7d9)]();},Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0x80a)]=function(_0x157b2c){const _0x21cc27=_0x58cf34;if(this[_0x21cc27(0xae1)]())this[_0x21cc27(0x718)][_0x21cc27(0x80a)](_0x157b2c);},Sprite_Enemy[_0x58cf34(0x8ef)]['forceWeaponAnimation']=function(_0x3ba883){const _0x22376e=_0x58cf34;if(this[_0x22376e(0xae1)]())this[_0x22376e(0x718)][_0x22376e(0x786)](_0x3ba883);},Sprite_Enemy[_0x58cf34(0x8ef)][_0x58cf34(0xa7a)]=function(){const _0x2b8176=_0x58cf34,_0x20c211=VisuMZ[_0x2b8176(0xa6b)][_0x2b8176(0xb05)]['ActionSequence'],_0x397c7b=_0x20c211['StepDistanceX'],_0x276664=_0x20c211[_0x2b8176(0x9b6)],_0x17c432=_0x20c211[_0x2b8176(0xcae)];this[_0x2b8176(0x634)](_0x397c7b,_0x276664,_0x17c432);};function Sprite_SvEnemy(){const _0x568306=_0x58cf34;this[_0x568306(0xb4e)](...arguments);}Sprite_SvEnemy['prototype']=Object[_0x58cf34(0x5fa)](Sprite_Actor['prototype']),Sprite_SvEnemy[_0x58cf34(0x8ef)][_0x58cf34(0x408)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)]=function(_0x101848){const _0x102c8b=_0x58cf34;Sprite_Actor[_0x102c8b(0x8ef)]['initialize'][_0x102c8b(0x9a4)](this,_0x101848),this['scale']['x']=-0x1,this[_0x102c8b(0x9f4)][_0x102c8b(0x527)]['x']=-0x1;},Sprite_SvEnemy['prototype'][_0x58cf34(0x77f)]=function(){},Sprite_SvEnemy[_0x58cf34(0x8ef)][_0x58cf34(0x622)]=function(){},Sprite_SvEnemy['prototype'][_0x58cf34(0x43a)]=function(_0x2f8977){},Sprite_SvEnemy[_0x58cf34(0x8ef)][_0x58cf34(0xa91)]=function(){},Sprite_SvEnemy[_0x58cf34(0x8ef)][_0x58cf34(0x5f4)]=function(){},Sprite_SvEnemy[_0x58cf34(0x8ef)]['updateStateSprite']=function(){this['_stateSprite']['visible']=![];},Sprite_SvEnemy['prototype']['updateBitmap']=function(){const _0x475d92=_0x58cf34;Sprite_Battler[_0x475d92(0x8ef)][_0x475d92(0x93d)][_0x475d92(0x9a4)](this);const _0x21ee86=this[_0x475d92(0xcc7)]['svBattlerName']();this[_0x475d92(0x839)]!==_0x21ee86&&(this[_0x475d92(0x839)]=_0x21ee86,this[_0x475d92(0x61e)][_0x475d92(0xa41)]=ImageManager['loadSvActor'](_0x21ee86)),this[_0x475d92(0x61e)]&&this[_0x475d92(0x61e)][_0x475d92(0xa41)]&&this[_0x475d92(0xc92)]&&(this[_0x475d92(0x61e)][_0x475d92(0xa41)][_0x475d92(0x78d)]!==this[_0x475d92(0xc92)][_0x475d92(0xa76)]()&&(this[_0x475d92(0x61e)][_0x475d92(0xa41)][_0x475d92(0x78d)]=this[_0x475d92(0xc92)][_0x475d92(0xa76)]()));},Sprite_SvEnemy[_0x58cf34(0x8ef)]['retreat']=function(){},Sprite_SvEnemy[_0x58cf34(0x8ef)][_0x58cf34(0x634)]=function(_0x4ca95,_0x415879,_0x4c24c4){const _0x3e6834=_0x58cf34;if(this[_0x3e6834(0x504)])this[_0x3e6834(0x504)]['startMove'](_0x4ca95,_0x415879,_0x4c24c4);},Sprite_SvEnemy['prototype']['refreshMotion']=function(){const _0x527749=_0x58cf34,_0x199816=this[_0x527749(0xcc7)];if(_0x199816){const _0x45298f=_0x199816[_0x527749(0x595)]();if(_0x199816[_0x527749(0x9b1)]()||_0x199816[_0x527749(0x2d4)]())this[_0x527749(0x2c0)]('walk');else{if(_0x45298f===0x3)this[_0x527749(0x2c0)](_0x527749(0x975));else{if(_0x45298f===0x2)this[_0x527749(0x2c0)]('sleep');else{if(_0x199816['isChanting']())this[_0x527749(0x2c0)](_0x527749(0x2ee));else{if(_0x199816[_0x527749(0x6a3)]()||_0x199816[_0x527749(0x9f3)]())this['startMotion']('guard');else{if(_0x45298f===0x1)this['startMotion'](_0x527749(0xc29));else{if(_0x199816[_0x527749(0x57e)]())this[_0x527749(0x2c0)]('dying');else _0x199816[_0x527749(0xb11)]()?this[_0x527749(0x2c0)](_0x527749(0x793)):this[_0x527749(0x2c0)](_0x199816['svBattlerData']()[_0x527749(0x496)]||_0x527749(0x793));}}}}}}}},Sprite_SvEnemy[_0x58cf34(0x8ef)][_0x58cf34(0xc54)]=function(){const _0x30ae0f=_0x58cf34;return this[_0x30ae0f(0x504)]?this[_0x30ae0f(0x504)][_0x30ae0f(0x75e)]===0x0&&this['parent'][_0x30ae0f(0x4df)]===0x0:!![];},Sprite_SvEnemy[_0x58cf34(0x8ef)][_0x58cf34(0x88d)]=function(){},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xad3)]=Sprite_Animation['prototype'][_0x58cf34(0xc57)],Sprite_Animation[_0x58cf34(0x8ef)]['targetSpritePosition']=function(_0x3eebea){const _0x5a92ca=_0x58cf34;return _0x3eebea['_distortionSprite']?this[_0x5a92ca(0xac5)](_0x3eebea):VisuMZ[_0x5a92ca(0xa6b)]['Sprite_Animation_targetSpritePosition'][_0x5a92ca(0x9a4)](this,_0x3eebea);},Sprite_Animation['prototype'][_0x58cf34(0xac5)]=function(_0x2a31f9){const _0x398671=_0x58cf34;let _0x11d59a=_0x2a31f9['x'],_0x176273=_0x2a31f9['y'],_0x62e0a7=_0x2a31f9[_0x398671(0x725)],_0x2a1805=_0x2a31f9[_0x398671(0x426)][_0x398671(0x527)]['y'];_0x2a31f9['x']=_0x2a31f9[_0x398671(0xc19)]+_0x2a31f9[_0x398671(0x1da)](),_0x2a31f9['y']=_0x2a31f9[_0x398671(0xa73)]+_0x2a31f9[_0x398671(0xb17)](),_0x2a31f9['height']*=_0x2a1805;let _0x1708e8=VisuMZ['BattleCore'][_0x398671(0xad3)][_0x398671(0x9a4)](this,_0x2a31f9);return _0x2a31f9['x']=_0x11d59a,_0x2a31f9['y']=_0x176273,_0x2a31f9[_0x398671(0x725)]=_0x62e0a7,_0x1708e8;},Sprite_Animation[_0x58cf34(0x8ef)][_0x58cf34(0x5bd)]=function(){const _0x5861e1=_0x58cf34;if(this['_isProjectile'])return![];return this['_animation']&&this[_0x5861e1(0xa77)]['name']&&this[_0x5861e1(0xa77)][_0x5861e1(0xc22)][_0x5861e1(0xcbb)](/<UNDER>/gi);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x495)]=Sprite_AnimationMV[_0x58cf34(0x8ef)][_0x58cf34(0x2a5)],Sprite_AnimationMV[_0x58cf34(0x8ef)][_0x58cf34(0x2a5)]=function(){const _0x2c8868=_0x58cf34;VisuMZ['BattleCore'][_0x2c8868(0x495)][_0x2c8868(0x9a4)](this);if(!SceneManager['isSceneBattle']())return;if(this[_0x2c8868(0xa77)][_0x2c8868(0x239)]===0x3)this['x']=Math[_0x2c8868(0x92e)](Graphics['boxWidth']/0x2),this['y']=Math[_0x2c8868(0x92e)](Graphics[_0x2c8868(0x1cb)]/0x2);else{if(this['battleStatusSprite'])return;}},Sprite_AnimationMV[_0x58cf34(0x8ef)][_0x58cf34(0x5bd)]=function(){const _0x458c0c=_0x58cf34;if(this['_isProjectile'])return![];return this[_0x458c0c(0xa77)]&&this[_0x458c0c(0xa77)][_0x458c0c(0xc22)]&&this[_0x458c0c(0xa77)]['name'][_0x458c0c(0xcbb)](/<UNDER>/gi);},Sprite_Damage[_0x58cf34(0x8ef)][_0x58cf34(0x4b6)]=function(_0x106abb){const _0x4eac65=_0x58cf34,_0x4e85ac=_0x106abb[_0x4eac65(0x3bf)]()||_0x106abb[_0x4eac65(0x9d9)]();if(_0x4e85ac[_0x4eac65(0x7db)]||_0x4e85ac[_0x4eac65(0xc1f)])this[_0x4eac65(0x331)]=0x0,this[_0x4eac65(0x657)]();else{if(_0x4e85ac[_0x4eac65(0x481)])this['_colorType']=_0x4e85ac['hpDamage']>=0x0?0x0:0x1,this['createDigits'](_0x4e85ac[_0x4eac65(0x956)]);else _0x106abb[_0x4eac65(0x328)]()&&_0x4e85ac[_0x4eac65(0x34a)]!==0x0&&(this[_0x4eac65(0x331)]=_0x4e85ac[_0x4eac65(0x34a)]>=0x0?0x2:0x3,this[_0x4eac65(0x918)](_0x4e85ac[_0x4eac65(0x34a)]));}_0x4e85ac['critical']&&this[_0x4eac65(0x703)]();},Sprite_Damage[_0x58cf34(0x8ef)]['setup']=function(_0xf469b5){},Sprite_Damage[_0x58cf34(0x8ef)][_0x58cf34(0x918)]=function(_0x42ef96){const _0x269d23=_0x58cf34;let _0x252de9=this['createString'](_0x42ef96);const _0x1f8541=this['fontSize'](),_0x425ec5=Math[_0x269d23(0x951)](_0x1f8541*0.75);for(let _0x5efa36=0x0;_0x5efa36<_0x252de9[_0x269d23(0x3eb)];_0x5efa36++){const _0x2ed4a3=this['createChildSprite'](_0x425ec5,_0x1f8541);_0x2ed4a3[_0x269d23(0xa41)][_0x269d23(0x8fb)](_0x252de9[_0x5efa36],0x0,0x0,_0x425ec5,_0x1f8541,'center'),_0x2ed4a3['x']=(_0x5efa36-(_0x252de9[_0x269d23(0x3eb)]-0x1)/0x2)*_0x425ec5,_0x2ed4a3['dy']=-_0x5efa36;}},Sprite_Damage['prototype'][_0x58cf34(0x774)]=function(_0x5de2bd){const _0x5273df=_0x58cf34;let _0x24dd56=Math[_0x5273df(0x85c)](_0x5de2bd)[_0x5273df(0xb96)]();this[_0x5273df(0x4d3)]()&&(_0x24dd56=VisuMZ['GroupDigits'](_0x24dd56));const _0x2e02d8=VisuMZ['BattleCore']['Settings'][_0x5273df(0x693)];let _0x3e5e69='',_0x41c94b='';switch(this[_0x5273df(0x331)]){case 0x0:_0x3e5e69=_0x2e02d8[_0x5273df(0x22c)]||_0x5273df(0x407),_0x41c94b=TextManager['hp'];if(_0x5de2bd===0x0)_0x3e5e69='%1';break;case 0x1:_0x3e5e69=_0x2e02d8[_0x5273df(0x63a)]||_0x5273df(0x857),_0x41c94b=TextManager['hp'];break;case 0x2:_0x3e5e69=_0x2e02d8['mpDamageFmt']||_0x5273df(0x26b),_0x41c94b=TextManager['mp'];break;case 0x3:_0x3e5e69=_0x2e02d8[_0x5273df(0xa36)]||_0x5273df(0x8f8),_0x41c94b=TextManager['mp'];break;}return _0x3e5e69[_0x5273df(0x1d3)](_0x24dd56,_0x41c94b)[_0x5273df(0x989)]();},Sprite_Damage['prototype'][_0x58cf34(0x4d3)]=function(){const _0x5db365=_0x58cf34;return Imported['VisuMZ_0_CoreEngine']?VisuMZ[_0x5db365(0x6c2)]['Settings'][_0x5db365(0xa1c)][_0x5db365(0x8c9)]:![];},Sprite_Damage[_0x58cf34(0x8ef)]['setupCriticalEffect']=function(){const _0x29db24=_0x58cf34,_0x1fb620=VisuMZ['BattleCore'][_0x29db24(0xb05)][_0x29db24(0x693)];_0x1fb620[_0x29db24(0x991)]=_0x1fb620['CriticalColor']||[0x0,0x0,0x0,0x0],this[_0x29db24(0x4b7)]=_0x1fb620['CriticalColor'][_0x29db24(0x2c3)](0x0),this[_0x29db24(0x278)]=_0x1fb620[_0x29db24(0xb5c)]||0x1;},Sprite_Damage['prototype']['setupTextPopup']=function(_0x598285,_0x578621){const _0x2fd0af=_0x58cf34;this[_0x2fd0af(0x4b7)]=_0x578621['flashColor']||[0x0,0x0,0x0,0x0],this[_0x2fd0af(0x4b7)]=JsonEx[_0x2fd0af(0x402)](this['_flashColor']),this[_0x2fd0af(0x278)]=_0x578621['flashDuration']||0x0;const _0x2ebc27=this[_0x2fd0af(0xac1)](),_0x415f64=Math[_0x2fd0af(0x951)](_0x2ebc27*0x1e),_0x1a505c=this[_0x2fd0af(0x9d0)](_0x415f64,_0x2ebc27);_0x1a505c[_0x2fd0af(0xa41)]['textColor']=ColorManager[_0x2fd0af(0x3a4)](_0x578621[_0x2fd0af(0x6d1)]),_0x1a505c['bitmap'][_0x2fd0af(0x8fb)](_0x598285,0x0,0x0,_0x415f64,_0x2ebc27,_0x2fd0af(0x318)),_0x1a505c['dy']=0x0;},Sprite_Damage[_0x58cf34(0x8ef)][_0x58cf34(0x6aa)]=function(_0x18b890,_0x370fd1,_0x2e223c){const _0x17c93b=_0x58cf34,_0x5afdb9=Math[_0x17c93b(0x238)](this[_0x17c93b(0xac1)](),ImageManager[_0x17c93b(0x84b)]),_0x1e1a2f=Math['floor'](_0x5afdb9*0x1e),_0x228e78=this[_0x17c93b(0x9d0)](_0x1e1a2f,_0x5afdb9),_0x140dcc=ImageManager[_0x17c93b(0x659)]/0x2,_0x245b7d=_0x228e78['bitmap'][_0x17c93b(0x866)](_0x370fd1+'\x20');_0x228e78[_0x17c93b(0xa41)][_0x17c93b(0x6d1)]=ColorManager['getColor'](_0x2e223c[_0x17c93b(0x6d1)]),_0x228e78[_0x17c93b(0xa41)][_0x17c93b(0x8fb)](_0x370fd1,_0x140dcc,0x0,_0x1e1a2f-_0x140dcc,_0x5afdb9,_0x17c93b(0x318));const _0x465377=Math[_0x17c93b(0x92e)]((_0x5afdb9-ImageManager[_0x17c93b(0x84b)])/0x2),_0x3d6be6=_0x1e1a2f/0x2-ImageManager[_0x17c93b(0x659)]-_0x245b7d/0x2+_0x140dcc/0x2,_0x209613=ImageManager['loadSystem']('IconSet'),_0x587f54=ImageManager['iconWidth'],_0x2d4505=ImageManager[_0x17c93b(0x84b)],_0x572176=_0x18b890%0x10*_0x587f54,_0x35ffea=Math[_0x17c93b(0x951)](_0x18b890/0x10)*_0x2d4505;_0x228e78[_0x17c93b(0xa41)][_0x17c93b(0x67c)](_0x209613,_0x572176,_0x35ffea,_0x587f54,_0x2d4505,_0x3d6be6,_0x465377),this[_0x17c93b(0x4b7)]=_0x2e223c[_0x17c93b(0x65f)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x17c93b(0x402)](this['_flashColor']),this['_flashDuration']=_0x2e223c[_0x17c93b(0x405)]||0x0,_0x228e78['dy']=0x0,_0x2e223c['offsetX']&&(_0x228e78['x']+=_0x2e223c['offsetX']),_0x2e223c[_0x17c93b(0x9e6)]&&(_0x228e78['dy']+=_0x2e223c[_0x17c93b(0x9e6)]);},VisuMZ['BattleCore'][_0x58cf34(0x44f)]=Sprite_Damage['prototype'][_0x58cf34(0x9d0)],Sprite_Damage[_0x58cf34(0x8ef)][_0x58cf34(0x9d0)]=function(_0x3361c4,_0x28c135){const _0x349faf=_0x58cf34;return _0x28c135=Math[_0x349faf(0x92e)](_0x28c135*1.2),VisuMZ['BattleCore'][_0x349faf(0x44f)][_0x349faf(0x9a4)](this,_0x3361c4,_0x28c135);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xa50)]=Sprite_StateIcon[_0x58cf34(0x8ef)][_0x58cf34(0xc9a)],Sprite_StateIcon[_0x58cf34(0x8ef)]['updateFrame']=function(){const _0x24d760=_0x58cf34;VisuMZ['BattleCore'][_0x24d760(0xa50)][_0x24d760(0x9a4)](this),this[_0x24d760(0xc46)]=this[_0x24d760(0x3ff)]>0x0?0xff:0x0;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x696)]=Sprite_Weapon[_0x58cf34(0x8ef)]['loadBitmap'],Sprite_Weapon['prototype'][_0x58cf34(0x695)]=function(){const _0x4c1bf4=_0x58cf34;VisuMZ[_0x4c1bf4(0xa6b)][_0x4c1bf4(0x696)][_0x4c1bf4(0x9a4)](this),this[_0x4c1bf4(0xa41)]&&(this[_0x4c1bf4(0xa41)][_0x4c1bf4(0x78d)]=VisuMZ[_0x4c1bf4(0xa6b)]['Settings'][_0x4c1bf4(0xb3d)][_0x4c1bf4(0x27e)]);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xc85)]=Sprite_Gauge[_0x58cf34(0x8ef)]['smoothness'],Sprite_Gauge[_0x58cf34(0x8ef)]['smoothness']=function(){const _0x25faaa=_0x58cf34;return this[_0x25faaa(0x5f0)]!=='time'?VisuMZ[_0x25faaa(0xa6b)][_0x25faaa(0xb05)]['HpGauge'][_0x25faaa(0x9cf)]??0x14:VisuMZ[_0x25faaa(0xa6b)][_0x25faaa(0xc85)][_0x25faaa(0x9a4)](this);};function Sprite_GaugeRate(){const _0xc9d39d=_0x58cf34;this[_0xc9d39d(0xb4e)](...arguments);}Sprite_GaugeRate[_0x58cf34(0x8ef)]=Object['create'](Sprite_Gauge['prototype']),Sprite_GaugeRate['prototype'][_0x58cf34(0x408)]=Sprite_GaugeRate,Sprite_GaugeRate[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)]=function(){const _0x752721=_0x58cf34;Sprite_Gauge[_0x752721(0x8ef)][_0x752721(0xb4e)][_0x752721(0x9a4)](this),this[_0x752721(0x1cc)]=![];},Sprite_GaugeRate[_0x58cf34(0x8ef)][_0x58cf34(0x5af)]=function(_0x145461,_0x12f1b8){const _0x2b153c=_0x58cf34;this[_0x2b153c(0x1cc)]=!![],Sprite_Gauge[_0x2b153c(0x8ef)][_0x2b153c(0x5af)][_0x2b153c(0x9a4)](this,_0x145461,_0x12f1b8),this[_0x2b153c(0x1cc)]=![];},Sprite_GaugeRate[_0x58cf34(0x8ef)][_0x58cf34(0x9bc)]=function(){const _0x26aec1=_0x58cf34;if(this[_0x26aec1(0x1cc)]){const _0x32bedc=Sprite_Gauge[_0x26aec1(0x8ef)]['currentValue'][_0x26aec1(0x9a4)](this),_0x551346=this[_0x26aec1(0xc2d)]();if(_0x551346<=0x0)return'100%';return Math[_0x26aec1(0x951)](_0x32bedc/_0x551346*0x64)+'%';}else return Sprite_Gauge[_0x26aec1(0x8ef)][_0x26aec1(0x9bc)][_0x26aec1(0x9a4)](this);},Sprite_GaugeRate[_0x58cf34(0x8ef)][_0x58cf34(0x27b)]=function(){const _0x5954cb=_0x58cf34,_0x39e441=Sprite_Gauge[_0x5954cb(0x8ef)]['currentValue'][_0x5954cb(0x9a4)](this),_0x43d8ef=this['currentMaxValue']();if(_0x43d8ef<=0x0)return _0x5954cb(0xcb0);return Math[_0x5954cb(0x951)](_0x39e441/_0x43d8ef*0x64)+'%';},Sprite_GaugeRate[_0x58cf34(0x8ef)][_0x58cf34(0x2c6)]=function(){const _0x2f2b96=_0x58cf34;if(this[_0x2f2b96(0xc2d)]()<=0x0)return 0x1;return Sprite_Gauge[_0x2f2b96(0x8ef)][_0x2f2b96(0x2c6)][_0x2f2b96(0x9a4)](this);},Sprite_GaugeRate[_0x58cf34(0x8ef)]['valueColor']=function(){const _0x414109=_0x58cf34;if(this['currentMaxValue']()<=0x0)return ColorManager[_0x414109(0x5ec)]();return Sprite_Gauge[_0x414109(0x8ef)][_0x414109(0x543)]['call'](this);},Sprite_GaugeRate['prototype'][_0x58cf34(0x617)]=function(){const _0x58588a=_0x58cf34;this[_0x58588a(0x5f0)]==='mp'&&this[_0x58588a(0xc2d)]()<=0x0&&($gameTemp['redrawForGaugeRate']=!![]),Sprite_Gauge[_0x58588a(0x8ef)][_0x58588a(0x617)][_0x58588a(0x9a4)](this),$gameTemp[_0x58588a(0xabd)]=undefined;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x291)]=ColorManager[_0x58cf34(0x448)],ColorManager[_0x58cf34(0x448)]=function(_0x2884c6){const _0x5e05f7=_0x58cf34;if($gameTemp[_0x5e05f7(0xabd)])return ColorManager[_0x5e05f7(0x5ec)]();return VisuMZ['BattleCore'][_0x5e05f7(0x291)][_0x5e05f7(0x9a4)](this,_0x2884c6);};function Sprite_HpGauge(){const _0x5580c8=_0x58cf34;this[_0x5580c8(0xb4e)](...arguments);}Sprite_HpGauge[_0x58cf34(0x8ef)]=Object[_0x58cf34(0x5fa)](Sprite_Gauge[_0x58cf34(0x8ef)]),Sprite_HpGauge['prototype'][_0x58cf34(0x408)]=Sprite_HpGauge,Sprite_HpGauge[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)]=function(){const _0x2c29dc=_0x58cf34;Sprite_Gauge[_0x2c29dc(0x8ef)]['initialize'][_0x2c29dc(0x9a4)](this);},Sprite_HpGauge['prototype'][_0x58cf34(0x650)]=function(){return 0x0;},Sprite_HpGauge[_0x58cf34(0x8ef)][_0x58cf34(0x617)]=function(){const _0x2dfc06=_0x58cf34;this['bitmap'][_0x2dfc06(0xcdf)]();const _0x9fe882=this[_0x2dfc06(0x9bc)]();!isNaN(_0x9fe882)&&this[_0x2dfc06(0x798)]();};function Sprite_EnemyName(){this['initialize'](...arguments);}Sprite_EnemyName['prototype']=Object[_0x58cf34(0x5fa)](Sprite_Name[_0x58cf34(0x8ef)]),Sprite_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0x408)]=Sprite_EnemyName,Sprite_EnemyName[_0x58cf34(0x8ef)]['initialize']=function(){const _0x2f3b2c=_0x58cf34;Sprite_Name[_0x2f3b2c(0x8ef)][_0x2f3b2c(0xb4e)][_0x2f3b2c(0x9a4)](this),this['createAttachedSprites']();},Sprite_EnemyName[_0x58cf34(0x8ef)]['initMembers']=function(){const _0x3c9cf0=_0x58cf34;Sprite_Name[_0x3c9cf0(0x8ef)][_0x3c9cf0(0x7c8)][_0x3c9cf0(0x9a4)](this),this['opacity']=0x0,this[_0x3c9cf0(0x2e9)]=null,this[_0x3c9cf0(0x9cc)]['x']=0.5,this[_0x3c9cf0(0x9cc)]['y']=0x0;},Sprite_EnemyName[_0x58cf34(0x8ef)]['createAttachedSprites']=function(){const _0x33c05b=_0x58cf34;VisuMZ[_0x33c05b(0xa6b)][_0x33c05b(0xb05)][_0x33c05b(0x48b)][_0x33c05b(0xaf0)]&&(this['_stateIconSprite']=new Sprite_StateIcon(),this[_0x33c05b(0x3ac)](this[_0x33c05b(0x2cd)]));},Sprite_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0xcd4)]=function(){const _0x10e93e=_0x58cf34;return Graphics[_0x10e93e(0x9ad)];},Sprite_EnemyName['prototype'][_0x58cf34(0xa47)]=function(){const _0x2fc463=_0x58cf34;return this[_0x2fc463(0x687)]=this['_lineHeight']||Window_Base[_0x2fc463(0x8ef)][_0x2fc463(0x7b1)]()||0x24,this[_0x2fc463(0x687)]*0x4;},Sprite_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0xac1)]=function(){const _0x306450=_0x58cf34;return VisuMZ['BattleCore']['Settings'][_0x306450(0x48b)][_0x306450(0x558)]||$gameSystem['mainFontSize']();},Sprite_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0x260)]=function(_0x1061cd){const _0x1d0497=_0x58cf34;this[_0x1d0497(0x2e9)]=_0x1061cd;},Sprite_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0x6a2)]=function(){const _0x300016=_0x58cf34;Sprite_Name[_0x300016(0x8ef)][_0x300016(0x6a2)][_0x300016(0x9a4)](this),this[_0x300016(0xa1d)](),this[_0x300016(0x2a5)](),this[_0x300016(0xc99)](),this['updateOpacity']();},Sprite_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0x617)]=function(){const _0x38d9e1=_0x58cf34;this[_0x38d9e1(0x26c)]=undefined;const _0x49d7a3=this[_0x38d9e1(0xc22)](),_0x5e82bf=this[_0x38d9e1(0xcd4)](),_0x28c9f7=Window_Base[_0x38d9e1(0x8ef)][_0x38d9e1(0x7b1)]();this[_0x38d9e1(0x6e9)](),this['bitmap'][_0x38d9e1(0xcdf)](),this[_0x38d9e1(0xa41)][_0x38d9e1(0x8fb)](_0x49d7a3,0x0,0x0,_0x5e82bf,_0x28c9f7,'center');},Sprite_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0xa1d)]=function(){const _0x3e215b=_0x58cf34;if(!this[_0x3e215b(0x2e9)])return;this[_0x3e215b(0xc92)]!==this[_0x3e215b(0x2e9)][_0x3e215b(0xc92)]&&this[_0x3e215b(0x6e1)](this[_0x3e215b(0x2e9)][_0x3e215b(0xc92)]);},Sprite_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0x2a5)]=function(){const _0x3150e0=_0x58cf34;if(!this[_0x3150e0(0x2e9)])return;this[_0x3150e0(0x687)]=this[_0x3150e0(0x687)]||Window_Base[_0x3150e0(0x8ef)][_0x3150e0(0x7b1)](),this['x']=Math[_0x3150e0(0x92e)](this[_0x3150e0(0x2e9)][_0x3150e0(0xc19)]),this['y']=Math[_0x3150e0(0x92e)](this['_linkedSprite'][_0x3150e0(0xa73)]-this[_0x3150e0(0x687)]*0.5);const _0xc456a8=VisuMZ[_0x3150e0(0xa6b)]['Settings'][_0x3150e0(0x48b)];this['x']+=Math[_0x3150e0(0x92e)](_0xc456a8[_0x3150e0(0x4f2)]||0x0),this['y']+=Math['round'](_0xc456a8[_0x3150e0(0x40e)]||0x0);},Sprite_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0xc99)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0x234)]=function(){const _0x21e0cb=_0x58cf34;if(!this['_stateIconSprite'])return;this[_0x21e0cb(0xc92)]!==this[_0x21e0cb(0x2cd)][_0x21e0cb(0xc92)]&&this['_stateIconSprite']['setup'](this[_0x21e0cb(0xc92)]);const _0x3e85dc=this[_0x21e0cb(0xb2c)]();this[_0x21e0cb(0x687)]=this[_0x21e0cb(0x687)]||Window_Base[_0x21e0cb(0x8ef)][_0x21e0cb(0x7b1)](),this[_0x21e0cb(0x2cd)]['x']=Math[_0x21e0cb(0x92e)]((_0x3e85dc+ImageManager[_0x21e0cb(0x659)])/0x2)+0x8,this[_0x21e0cb(0x2cd)]['y']=this['_lineHeight']/0x2;const _0x14db77=VisuMZ[_0x21e0cb(0xa6b)][_0x21e0cb(0xb05)][_0x21e0cb(0x48b)];this['_stateIconSprite']['x']+=_0x14db77[_0x21e0cb(0x7ab)]||0x0,this[_0x21e0cb(0x2cd)]['y']+=_0x14db77[_0x21e0cb(0x6ff)]||0x0;},Sprite_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0xc39)]=function(){const _0x1cd1e4=_0x58cf34,_0x10c9e7=this[_0x1cd1e4(0x794)]();if(_0x10c9e7&&this[_0x1cd1e4(0xc46)]<0xff)this[_0x1cd1e4(0xc46)]+=0x10;else!_0x10c9e7&&this[_0x1cd1e4(0xc46)]>0x0&&(this['opacity']-=0x10);},Sprite_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0x794)]=function(){const _0x44bf6f=_0x58cf34;if(this[_0x44bf6f(0x87f)]())return![];else{if(!this[_0x44bf6f(0xc92)])return![];else{if(!this['_battler'][_0x44bf6f(0x4a7)]())return![];else{if(this[_0x44bf6f(0x32f)]())return!![];else{if(this[_0x44bf6f(0xc92)][_0x44bf6f(0xc87)]())return![];else{if(this[_0x44bf6f(0x379)]())return!![];else{if(this[_0x44bf6f(0x699)]())return!![];else{if(this['isAlwaysVisible']())return!![];else{if(this[_0x44bf6f(0x491)]())return!![];else{if(this[_0x44bf6f(0xc46)]>0x0)return![];}}}}}}}}}},Sprite_EnemyName['prototype']['temporaryVisibile']=function(){const _0x309bc5=_0x58cf34;return this[_0x309bc5(0xc92)]&&this[_0x309bc5(0xc92)][_0x309bc5(0xad9)]();},Sprite_EnemyName['prototype'][_0x58cf34(0x87f)]=function(){const _0x28c1dd=_0x58cf34;return VisuMZ[_0x28c1dd(0xa6b)]['Settings'][_0x28c1dd(0x48b)][_0x28c1dd(0x3b8)];},Sprite_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0x379)]=function(){const _0x1d9cae=_0x58cf34;if(!VisuMZ[_0x1d9cae(0xa6b)][_0x1d9cae(0xb05)][_0x1d9cae(0x48b)]['NameAsTarget'])return![];if(BattleManager[_0x1d9cae(0x9b1)]()&&!BattleManager['isActiveTpb']())return![];return this[_0x1d9cae(0xc92)]&&BattleManager[_0x1d9cae(0x6f1)]&&BattleManager[_0x1d9cae(0x922)][_0x1d9cae(0x375)](this[_0x1d9cae(0xc92)]);},Sprite_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0x699)]=function(){return![];},Sprite_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0x806)]=function(){const _0x2676c4=_0x58cf34;return VisuMZ[_0x2676c4(0xa6b)][_0x2676c4(0xb05)][_0x2676c4(0x48b)][_0x2676c4(0x9ea)];},Sprite_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0x491)]=function(){const _0x4d3373=_0x58cf34;return VisuMZ[_0x4d3373(0xa6b)][_0x4d3373(0xb05)][_0x4d3373(0x48b)][_0x4d3373(0x7fe)]?this[_0x4d3373(0xc92)][_0x4d3373(0x59b)]():SceneManager[_0x4d3373(0xb85)][_0x4d3373(0xa6e)]&&SceneManager[_0x4d3373(0xb85)][_0x4d3373(0xa6e)]['active']&&SceneManager['_scene'][_0x4d3373(0xa6e)]['_enemies']['includes'](this[_0x4d3373(0xc92)]);},Sprite_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0xb2c)]=function(){const _0x32d37e=_0x58cf34;if(!this[_0x32d37e(0xc92)])return 0x0;if(this[_0x32d37e(0x26c)])return this[_0x32d37e(0x26c)];const _0x28f36e=this[_0x32d37e(0xc22)]();return this[_0x32d37e(0x6e9)](),this[_0x32d37e(0x26c)]=this[_0x32d37e(0xa41)][_0x32d37e(0x866)](_0x28f36e)||0x1,this[_0x32d37e(0x26c)];},VisuMZ['BattleCore'][_0x58cf34(0x8eb)]=Sprite_Battleback[_0x58cf34(0x8ef)]['adjustPosition'],Sprite_Battleback['prototype'][_0x58cf34(0x25f)]=function(){const _0x21e55d=_0x58cf34,_0x37e0b7=VisuMZ[_0x21e55d(0xa6b)][_0x21e55d(0xb05)][_0x21e55d(0xadc)];if(!_0x37e0b7)return VisuMZ['BattleCore']['Sprite_Battleback_adjustPosition'][_0x21e55d(0x9a4)](this);const _0x4f294f=String(_0x37e0b7[_0x21e55d(0x39c)])||'MZ';switch(_0x4f294f){case'MZ':VisuMZ[_0x21e55d(0xa6b)][_0x21e55d(0x8eb)][_0x21e55d(0x9a4)](this);break;case'1:1':this[_0x21e55d(0xb78)]();break;case _0x21e55d(0x9bd):this[_0x21e55d(0x45a)]();break;case _0x21e55d(0x7ea):this[_0x21e55d(0x954)]();break;case'ScaleUp':this[_0x21e55d(0x479)]();break;}},Sprite_Battleback[_0x58cf34(0x8ef)]['adjustPosition_1for1']=function(){const _0x16c44c=_0x58cf34,_0x131472=VisuMZ[_0x16c44c(0xa6b)][_0x16c44c(0xb05)][_0x16c44c(0xadc)];if(_0x131472&&_0x131472[_0x16c44c(0xa37)])return _0x131472['jsOneForOne'][_0x16c44c(0x9a4)](this);this[_0x16c44c(0xc78)]=Graphics[_0x16c44c(0xc78)],this[_0x16c44c(0x725)]=Graphics[_0x16c44c(0x725)];const _0x305802=0x1;this[_0x16c44c(0x527)]['x']=_0x305802,this[_0x16c44c(0x527)]['y']=_0x305802,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x58cf34(0x8ef)][_0x58cf34(0x45a)]=function(){const _0x3d465d=_0x58cf34,_0x15aaab=VisuMZ[_0x3d465d(0xa6b)]['Settings'][_0x3d465d(0xadc)];if(_0x15aaab&&_0x15aaab['jsScaleToFit'])return _0x15aaab[_0x3d465d(0x926)][_0x3d465d(0x9a4)](this);this['width']=Graphics[_0x3d465d(0xc78)],this['height']=Graphics[_0x3d465d(0x725)];const _0x2cfa4b=this[_0x3d465d(0xc78)]/this['bitmap']['width'],_0x353ee2=this[_0x3d465d(0x725)]/this[_0x3d465d(0xa41)]['height'],_0x505f49=Math[_0x3d465d(0x238)](_0x2cfa4b,_0x353ee2);this[_0x3d465d(0x527)]['x']=_0x505f49,this['scale']['y']=_0x505f49,this['x']=(Graphics['width']-this[_0x3d465d(0xc78)])/0x2,this['y']=Graphics[_0x3d465d(0x725)]-this['height'];},Sprite_Battleback[_0x58cf34(0x8ef)][_0x58cf34(0x954)]=function(){const _0x2124c9=_0x58cf34,_0x4c62e7=VisuMZ[_0x2124c9(0xa6b)][_0x2124c9(0xb05)]['BattlebackScale'];if(_0x4c62e7&&_0x4c62e7[_0x2124c9(0x9f0)])return _0x4c62e7[_0x2124c9(0x9f0)][_0x2124c9(0x9a4)](this);this[_0x2124c9(0xc78)]=Graphics['width'],this[_0x2124c9(0x725)]=Graphics[_0x2124c9(0x725)];const _0x481cd2=Math[_0x2124c9(0xa8f)](0x1,this[_0x2124c9(0xc78)]/this[_0x2124c9(0xa41)]['width']),_0x261113=Math[_0x2124c9(0xa8f)](0x1,this[_0x2124c9(0x725)]/this[_0x2124c9(0xa41)]['height']),_0x3cfb00=Math['max'](_0x481cd2,_0x261113);this[_0x2124c9(0x527)]['x']=_0x3cfb00,this[_0x2124c9(0x527)]['y']=_0x3cfb00,this['x']=(Graphics['width']-this[_0x2124c9(0xc78)])/0x2,this['y']=Graphics[_0x2124c9(0x725)]-this['height'];},Sprite_Battleback[_0x58cf34(0x8ef)]['adjustPosition_ScaleUp']=function(){const _0x3eb56b=_0x58cf34,_0x5dbbff=VisuMZ[_0x3eb56b(0xa6b)][_0x3eb56b(0xb05)][_0x3eb56b(0xadc)];if(_0x5dbbff&&_0x5dbbff['jsScaleUp'])return _0x5dbbff[_0x3eb56b(0xaa0)]['call'](this);this[_0x3eb56b(0xc78)]=Graphics[_0x3eb56b(0xc78)],this[_0x3eb56b(0x725)]=Graphics[_0x3eb56b(0x725)];const _0xfb8ed5=Math[_0x3eb56b(0x238)](0x1,this[_0x3eb56b(0xc78)]/this[_0x3eb56b(0xa41)][_0x3eb56b(0xc78)]),_0x2e8ea7=Math['max'](0x1,this[_0x3eb56b(0x725)]/this[_0x3eb56b(0xa41)][_0x3eb56b(0x725)]),_0x1297d3=Math[_0x3eb56b(0x238)](_0xfb8ed5,_0x2e8ea7);this[_0x3eb56b(0x527)]['x']=_0x1297d3,this[_0x3eb56b(0x527)]['y']=_0x1297d3,this['x']=(Graphics[_0x3eb56b(0xc78)]-this['width'])/0x2,this['y']=Graphics[_0x3eb56b(0x725)]-this[_0x3eb56b(0x725)];},Spriteset_Battle['ANTI_TINT_UI']=VisuMZ[_0x58cf34(0xa6b)]['Settings'][_0x58cf34(0x272)]['AntiTintUiElements']??!![],Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xbad)]=function(){const _0x2ea5af=_0x58cf34;if(!$gameSystem[_0x2ea5af(0xc41)]())return![];return![];},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x59c)]=function(){return 0x0;},Spriteset_Battle['prototype'][_0x58cf34(0x46c)]=function(){return 0x0;},VisuMZ[_0x58cf34(0xa6b)]['Spriteset_Battle_createLowerLayer']=Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x3ad)],Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x3ad)]=function(){const _0x199fb3=_0x58cf34;VisuMZ['BattleCore'][_0x199fb3(0x851)]['call'](this),this['createWeather'](),this[_0x199fb3(0x372)]();},VisuMZ['BattleCore'][_0x58cf34(0x235)]=Spriteset_Battle[_0x58cf34(0x8ef)]['update'],Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x6a2)]=function(){const _0x5e34d2=_0x58cf34;VisuMZ['BattleCore']['Spriteset_Battle_update']['call'](this),this['updateBattlerContainer'](),this['updateUiContainerPosition'](),this[_0x5e34d2(0x710)](),this[_0x5e34d2(0x742)]();},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x3a0)]=function(){const _0x218511=_0x58cf34;this[_0x218511(0xb72)]=new Weather(),this[_0x218511(0x7bf)][_0x218511(0x3ac)](this[_0x218511(0xb72)]);},Spriteset_Battle['prototype'][_0x58cf34(0x710)]=function(){const _0x5e600d=_0x58cf34;this[_0x5e600d(0xb72)][_0x5e600d(0x83c)]=$gameScreen[_0x5e600d(0x287)](),this[_0x5e600d(0xb72)][_0x5e600d(0x299)]=$gameScreen[_0x5e600d(0x758)]();},Game_Interpreter[_0x58cf34(0x8ef)][_0x58cf34(0x57f)]=function(_0x507571){const _0x595df0=_0x58cf34;$gameScreen[_0x595df0(0x94a)](_0x507571[0x0],_0x507571[0x1],_0x507571[0x2]);if(_0x507571[0x3])this[_0x595df0(0xa15)](_0x507571[0x2]);return!![];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xbc1)]=Game_Interpreter[_0x58cf34(0x8ef)][_0x58cf34(0x5ca)],Game_Interpreter[_0x58cf34(0x8ef)][_0x58cf34(0x5ca)]=function(_0x3eb231){const _0x29b76f=_0x58cf34;return VisuMZ[_0x29b76f(0xa6b)][_0x29b76f(0xbc1)][_0x29b76f(0x9a4)](this,_0x3eb231),SceneManager[_0x29b76f(0x3d3)]()&&SceneManager[_0x29b76f(0xb85)]['_spriteset'][_0x29b76f(0x588)](_0x3eb231[0x0],_0x3eb231[0x1]),!![];},Sprite_Battleback[_0x58cf34(0x8ef)][_0x58cf34(0xb3b)]=function(){const _0x1154c7=_0x58cf34;if($gameMap[_0x1154c7(0xb3b)]()!==null)return $gameMap[_0x1154c7(0xb3b)]();else{if(BattleManager['isBattleTest']())return $dataSystem[_0x1154c7(0xb3b)];else return $gameMap['isOverworld']()?this[_0x1154c7(0xc18)]():'';}},Sprite_Battleback[_0x58cf34(0x8ef)][_0x58cf34(0x917)]=function(){const _0x4cecce=_0x58cf34;if($gameMap[_0x4cecce(0x917)]()!==null)return $gameMap['battleback2Name']();else{if(BattleManager[_0x4cecce(0x7d3)]())return $dataSystem[_0x4cecce(0x917)];else return $gameMap['isOverworld']()?this[_0x4cecce(0x4fe)]():'';}},Spriteset_Battle['prototype'][_0x58cf34(0x451)]=function(_0x537089,_0x3a3688){const _0x342604=_0x58cf34;_0x537089[_0x342604(0xa41)]=_0x3a3688;},Spriteset_Battle['prototype'][_0x58cf34(0x588)]=function(_0x209d08,_0x2a3fe6){const _0x1b23b3=_0x58cf34;_0x209d08=_0x209d08||'',_0x2a3fe6=_0x2a3fe6||'';_0x209d08===''&&_0x2a3fe6===''&&(_0x209d08=this[_0x1b23b3(0x85e)][_0x1b23b3(0xb3b)](),_0x2a3fe6=this[_0x1b23b3(0x339)][_0x1b23b3(0x917)]());const _0x2a80c5=ImageManager[_0x1b23b3(0x60d)](_0x209d08),_0x311da3=ImageManager[_0x1b23b3(0x5b6)](_0x2a3fe6);_0x2a80c5[_0x1b23b3(0xb47)](this[_0x1b23b3(0x4d2)][_0x1b23b3(0xaf2)](this,this[_0x1b23b3(0x85e)],this[_0x1b23b3(0x339)],_0x2a80c5,_0x311da3));},Spriteset_Battle[_0x58cf34(0x8ef)]['updateBattlebackBitmap1']=function(_0x2644ef,_0x16cf44,_0x2e7603,_0x1230c2){const _0x2d9eca=_0x58cf34;_0x1230c2[_0x2d9eca(0xb47)](this['updateBattlebackBitmap2']['bind'](this,_0x2644ef,_0x16cf44,_0x2e7603,_0x1230c2));},Spriteset_Battle['prototype'][_0x58cf34(0xa38)]=function(_0x2ec8a3,_0x12b71f,_0x8759dd,_0x11c824){const _0x364833=_0x58cf34;_0x2ec8a3['bitmap']=_0x8759dd,_0x12b71f['bitmap']=_0x11c824,_0x2ec8a3[_0x364833(0x25f)](),_0x12b71f[_0x364833(0x25f)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x9c4)]=Spriteset_Battle['prototype']['createBattleField'],Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xb69)]=function(){VisuMZ['BattleCore']['Spriteset_Battle_createBattleField']['call'](this),this['createBattleFieldBattleCore']();},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x916)]=function(){const _0xaca5ac=_0x58cf34;this[_0xaca5ac(0x65b)](),this[_0xaca5ac(0x570)](),this[_0xaca5ac(0xcdc)](),this[_0xaca5ac(0x374)](),this['adjustFlippedBattlefield']();},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x65b)]=function(){const _0x270059=_0x58cf34;this[_0x270059(0x576)]=new Sprite(),this[_0x270059(0x7bf)][_0x270059(0x3ac)](this[_0x270059(0x576)]),this[_0x270059(0xb0a)]=new Sprite(),this['_battleField'][_0x270059(0x3ac)](this['_battlerContainer']);},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xcdc)]=function(){const _0xeba9a9=_0x58cf34;this[_0xeba9a9(0x3e2)]=new Sprite(),Spriteset_Battle[_0xeba9a9(0x28d)]?this[_0xeba9a9(0x3ac)](this[_0xeba9a9(0x3e2)]):this[_0xeba9a9(0x7bf)]['addChild'](this[_0xeba9a9(0x3e2)]);},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x374)]=function(){const _0x42fbf8=_0x58cf34;this[_0x42fbf8(0x9e4)]=new Sprite(),this[_0x42fbf8(0x9e4)]['x']=this[_0x42fbf8(0x7bf)]['x'],this[_0x42fbf8(0x9e4)]['y']=this[_0x42fbf8(0x7bf)]['y'],this['addChild'](this[_0x42fbf8(0x9e4)]);},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x819)]=function(){const _0x278dfc=_0x58cf34;if(!this[_0x278dfc(0xbad)]())return;this['_battlerContainer'][_0x278dfc(0x527)]['x']=-0x1,this[_0x278dfc(0xb0a)]['x']=this[_0x278dfc(0x7bf)][_0x278dfc(0xc78)],this[_0x278dfc(0x8e7)][_0x278dfc(0x527)]['x']=-0x1,this[_0x278dfc(0x8e7)]['x']=this['_battleField']['width'],this[_0x278dfc(0x3e2)][_0x278dfc(0x527)]['x']=-0x1,this['_animationContainer']['x']=this[_0x278dfc(0x7bf)][_0x278dfc(0xc78)],this['_damageContainer']['scale']['x']=-0x1,this[_0x278dfc(0x9e4)]['x']=this[_0x278dfc(0x7bf)]['x']+this['_battleField'][_0x278dfc(0xc78)];},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xba6)]=function(){const _0x29ea8b=_0x58cf34;Imported['VisuMZ_0_CoreEngine']&&this[_0x29ea8b(0x97b)]()&&this[_0x29ea8b(0x82a)]();const _0x48eb2c=$gameTroop[_0x29ea8b(0x7b4)](),_0x43c81f=[];for(const _0x28ab1f of _0x48eb2c){_0x43c81f[_0x29ea8b(0x6db)](new Sprite_Enemy(_0x28ab1f));}_0x43c81f[_0x29ea8b(0xa67)](this['compareEnemySprite'][_0x29ea8b(0xaf2)](this));for(const _0x518dd2 of _0x43c81f){this[_0x29ea8b(0xb0a)]['addChild'](_0x518dd2);}this[_0x29ea8b(0x50f)]=_0x43c81f;},Spriteset_Battle[_0x58cf34(0x8ef)]['createActors']=function(){const _0x46e7f2=_0x58cf34;this[_0x46e7f2(0x6a4)]=[];for(let _0x4daf3f=0x0;_0x4daf3f<$gameParty[_0x46e7f2(0x5be)]();_0x4daf3f++){const _0x33083c=$gameParty[_0x46e7f2(0x623)]()[_0x4daf3f],_0x2ac7d1=new Sprite_Actor();_0x2ac7d1[_0x46e7f2(0x39e)](_0x33083c),_0x2ac7d1['setBattler'](_0x33083c),_0x2ac7d1[_0x46e7f2(0x6a2)](),this[_0x46e7f2(0x6a4)][_0x46e7f2(0x6db)](_0x2ac7d1),this[_0x46e7f2(0xb0a)]['addChild'](_0x2ac7d1);}},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x560)]=function(_0x3023ba,_0x45d7f4,_0x3f2c2c,_0x246209){const _0x50994b=_0x58cf34,_0x28e915=this[_0x50994b(0x924)](_0x45d7f4),_0x347895=new(_0x28e915?Sprite_AnimationMV:Sprite_Animation)(),_0x12c2fd=this[_0x50994b(0x972)](_0x3023ba);this[_0x50994b(0xa9b)](_0x3023ba[0x0])&&(_0x3f2c2c=!_0x3f2c2c),_0x347895[_0x50994b(0x56b)]=_0x3023ba,_0x347895[_0x50994b(0x6e1)](_0x12c2fd,_0x45d7f4,_0x3f2c2c,_0x246209),this['addAnimationSpriteToContainer'](_0x347895);},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x342)]=function(_0x1cdd48){const _0x54b93c=_0x58cf34;this[_0x54b93c(0xb01)](_0x1cdd48)?(this[_0x54b93c(0x91c)]()[_0x54b93c(0x3ac)](_0x1cdd48),_0x1cdd48[_0x54b93c(0x363)]=!![]):(Spriteset_Battle[_0x54b93c(0x28d)]&&(this['_animationContainer']['x']=this[_0x54b93c(0x6cb)]['x'],this[_0x54b93c(0x3e2)]['y']=this[_0x54b93c(0x6cb)]['y']),this[_0x54b93c(0x576)]&&_0x1cdd48[_0x54b93c(0x5bd)]&&_0x1cdd48[_0x54b93c(0x5bd)]()?(this[_0x54b93c(0x576)][_0x54b93c(0x3ac)](_0x1cdd48),this[_0x54b93c(0x576)]['x']=this['_animationContainer']['x'],this[_0x54b93c(0x576)]['y']=this[_0x54b93c(0x3e2)]['y']):this['_animationContainer'][_0x54b93c(0x3ac)](_0x1cdd48)),this['_animationSprites'][_0x54b93c(0x6db)](_0x1cdd48);},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xb01)]=function(_0x21317c){const _0x27c115=_0x58cf34;if(!_0x21317c)return![];if(!_0x21317c['_animation'])return![];if(!_0x21317c[_0x27c115(0x56b)][0x0])return![];if(_0x21317c['targetObjects'][0x0][_0x27c115(0x40c)]&&!_0x21317c['targetObjects'][0x0][_0x27c115(0x40c)]())return![];if($gameSystem['isSideView']())return![];if(!this['battleStatusWindowAnimationContainer']())return![];if(_0x21317c[_0x27c115(0x408)]===Sprite_Animation){const _0x31d839=VisuMZ[_0x27c115(0xa6b)][_0x27c115(0xb05)]['Actor'];_0x31d839[_0x27c115(0xa16)]=_0x31d839['FvAniEachTarget']??!![];if(_0x21317c[_0x27c115(0xa77)][_0x27c115(0x4ef)]===0x0&&!_0x31d839[_0x27c115(0xa16)])return![];_0x31d839['FvAniCenterAll']=_0x31d839[_0x27c115(0x3ed)]??!![];if(_0x21317c['_animation'][_0x27c115(0x4ef)]===0x1&&!_0x31d839[_0x27c115(0x3ed)])return![];_0x31d839[_0x27c115(0x720)]=_0x31d839[_0x27c115(0x720)]??![];if(_0x21317c[_0x27c115(0xa77)][_0x27c115(0x4ef)]===0x2&&!_0x31d839[_0x27c115(0x720)])return![];}else{if(_0x21317c['constructor']===Sprite_AnimationMV){if(_0x21317c[_0x27c115(0xa77)][_0x27c115(0x239)]===0x3)return![];}}return!![];const _0x3c6204=Window_BattleStatus['prototype']['battleLayoutStyle']();return['xp',_0x27c115(0x445)]['contains'](_0x3c6204);},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x91c)]=function(){const _0x4fbf8f=_0x58cf34;if(!SceneManager[_0x4fbf8f(0xb85)])return null;if(!SceneManager['_scene']['_statusWindow'])return null;if(!SceneManager[_0x4fbf8f(0xb85)][_0x4fbf8f(0x4f1)][_0x4fbf8f(0x6cb)])return null;return SceneManager[_0x4fbf8f(0xb85)][_0x4fbf8f(0x4f1)][_0x4fbf8f(0x6cb)];},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x681)]=function(_0x2de4de){const _0x5be927=_0x58cf34;this[_0x5be927(0x3c8)](_0x2de4de);for(const _0x117802 of _0x2de4de[_0x5be927(0x56b)]){_0x117802['endAnimation']&&_0x117802[_0x5be927(0x534)]();}_0x2de4de['destroy']();},Spriteset_Battle['prototype']['removeAnimationFromContainer']=function(_0x7c7f7f){const _0x23e8bb=_0x58cf34;this['isAnimationShownOnBattlePortrait'](_0x7c7f7f)?this[_0x23e8bb(0x91c)]()['removeChild'](_0x7c7f7f):this[_0x23e8bb(0x3e2)][_0x23e8bb(0x9e9)](_0x7c7f7f);this[_0x23e8bb(0x576)]&&this[_0x23e8bb(0x576)][_0x23e8bb(0x9e9)](_0x7c7f7f);this['_effectsContainer'][_0x23e8bb(0x9e9)](_0x7c7f7f),this[_0x23e8bb(0x3e2)][_0x23e8bb(0x9e9)](_0x7c7f7f),this[_0x23e8bb(0x609)][_0x23e8bb(0x61f)](_0x7c7f7f);if(this[_0x23e8bb(0xce0)])this['_fauxAnimationSprites'][_0x23e8bb(0x61f)](_0x7c7f7f);},VisuMZ[_0x58cf34(0xa6b)]['Spriteset_Battle_updateActors']=Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xaac)],Spriteset_Battle['prototype'][_0x58cf34(0xaac)]=function(){const _0x3ada9e=_0x58cf34;VisuMZ[_0x3ada9e(0xa6b)][_0x3ada9e(0x97a)][_0x3ada9e(0x9a4)](this),this[_0x3ada9e(0x84a)]();},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x84a)]=function(){const _0x5ce3bc=_0x58cf34;this['_battlerContainer']['children'][_0x5ce3bc(0xa67)](this[_0x5ce3bc(0x4c9)][_0x5ce3bc(0xaf2)](this)),this['putActiveBattlerOnTop']();if(!this[_0x5ce3bc(0xb0a)])return;this['_battlerContainer'][_0x5ce3bc(0xc46)]=this['targetBattlerContainerOpacity']();},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x4c9)]=function(_0x21c6d3,_0x425d94){const _0x5ccea3=_0x58cf34;if(VisuMZ[_0x5ccea3(0xa6b)]['Settings'][_0x5ccea3(0xb3d)]['PrioritySortActors']){if(_0x21c6d3[_0x5ccea3(0xc92)]&&_0x425d94[_0x5ccea3(0xc92)]){if(_0x21c6d3[_0x5ccea3(0xc92)][_0x5ccea3(0x40c)]()&&_0x425d94[_0x5ccea3(0xc92)][_0x5ccea3(0x2d8)]())return 0x1;else{if(_0x425d94['_battler'][_0x5ccea3(0x40c)]()&&_0x21c6d3[_0x5ccea3(0xc92)][_0x5ccea3(0x2d8)]())return-0x1;}}}return _0x21c6d3[_0x5ccea3(0xa73)]!==_0x425d94['_baseY']?_0x21c6d3[_0x5ccea3(0xa73)]-_0x425d94[_0x5ccea3(0xa73)]:_0x425d94['spriteId']-_0x21c6d3[_0x5ccea3(0x62b)];},Spriteset_Battle[_0x58cf34(0x8ef)]['putActiveBattlerOnTop']=function(){const _0x450a31=_0x58cf34;if(!VisuMZ[_0x450a31(0xa6b)][_0x450a31(0xb05)][_0x450a31(0xb3d)][_0x450a31(0x319)])return;const _0x40d974=BattleManager[_0x450a31(0x6f1)];if(_0x40d974){if(_0x40d974['isActor']()&&!$gameSystem[_0x450a31(0xc41)]())return;if(_0x40d974===BattleManager['actor']())return;const _0xcecfeb=_0x40d974[_0x450a31(0x399)]();if(_0xcecfeb&&_0x40d974[_0x450a31(0x40c)]())this[_0x450a31(0xb0a)]['addChild'](_0xcecfeb);}},Spriteset_Battle['prototype'][_0x58cf34(0x2a4)]=function(){const _0x118fbc=_0x58cf34;for(const _0xd1d8aa of $gameParty['aliveMembers']()){if(!_0xd1d8aa)continue;if(!_0xd1d8aa[_0x118fbc(0x399)]())continue;_0xd1d8aa[_0x118fbc(0x399)]()[_0x118fbc(0x712)]=!![],_0xd1d8aa[_0x118fbc(0x399)]()[_0x118fbc(0x483)]();}},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x570)]=function(){const _0x39e991=_0x58cf34;this[_0x39e991(0x8e7)]=new Sprite(),Spriteset_Battle[_0x39e991(0x28d)]?this['addChild'](this[_0x39e991(0x8e7)]):this[_0x39e991(0x7bf)]['addChild'](this['_uiContainer']),SceneManager[_0x39e991(0xb85)][_0x39e991(0x8e7)]=this[_0x39e991(0x8e7)];},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x372)]=function(){const _0x4448bb=_0x58cf34;if(VisuMZ[_0x4448bb(0xa6b)][_0x4448bb(0xb05)][_0x4448bb(0x48b)][_0x4448bb(0xb3c)])return;this[_0x4448bb(0x61c)]=new Sprite(),BattleManager[_0x4448bb(0x7c9)](this[_0x4448bb(0x61c)]);for(const _0x10bfc1 of this[_0x4448bb(0x50f)]){const _0x40a95e=new Sprite_EnemyName();this['_enemyNameContainer'][_0x4448bb(0x3ac)](_0x40a95e),_0x40a95e[_0x4448bb(0x260)](_0x10bfc1);}},Spriteset_Battle[_0x58cf34(0x8ef)]['updateUiContainerPosition']=function(){const _0x2bb40d=_0x58cf34;if(!this[_0x2bb40d(0x9e4)])return;if(!this[_0x2bb40d(0x8e7)])return;const _0x12d54d=Spriteset_Battle[_0x2bb40d(0x28d)]?this['_damageContainer']['x']:0x0,_0x3e46c0=Spriteset_Battle[_0x2bb40d(0x28d)]?this[_0x2bb40d(0x9e4)]['y']:0x0,_0x5035f3=Imported[_0x2bb40d(0x5d3)]?this[_0x2bb40d(0x7bf)]['x']:0x0,_0x16fa9d=Imported[_0x2bb40d(0x5d3)]?this['_battleField']['y']:0x0;this[_0x2bb40d(0x8e7)]['x']=_0x12d54d+_0x5035f3,this[_0x2bb40d(0x8e7)]['y']=_0x3e46c0+_0x16fa9d;},BattleManager[_0x58cf34(0x7c9)]=function(_0x5ee7ce){const _0xb7aadc=_0x58cf34;if(!SceneManager[_0xb7aadc(0xb85)][_0xb7aadc(0x8e7)])return;SceneManager[_0xb7aadc(0xb85)]['_uiContainer']['addChild'](_0x5ee7ce);},BattleManager['removeChildFromUiContainer']=function(_0x2cc11a){const _0x3b0ccf=_0x58cf34;if(!SceneManager[_0x3b0ccf(0xb85)]['_uiContainer'])return;SceneManager[_0x3b0ccf(0xb85)]['_uiContainer'][_0x3b0ccf(0x9e9)](_0x2cc11a);},Spriteset_Battle[_0x58cf34(0x8ef)]['targetBattlerContainerOpacity']=function(){return 0xff;},Spriteset_Battle['prototype'][_0x58cf34(0x68b)]=function(){return![];},Spriteset_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xa40)]=function(){const _0x20fa41=_0x58cf34;return this[_0x20fa41(0xc07)]()[_0x20fa41(0x6ec)](_0xf65ce7=>_0xf65ce7[_0x20fa41(0x79a)]());},Spriteset_Battle['prototype'][_0x58cf34(0x6ed)]=function(){const _0x5783d4=_0x58cf34;return this[_0x5783d4(0xc07)]()[_0x5783d4(0x6ec)](_0x20d34b=>_0x20d34b[_0x5783d4(0xc90)]());},Spriteset_Battle['prototype'][_0x58cf34(0x353)]=function(){const _0x2ec77b=_0x58cf34;return this[_0x2ec77b(0xc07)]()[_0x2ec77b(0x6ec)](_0x6a515c=>_0x6a515c[_0x2ec77b(0x8f5)]());},Spriteset_Battle[_0x58cf34(0x8ef)]['isAnyoneSkewing']=function(){const _0x333531=_0x58cf34;return this[_0x333531(0xc07)]()[_0x333531(0x6ec)](_0x29fe17=>_0x29fe17['isSkewing']());},Spriteset_Battle['prototype']['isAnyoneSpinning']=function(){const _0x5d8a60=_0x58cf34;return this[_0x5d8a60(0xc07)]()['some'](_0x25ecee=>_0x25ecee[_0x5d8a60(0x1ce)]());},Spriteset_Battle['prototype'][_0x58cf34(0xa4c)]=function(){const _0x26576a=_0x58cf34;return this[_0x26576a(0xc07)]()[_0x26576a(0x6ec)](_0x48efd4=>_0x48efd4['isChangingOpacity']());},VisuMZ['BattleCore']['Window_ItemList_maxCols']=Window_ItemList['prototype'][_0x58cf34(0x259)],Window_ItemList[_0x58cf34(0x8ef)][_0x58cf34(0x259)]=function(){const _0x1a340d=_0x58cf34;return SceneManager['isSceneBattle']()?SceneManager[_0x1a340d(0xb85)][_0x1a340d(0x9df)]()===_0x1a340d(0xa21)?VisuMZ[_0x1a340d(0xa6b)][_0x1a340d(0xb05)]['BattleLayout']['SkillItemBorderCols']:VisuMZ['BattleCore']['Settings']['BattleLayout']['SkillItemStandardCols']:VisuMZ[_0x1a340d(0xa6b)]['Window_ItemList_maxCols'][_0x1a340d(0x9a4)](this);},VisuMZ['BattleCore']['Window_SkillList_maxCols']=Window_SkillList[_0x58cf34(0x8ef)]['maxCols'],Window_SkillList['prototype'][_0x58cf34(0x259)]=function(){const _0x3884d6=_0x58cf34;return SceneManager[_0x3884d6(0x3d3)]()?SceneManager[_0x3884d6(0xb85)]['battleLayoutStyle']()===_0x3884d6(0xa21)?VisuMZ['BattleCore'][_0x3884d6(0xb05)][_0x3884d6(0x272)][_0x3884d6(0x8a5)]:VisuMZ['BattleCore'][_0x3884d6(0xb05)]['BattleLayout']['SkillItemStandardCols']:VisuMZ['BattleCore'][_0x3884d6(0x62d)][_0x3884d6(0x9a4)](this);},VisuMZ['BattleCore'][_0x58cf34(0x571)]=Window_Options[_0x58cf34(0x8ef)][_0x58cf34(0x80b)],Window_Options[_0x58cf34(0x8ef)][_0x58cf34(0x80b)]=function(){const _0x3ea9ea=_0x58cf34;VisuMZ[_0x3ea9ea(0xa6b)][_0x3ea9ea(0x571)][_0x3ea9ea(0x9a4)](this),this[_0x3ea9ea(0x94c)](),this[_0x3ea9ea(0x6e0)]();},Window_Options[_0x58cf34(0x8ef)][_0x58cf34(0x94c)]=function(){const _0x415958=_0x58cf34;VisuMZ[_0x415958(0xa6b)][_0x415958(0xb05)][_0x415958(0x96a)][_0x415958(0xacb)]&&(this['addBattleCoreAutoBattleStartupCommand'](),this[_0x415958(0x5a5)]());},Window_Options[_0x58cf34(0x8ef)][_0x58cf34(0x6e0)]=function(){const _0x2dba2c=_0x58cf34;if(!VisuMZ[_0x2dba2c(0xa6b)]['Settings'][_0x2dba2c(0x26d)][_0x2dba2c(0x93c)])return;const _0x3d9ddf=TextManager[_0x2dba2c(0x818)],_0x1b5c90=_0x2dba2c(0x818);this[_0x2dba2c(0x9c2)](_0x3d9ddf,_0x1b5c90);},Window_Options[_0x58cf34(0x8ef)][_0x58cf34(0xc55)]=function(){const _0x53ef93=_0x58cf34,_0x3fe0b5=TextManager['autoBattleStart'],_0x286b3f=_0x53ef93(0x996);this[_0x53ef93(0x9c2)](_0x3fe0b5,_0x286b3f);},Window_Options[_0x58cf34(0x8ef)][_0x58cf34(0x5a5)]=function(){const _0x38db52=_0x58cf34,_0x51400f=TextManager['autoBattleStyle'],_0x621fa6=_0x38db52(0x471);this[_0x38db52(0x9c2)](_0x51400f,_0x621fa6);},VisuMZ[_0x58cf34(0xa6b)]['Window_Options_statusText']=Window_Options[_0x58cf34(0x8ef)][_0x58cf34(0x404)],Window_Options[_0x58cf34(0x8ef)][_0x58cf34(0x404)]=function(_0x2575fd){const _0x2fdd22=_0x58cf34,_0x1039a1=this[_0x2fdd22(0x6e5)](_0x2575fd);return _0x1039a1==='autoBattleUseSkills'?this[_0x2fdd22(0x640)]():VisuMZ[_0x2fdd22(0xa6b)][_0x2fdd22(0xb8e)][_0x2fdd22(0x9a4)](this,_0x2575fd);},Window_Options['prototype'][_0x58cf34(0x640)]=function(){const _0x458f50=_0x58cf34,_0x56337b=VisuMZ[_0x458f50(0xa6b)][_0x458f50(0xb05)]['AutoBattle'],_0x284855=this[_0x458f50(0xc96)](_0x458f50(0x471));return _0x284855?_0x56337b[_0x458f50(0x9a6)]:_0x56337b[_0x458f50(0x6bf)];},Window_ShopStatus[_0x58cf34(0x8ef)][_0x58cf34(0xa5c)]=function(){const _0x5788eb=_0x58cf34,_0x403fd5=DataManager[_0x5788eb(0x813)](this[_0x5788eb(0x586)]),_0x114bbb=VisuMZ[_0x5788eb(0x764)][_0x403fd5];if(!_0x114bbb)return this[_0x5788eb(0xa07)]();const _0x16bfc7=_0x5788eb(0x5c1)[_0x5788eb(0x1d3)](this[_0x5788eb(0x586)][_0x5788eb(0xacd)][_0x5788eb(0x83c)]),_0x54dc93=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x5788eb(0x586)][_0x5788eb(0xacd)][_0x5788eb(0x83c)]];return _0x114bbb[_0x16bfc7][_0x5788eb(0x1d3)](_0x54dc93);},Window_ShopStatus[_0x58cf34(0x8ef)][_0x58cf34(0xcb8)]=function(){const _0x5df38b=_0x58cf34,_0x5ec10=DataManager[_0x5df38b(0x813)](this['_item']),_0x3bff8f=VisuMZ['DamageStyles'][_0x5ec10];if(!_0x3bff8f)return this['getItemDamageAmountTextOriginal']();return _0x3bff8f[_0x5df38b(0x5cd)][_0x5df38b(0x9a4)](this);},VisuMZ['BattleCore'][_0x58cf34(0xbf8)]=Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)],Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)]=function(_0x32ffe1){const _0x397793=_0x58cf34;VisuMZ[_0x397793(0xa6b)]['Window_PartyCommand_initialize'][_0x397793(0x9a4)](this,_0x32ffe1),this[_0x397793(0x994)](_0x32ffe1);},Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0x994)]=function(_0x23bb41){const _0x51a922=_0x58cf34,_0x36398e=new Rectangle(0x0,0x0,_0x23bb41[_0x51a922(0xc78)],_0x23bb41['height']);this[_0x51a922(0xba1)]=new Window_Base(_0x36398e),this['_commandNameWindow']['opacity']=0x0,this[_0x51a922(0x3ac)](this[_0x51a922(0xba1)]),this['updateCommandNameWindow']();},Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0x2a7)]=function(){const _0x38f2b5=_0x58cf34;Window_Command['prototype'][_0x38f2b5(0x2a7)][_0x38f2b5(0x9a4)](this);if(this[_0x38f2b5(0xba1)])this[_0x38f2b5(0x271)]();},Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0x271)]=function(){const _0x39b4ca=_0x58cf34,_0x403ac4=this[_0x39b4ca(0xba1)];_0x403ac4[_0x39b4ca(0x852)][_0x39b4ca(0xcdf)]();const _0x59031e=this[_0x39b4ca(0xb6e)](this['index']());if(_0x59031e===_0x39b4ca(0x70d)&&this[_0x39b4ca(0x811)]()>0x0){const _0x100a85=this[_0x39b4ca(0x83d)](this['index']());let _0x2bd0b9=this[_0x39b4ca(0x752)](this[_0x39b4ca(0x94f)]());_0x2bd0b9=_0x2bd0b9[_0x39b4ca(0x6e4)](/\\I\[(\d+)\]/gi,''),_0x403ac4[_0x39b4ca(0x9d7)](),this[_0x39b4ca(0x9d3)](_0x2bd0b9,_0x100a85),this[_0x39b4ca(0xb66)](_0x2bd0b9,_0x100a85),this[_0x39b4ca(0x431)](_0x2bd0b9,_0x100a85);}},Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0x9d3)]=function(_0x2cf775,_0x225d57){},Window_PartyCommand['prototype']['commandNameWindowDrawText']=function(_0x4b3b38,_0x2956d5){const _0x14535c=_0x58cf34,_0x401708=this['_commandNameWindow'];_0x401708['drawText'](_0x4b3b38,0x0,_0x2956d5['y'],_0x401708[_0x14535c(0x6c7)],_0x14535c(0x318));},Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0x431)]=function(_0x3832ec,_0xeeb9a0){const _0x18f7a9=_0x58cf34,_0x5924a=this[_0x18f7a9(0xba1)],_0x2a9e6e=$gameSystem[_0x18f7a9(0x3fc)](),_0x23cdaf=_0xeeb9a0['x']+Math[_0x18f7a9(0x951)](_0xeeb9a0[_0x18f7a9(0xc78)]/0x2)+_0x2a9e6e;_0x5924a['x']=_0x5924a[_0x18f7a9(0xc78)]/-0x2+_0x23cdaf,_0x5924a['y']=Math['floor'](_0xeeb9a0['height']/0x2);},Window_PartyCommand[_0x58cf34(0x8ef)]['makeCommandList']=function(){const _0x923f49=_0x58cf34;this[_0x923f49(0x2b0)](),this[_0x923f49(0xc97)](),this[_0x923f49(0x24d)](),this[_0x923f49(0x9a7)](),this['addOptionsCommand'](),this[_0x923f49(0x87b)]();},Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0x2b0)]=function(){const _0x51ccb0=_0x58cf34,_0x4bc944=this['commandStyle'](),_0x28d68a=VisuMZ[_0x51ccb0(0xa6b)][_0x51ccb0(0xb05)][_0x51ccb0(0x25c)]['CmdIconFight'],_0x111c29=_0x4bc944==='text'?TextManager[_0x51ccb0(0xc72)]:_0x51ccb0(0x5c9)[_0x51ccb0(0x1d3)](_0x28d68a,TextManager[_0x51ccb0(0xc72)]),_0x471954=this[_0x51ccb0(0x9b9)]();this['addCommand'](_0x111c29,_0x51ccb0(0xc72),_0x471954);},Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0x9b9)]=function(){return!![];},Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0xc97)]=function(){const _0x4b7892=_0x58cf34;if(!this[_0x4b7892(0x72d)]())return;const _0x3f6e9a=this[_0x4b7892(0x9e5)](),_0x41e9ea=VisuMZ['BattleCore'][_0x4b7892(0xb05)][_0x4b7892(0x25c)][_0x4b7892(0x82f)],_0x33284d=_0x3f6e9a===_0x4b7892(0x964)?TextManager[_0x4b7892(0x8f0)]:_0x4b7892(0x5c9)[_0x4b7892(0x1d3)](_0x41e9ea,TextManager['autoBattle']),_0x4183f8=this['isAutoBattleCommandEnabled']();this['addCommand'](_0x33284d,_0x4b7892(0x8f0),_0x4183f8);},Window_PartyCommand[_0x58cf34(0x8ef)]['isAutoBattleCommandAdded']=function(){const _0xd80416=_0x58cf34;return VisuMZ[_0xd80416(0xa6b)]['Settings'][_0xd80416(0x25c)][_0xd80416(0x34b)];},Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0x1ee)]=function(){return!![];},Window_PartyCommand['prototype'][_0x58cf34(0x24d)]=function(){},Window_PartyCommand[_0x58cf34(0x8ef)]['addStatusCommand']=function(){const _0xc45132=_0x58cf34,_0x13b7de=VisuMZ[_0xc45132(0xa6b)][_0xc45132(0xb05)][_0xc45132(0x25c)][_0xc45132(0x71d)]??!![];if(!_0x13b7de)return;const _0x3dd475=this[_0xc45132(0x9e5)](),_0x30a100=VisuMZ[_0xc45132(0xa6b)]['Settings'][_0xc45132(0x691)][_0xc45132(0xb92)]??0x57,_0x764697=_0x3dd475===_0xc45132(0x964)?TextManager[_0xc45132(0xa5a)]:_0xc45132(0x5c9)['format'](_0x30a100,TextManager[_0xc45132(0xa5a)]),_0x4c7984=!![];this[_0xc45132(0x9c2)](_0x764697,'status',_0x4c7984);},Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0x8e9)]=function(){const _0x592153=_0x58cf34;if(!this[_0x592153(0xa14)]())return;const _0xc11a=this[_0x592153(0x9e5)](),_0x463d68=VisuMZ[_0x592153(0xa6b)][_0x592153(0xb05)][_0x592153(0x25c)][_0x592153(0x82b)],_0x5dfeb5=_0xc11a===_0x592153(0x964)?TextManager['options']:'\x5cI[%1]%2'[_0x592153(0x1d3)](_0x463d68,TextManager[_0x592153(0x292)]),_0x451f87=this[_0x592153(0x767)]();this['addCommand'](_0x5dfeb5,_0x592153(0x292),_0x451f87);},Window_PartyCommand[_0x58cf34(0x8ef)]['isOptionsCommandAdded']=function(){const _0x30a584=_0x58cf34;return VisuMZ['BattleCore'][_0x30a584(0xb05)]['PartyCmd']['CommandAddOptions'];},Window_PartyCommand[_0x58cf34(0x8ef)]['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0x87b)]=function(){const _0x3736e5=_0x58cf34,_0x3d5753=this[_0x3736e5(0x9e5)](),_0x357048=VisuMZ[_0x3736e5(0xa6b)][_0x3736e5(0xb05)]['PartyCmd'][_0x3736e5(0x3bb)],_0xe1a18a=_0x3d5753===_0x3736e5(0x964)?TextManager[_0x3736e5(0x6f3)]:_0x3736e5(0x5c9)['format'](_0x357048,TextManager['escape']),_0x5ab667=this['isEscapeCommandEnabled']();this['addCommand'](_0xe1a18a,'escape',_0x5ab667);},Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0x8b9)]=function(){const _0x1ea748=_0x58cf34;return BattleManager[_0x1ea748(0x9ff)]();},Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0xb84)]=function(){const _0x54da40=_0x58cf34;return VisuMZ[_0x54da40(0xa6b)][_0x54da40(0xb05)]['PartyCmd'][_0x54da40(0x6c4)];},Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0x286)]=function(_0x240662){const _0x3ec274=_0x58cf34,_0xdf1cdf=this['commandStyleCheck'](_0x240662);if(_0xdf1cdf==='iconText')this[_0x3ec274(0x901)](_0x240662);else _0xdf1cdf===_0x3ec274(0x70d)?this[_0x3ec274(0xb3a)](_0x240662):Window_Command[_0x3ec274(0x8ef)][_0x3ec274(0x286)][_0x3ec274(0x9a4)](this,_0x240662);},Window_PartyCommand[_0x58cf34(0x8ef)]['commandStyle']=function(){const _0x289449=_0x58cf34;return VisuMZ[_0x289449(0xa6b)][_0x289449(0xb05)][_0x289449(0x25c)]['CmdStyle'];},Window_PartyCommand['prototype'][_0x58cf34(0xb6e)]=function(_0x567816){const _0xaba476=_0x58cf34;if(_0x567816<0x0)return _0xaba476(0x964);const _0x5d06bf=this[_0xaba476(0x9e5)]();if(_0x5d06bf!==_0xaba476(0x4cc))return _0x5d06bf;else{if(this[_0xaba476(0x811)]()>0x0){const _0x348535=this[_0xaba476(0x752)](_0x567816);if(_0x348535[_0xaba476(0xcbb)](/\\I\[(\d+)\]/i)){const _0x558a07=this['itemLineRect'](_0x567816),_0x58454d=this[_0xaba476(0xc2a)](_0x348535)[_0xaba476(0xc78)];return _0x58454d<=_0x558a07['width']?_0xaba476(0xb7e):_0xaba476(0x70d);}}}return _0xaba476(0x964);},Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0x901)]=function(_0x6ed8b0){const _0x553909=_0x58cf34,_0xae70d0=this[_0x553909(0x83d)](_0x6ed8b0),_0x104d0c=this[_0x553909(0x752)](_0x6ed8b0),_0x391472=this[_0x553909(0xc2a)](_0x104d0c)[_0x553909(0xc78)];this[_0x553909(0x79d)](this['isCommandEnabled'](_0x6ed8b0));const _0x546c40=this[_0x553909(0xb84)]();if(_0x546c40===_0x553909(0x25b))this[_0x553909(0x6cd)](_0x104d0c,_0xae70d0['x']+_0xae70d0[_0x553909(0xc78)]-_0x391472,_0xae70d0['y'],_0x391472);else{if(_0x546c40==='center'){const _0x404ed7=_0xae70d0['x']+Math[_0x553909(0x951)]((_0xae70d0['width']-_0x391472)/0x2);this['drawTextEx'](_0x104d0c,_0x404ed7,_0xae70d0['y'],_0x391472);}else this[_0x553909(0x6cd)](_0x104d0c,_0xae70d0['x'],_0xae70d0['y'],_0x391472);}},Window_PartyCommand['prototype'][_0x58cf34(0xb3a)]=function(_0x6cbf27){const _0x133f61=_0x58cf34;this[_0x133f61(0x752)](_0x6cbf27)[_0x133f61(0xcbb)](/\\I\[(\d+)\]/i);const _0x59ab4a=Number(RegExp['$1'])||0x0,_0x276765=this['itemLineRect'](_0x6cbf27),_0x4ea9b1=_0x276765['x']+Math[_0x133f61(0x951)]((_0x276765[_0x133f61(0xc78)]-ImageManager[_0x133f61(0x659)])/0x2),_0x240a7b=_0x276765['y']+(_0x276765[_0x133f61(0x725)]-ImageManager[_0x133f61(0x84b)])/0x2;this['drawIcon'](_0x59ab4a,_0x4ea9b1,_0x240a7b);},Window_PartyCommand[_0x58cf34(0x8ef)][_0x58cf34(0x48f)]=function(){},Window_PartyCommand[_0x58cf34(0x8ef)]['activate']=function(){const _0xd553b9=_0x58cf34;Window_Command[_0xd553b9(0x8ef)][_0xd553b9(0x279)]['call'](this);const _0x5856ec=this['battleLayoutStyle']();_0x5856ec==='border'&&this[_0xd553b9(0x436)]();},Window_PartyCommand[_0x58cf34(0x8ef)]['battleLayoutStyle']=function(){const _0xd1f514=_0x58cf34;if(this[_0xd1f514(0x608)])return this['_battleLayoutStyle'];return this[_0xd1f514(0x608)]=SceneManager[_0xd1f514(0xb85)][_0xd1f514(0x9df)](),this['_battleLayoutStyle'];},Window_PartyCommand[_0x58cf34(0x8ef)]['updateHelp']=function(){const _0x5ba4a0=_0x58cf34,_0x44512f=VisuMZ[_0x5ba4a0(0xa6b)][_0x5ba4a0(0xb05)]['PartyCmd'],_0x3a5e69=this[_0x5ba4a0(0xaec)]();switch(_0x3a5e69){case _0x5ba4a0(0xc72):this[_0x5ba4a0(0xa32)]['setText'](_0x44512f['HelpFight']);break;case _0x5ba4a0(0x8f0):this[_0x5ba4a0(0xa32)][_0x5ba4a0(0xa55)](_0x44512f[_0x5ba4a0(0xbcb)]);break;case'options':this['_helpWindow'][_0x5ba4a0(0xa55)](_0x44512f[_0x5ba4a0(0x7a9)]);break;case _0x5ba4a0(0x6f3):this[_0x5ba4a0(0xa32)][_0x5ba4a0(0xa55)](_0x44512f[_0x5ba4a0(0x6d7)]);break;case'status':this[_0x5ba4a0(0xa32)][_0x5ba4a0(0xa55)](Window_InBattleStatus['SETTINGS']['statusHelpDesc']);break;default:this[_0x5ba4a0(0xa32)][_0x5ba4a0(0xa55)]('');break;}},VisuMZ['BattleCore'][_0x58cf34(0xac2)]=Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)],Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)]=function(_0x2a8815){const _0x37909e=_0x58cf34;VisuMZ['BattleCore'][_0x37909e(0xac2)][_0x37909e(0x9a4)](this,_0x2a8815),this['createCommandNameWindow'](_0x2a8815);},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0x994)]=function(_0x59476b){const _0x11a5f4=_0x58cf34,_0x463add=new Rectangle(0x0,0x0,_0x59476b[_0x11a5f4(0xc78)],_0x59476b[_0x11a5f4(0x725)]);this[_0x11a5f4(0xba1)]=new Window_Base(_0x463add),this[_0x11a5f4(0xba1)][_0x11a5f4(0xc46)]=0x0,this[_0x11a5f4(0x3ac)](this['_commandNameWindow']),this[_0x11a5f4(0x271)]();},Window_ActorCommand['prototype'][_0x58cf34(0x2a7)]=function(){const _0x2c356b=_0x58cf34;Window_Command[_0x2c356b(0x8ef)]['callUpdateHelp'][_0x2c356b(0x9a4)](this);if(this[_0x2c356b(0xba1)])this['updateCommandNameWindow']();},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0x271)]=function(){const _0x219ae0=_0x58cf34,_0x5b6dd4=this[_0x219ae0(0xba1)];_0x5b6dd4[_0x219ae0(0x852)][_0x219ae0(0xcdf)]();const _0x4ed3d7=this[_0x219ae0(0xb6e)](this[_0x219ae0(0x94f)]());if(_0x4ed3d7==='icon'&&this['maxItems']()>0x0){const _0x20a1b8=this[_0x219ae0(0x83d)](this['index']());let _0x2e405f=this['commandName'](this[_0x219ae0(0x94f)]());_0x2e405f=_0x2e405f['replace'](/\\I\[(\d+)\]/gi,''),_0x5b6dd4['resetFontSettings'](),this['commandNameWindowDrawBackground'](_0x2e405f,_0x20a1b8),this[_0x219ae0(0xb66)](_0x2e405f,_0x20a1b8),this[_0x219ae0(0x431)](_0x2e405f,_0x20a1b8);}},Window_ActorCommand[_0x58cf34(0x8ef)]['commandNameWindowDrawBackground']=function(_0x49fbd6,_0x1f58bc){},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0xb66)]=function(_0x3318a1,_0x9f8792){const _0x58afdc=_0x58cf34,_0x273e6d=this[_0x58afdc(0xba1)];_0x273e6d[_0x58afdc(0x8fb)](_0x3318a1,0x0,_0x9f8792['y'],_0x273e6d['innerWidth'],_0x58afdc(0x318));},Window_ActorCommand['prototype'][_0x58cf34(0x431)]=function(_0x36ace8,_0x43e979){const _0x5cf243=_0x58cf34,_0x490724=this[_0x5cf243(0xba1)],_0x20e955=$gameSystem['windowPadding'](),_0x5a00a5=_0x43e979['x']+Math[_0x5cf243(0x951)](_0x43e979[_0x5cf243(0xc78)]/0x2)+_0x20e955;_0x490724['x']=_0x490724[_0x5cf243(0xc78)]/-0x2+_0x5a00a5,_0x490724['y']=Math['floor'](_0x43e979[_0x5cf243(0x725)]/0x2);},Window_ActorCommand[_0x58cf34(0x8ef)]['makeCommandList']=function(){const _0x3557ce=_0x58cf34;if(!this[_0x3557ce(0xcc7)])return;const _0x4d78db=this[_0x3557ce(0xcc7)][_0x3557ce(0x39f)]();for(const _0x4e0c29 of _0x4d78db){this[_0x3557ce(0x338)](_0x4e0c29['toUpperCase']()[_0x3557ce(0x989)]());}},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0x338)]=function(_0x38e291){const _0x36800c=_0x58cf34;_0x38e291===_0x36800c(0x83f)&&this[_0x36800c(0xae6)]();[_0x36800c(0x3ba),'SKILLS'][_0x36800c(0x375)](_0x38e291)&&this[_0x36800c(0xa97)]();_0x38e291===_0x36800c(0xcd8)&&this['addGuardCommand']();_0x38e291==='ITEM'&&this[_0x36800c(0x9f1)]();_0x38e291==='STATUS'&&this[_0x36800c(0x9a7)]();_0x38e291==='ESCAPE'&&this[_0x36800c(0x87b)]();_0x38e291==='AUTO\x20BATTLE'&&this[_0x36800c(0xc97)]();if(_0x38e291[_0x36800c(0xcbb)](/STYPE: (\d+)/i)){const _0x4e5c23=Number(RegExp['$1']);this[_0x36800c(0x31e)](_0x4e5c23);}else{if(_0x38e291[_0x36800c(0xcbb)](/STYPE: (.*)/i)){const _0x3de86a=DataManager[_0x36800c(0x915)](RegExp['$1']);this[_0x36800c(0x31e)](_0x3de86a);}}_0x38e291===_0x36800c(0x968)&&this[_0x36800c(0x34c)]();if(_0x38e291[_0x36800c(0xcbb)](/SKILL: (\d+)/i)){const _0x5129d3=Number(RegExp['$1']);this[_0x36800c(0xb03)]($dataSkills[_0x5129d3]);}else{if(_0x38e291[_0x36800c(0xcbb)](/SKILL: (.*)/i)){const _0x1d84f7=DataManager[_0x36800c(0x4db)](RegExp['$1']);this[_0x36800c(0xb03)]($dataSkills[_0x1d84f7]);}}_0x38e291===_0x36800c(0x51c)&&Imported[_0x36800c(0xb45)]&&this[_0x36800c(0x9c3)](),[_0x36800c(0x3bc),'COMBAT\x20LOG'][_0x36800c(0x375)](_0x38e291)&&Imported['VisuMZ_4_CombatLog']&&this[_0x36800c(0x9c1)](),_0x38e291===_0x36800c(0x5d6)&&Imported[_0x36800c(0x8c0)]&&this['addWeaponSwapCommand'](!![]),_0x38e291==='GRID\x20MOVE'&&Imported[_0x36800c(0x33b)]&&this[_0x36800c(0xbbf)]();},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0xae6)]=function(){const _0x48dc09=_0x58cf34,_0x1255c5=$dataSkills[this[_0x48dc09(0xcc7)]['attackSkillId']()];if(!_0x1255c5)return;if(!this[_0x48dc09(0x769)](_0x1255c5))return;const _0x4eb2c4=this[_0x48dc09(0x9e5)](),_0x112522=DataManager[_0x48dc09(0x7f3)](_0x1255c5),_0x2a1ed6=DataManager[_0x48dc09(0xbe5)](_0x1255c5),_0x55e58b=_0x4eb2c4===_0x48dc09(0x964)?_0x112522:'\x5cI[%1]%2'[_0x48dc09(0x1d3)](_0x2a1ed6,_0x112522);this[_0x48dc09(0x9c2)](_0x55e58b,_0x48dc09(0x873),this[_0x48dc09(0xcc7)]['canAttack']());},Window_ActorCommand['prototype'][_0x58cf34(0x3dc)]=function(){const _0x1dbe8a=_0x58cf34,_0x2e90fc=$dataSkills[this[_0x1dbe8a(0xcc7)][_0x1dbe8a(0x74c)]()];if(!_0x2e90fc)return;if(!this[_0x1dbe8a(0x769)](_0x2e90fc))return;const _0x167035=this[_0x1dbe8a(0x9e5)](),_0x1a8e61=DataManager[_0x1dbe8a(0x7f3)](_0x2e90fc),_0x121275=DataManager[_0x1dbe8a(0xbe5)](_0x2e90fc),_0x31c33e=_0x167035===_0x1dbe8a(0x964)?_0x1a8e61:_0x1dbe8a(0x5c9)['format'](_0x121275,_0x1a8e61);this['addCommand'](_0x31c33e,_0x1dbe8a(0xacf),this['_actor']['canGuard']());},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0x9f1)]=function(){const _0x174cfb=_0x58cf34,_0x2b6bb5=this[_0x174cfb(0x9e5)](),_0x4618a0=VisuMZ[_0x174cfb(0xa6b)]['Settings'][_0x174cfb(0x226)][_0x174cfb(0x3e0)],_0x3d6678=_0x2b6bb5===_0x174cfb(0x964)?TextManager[_0x174cfb(0xb8a)]:_0x174cfb(0x5c9)[_0x174cfb(0x1d3)](_0x4618a0,TextManager[_0x174cfb(0xb8a)]),_0x31a851=this[_0x174cfb(0x598)]();this[_0x174cfb(0x9c2)](_0x3d6678,_0x174cfb(0xb8a),_0x31a851);},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0x598)]=function(){const _0x47f9e7=_0x58cf34;return this[_0x47f9e7(0xcc7)]&&this[_0x47f9e7(0xcc7)]['canUseItemCommand']();},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0xa97)]=function(){const _0x209617=_0x58cf34,_0x23668e=this['_actor'][_0x209617(0xb60)]();for(const _0x37ac1a of _0x23668e){this[_0x209617(0x31e)](_0x37ac1a);}},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0x31e)]=function(_0x227466){const _0x49bf45=_0x58cf34;let _0x4e9643=$dataSystem[_0x49bf45(0xb60)][_0x227466];if(!_0x4e9643)return;let _0x1d12f4=_0x4e9643;const _0x4a67c7=this[_0x49bf45(0x9e5)]();if(_0x4a67c7===_0x49bf45(0x964))_0x1d12f4=_0x1d12f4[_0x49bf45(0x6e4)](/\x1I\[(\d+)\]/gi,''),_0x1d12f4=_0x1d12f4[_0x49bf45(0x6e4)](/\\I\[(\d+)\]/gi,'');else{if(!_0x4e9643['match'](/\\I\[(\d+)\]/i)){const _0x42adf3=Imported[_0x49bf45(0x62f)]?VisuMZ[_0x49bf45(0x335)][_0x49bf45(0xb05)][_0x49bf45(0x309)]:VisuMZ[_0x49bf45(0xa6b)][_0x49bf45(0xb05)][_0x49bf45(0x226)],_0xfe679f=$dataSystem[_0x49bf45(0x28f)]['includes'](_0x227466),_0x48f38b=_0xfe679f?_0x42adf3[_0x49bf45(0x3ec)]:_0x42adf3[_0x49bf45(0xc5e)];_0x1d12f4=_0x49bf45(0x5c9)[_0x49bf45(0x1d3)](_0x48f38b,_0x4e9643);}}this[_0x49bf45(0x9c2)](_0x1d12f4,'skill',!![],_0x227466);},Window_ActorCommand[_0x58cf34(0x8ef)]['addSingleSkillCommands']=function(){const _0x4b70bd=_0x58cf34,_0x269696=this[_0x4b70bd(0xcc7)]['skillTypes'](),_0x5d3d84=this[_0x4b70bd(0xcc7)]['skills']();for(const _0x4cacb8 of _0x5d3d84){if(!_0x4cacb8)continue;if(Imported[_0x4b70bd(0x62f)]){if(this[_0x4b70bd(0x22e)](_0x4cacb8))continue;if(this['isHiddenSkill'](_0x4cacb8))continue;}else{if(!_0x269696[_0x4b70bd(0x375)](_0x4cacb8[_0x4b70bd(0x891)]))continue;}this[_0x4b70bd(0xb03)](_0x4cacb8);}},Window_ActorCommand['prototype'][_0x58cf34(0x22e)]=function(_0x2aecb0){const _0x567cd5=_0x58cf34,_0x190bd9=this[_0x567cd5(0xcc7)][_0x567cd5(0xb60)](),_0x4e26dd=_0x190bd9['filter'](_0x52eeee=>DataManager[_0x567cd5(0xaf4)](_0x2aecb0)[_0x567cd5(0x375)](_0x52eeee));return _0x4e26dd[_0x567cd5(0x3eb)]<=0x0;},Window_ActorCommand['prototype']['isHiddenSkill']=function(_0x3fa589){const _0xbb644b=_0x58cf34;if(Imported[_0xbb644b(0x62f)]){if(VisuMZ[_0xbb644b(0x335)][_0xbb644b(0x7d2)]>=1.24){if(this[_0xbb644b(0xcc7)]){if(!VisuMZ[_0xbb644b(0x335)][_0xbb644b(0xb67)](this['_actor'],_0x3fa589))return!![];if(!VisuMZ[_0xbb644b(0x335)]['CheckVisibleSwitchNotetags'](this['_actor'],_0x3fa589))return!![];if(!VisuMZ[_0xbb644b(0x335)][_0xbb644b(0xab7)](this[_0xbb644b(0xcc7)],_0x3fa589))return!![];}}else{if(!Window_SkillList[_0xbb644b(0x8ef)][_0xbb644b(0x9a2)][_0xbb644b(0x9a4)](this,_0x3fa589))return!![];if(!Window_SkillList[_0xbb644b(0x8ef)]['checkShowHideSwitchNotetags'][_0xbb644b(0x9a4)](this,_0x3fa589))return!![];if(!Window_SkillList[_0xbb644b(0x8ef)][_0xbb644b(0xaee)]['call'](this,_0x3fa589))return!![];}}return![];},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0xb03)]=function(_0x4409e5){const _0x34be1b=_0x58cf34;if(!_0x4409e5)return;if(!this[_0x34be1b(0x769)](_0x4409e5))return;const _0x711fcf=this[_0x34be1b(0x9e5)](),_0x62c9c0=DataManager[_0x34be1b(0x7f3)](_0x4409e5),_0x417c0c=DataManager[_0x34be1b(0xbe5)](_0x4409e5),_0x1a8d4a=_0x711fcf===_0x34be1b(0x964)?_0x62c9c0:_0x34be1b(0x5c9)[_0x34be1b(0x1d3)](_0x417c0c,_0x62c9c0),_0x3e9190=this['_actor'][_0x34be1b(0x219)](_0x4409e5);this[_0x34be1b(0x9c2)](_0x1a8d4a,'singleSkill',_0x3e9190,_0x4409e5['id']);},Window_ActorCommand['prototype'][_0x58cf34(0x769)]=function(_0x4ffef7){const _0x49cdf2=_0x58cf34,_0x547bad=_0x4ffef7['note'];if(_0x547bad['match'](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x49cdf2(0xcc7)][_0x49cdf2(0x905)](_0x4ffef7['id']))return![];}if(_0x547bad[_0x49cdf2(0xcbb)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x49cdf2(0xcc7)]['hasSkill'](_0x4ffef7['id']))return![];}const _0x5a80fd=VisuMZ[_0x49cdf2(0xa6b)]['createKeyJS'](_0x4ffef7,_0x49cdf2(0x928));if(VisuMZ[_0x49cdf2(0xa6b)]['JS'][_0x5a80fd]){if(!VisuMZ['BattleCore']['JS'][_0x5a80fd][_0x49cdf2(0x9a4)](this,this[_0x49cdf2(0xcc7)],_0x4ffef7))return![];}return VisuMZ[_0x49cdf2(0xa6b)][_0x49cdf2(0xa96)](_0x4ffef7);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xa96)]=function(_0x1a79bb){const _0x238f47=_0x58cf34,_0x19a359=_0x1a79bb[_0x238f47(0x841)];if(_0x19a359['match'](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x40c404=JSON[_0x238f47(0xaab)]('['+RegExp['$1'][_0x238f47(0xcbb)](/\d+/g)+']');for(const _0x386804 of _0x40c404){if(!$gameSwitches[_0x238f47(0x772)](_0x386804))return![];}return!![];}if(_0x19a359['match'](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1e65b9=JSON[_0x238f47(0xaab)]('['+RegExp['$1'][_0x238f47(0xcbb)](/\d+/g)+']');for(const _0xd50d0a of _0x1e65b9){if(!$gameSwitches[_0x238f47(0x772)](_0xd50d0a))return![];}return!![];}if(_0x19a359[_0x238f47(0xcbb)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3fc41e=JSON[_0x238f47(0xaab)]('['+RegExp['$1'][_0x238f47(0xcbb)](/\d+/g)+']');for(const _0x5a42b2 of _0x3fc41e){if($gameSwitches['value'](_0x5a42b2))return!![];}return![];}if(_0x19a359[_0x238f47(0xcbb)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x476d99=JSON['parse']('['+RegExp['$1'][_0x238f47(0xcbb)](/\d+/g)+']');for(const _0x37985e of _0x476d99){if(!$gameSwitches['value'](_0x37985e))return!![];}return![];}if(_0x19a359['match'](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x5b5039=JSON[_0x238f47(0xaab)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x132ad8 of _0x5b5039){if(!$gameSwitches[_0x238f47(0x772)](_0x132ad8))return!![];}return![];}if(_0x19a359['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x30ae65=JSON[_0x238f47(0xaab)]('['+RegExp['$1'][_0x238f47(0xcbb)](/\d+/g)+']');for(const _0x533927 of _0x30ae65){if($gameSwitches[_0x238f47(0x772)](_0x533927))return![];}return!![];}return!![];},Window_ActorCommand[_0x58cf34(0x8ef)]['addStatusCommand']=function(){const _0x365dfd=_0x58cf34,_0xc1df22=this[_0x365dfd(0x9e5)](),_0x4c2933=VisuMZ[_0x365dfd(0xa6b)][_0x365dfd(0xb05)][_0x365dfd(0x691)][_0x365dfd(0xb92)]??0x57,_0x46293f=_0xc1df22===_0x365dfd(0x964)?TextManager[_0x365dfd(0xa5a)]:_0x365dfd(0x5c9)[_0x365dfd(0x1d3)](_0x4c2933,TextManager[_0x365dfd(0xa5a)]),_0x3a8697=!![];this[_0x365dfd(0x9c2)](_0x46293f,_0x365dfd(0xa5a),_0x3a8697);},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0x87b)]=function(){const _0x3cad07=_0x58cf34,_0x22923d=this[_0x3cad07(0x9e5)](),_0x567cbf=VisuMZ[_0x3cad07(0xa6b)][_0x3cad07(0xb05)][_0x3cad07(0x25c)][_0x3cad07(0x3bb)],_0x1713be=_0x22923d==='text'?TextManager[_0x3cad07(0x6f3)]:_0x3cad07(0x5c9)[_0x3cad07(0x1d3)](_0x567cbf,TextManager['escape']),_0x33bbeb=this[_0x3cad07(0x8b9)]();this['addCommand'](_0x1713be,'escape',_0x33bbeb);},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0x8b9)]=function(){const _0x7db745=_0x58cf34;return BattleManager[_0x7db745(0x9ff)]();},Window_ActorCommand['prototype'][_0x58cf34(0xc97)]=function(){const _0x6d9b26=_0x58cf34,_0xd22336=this[_0x6d9b26(0x9e5)](),_0x3b48bd=VisuMZ['BattleCore']['Settings'][_0x6d9b26(0x25c)][_0x6d9b26(0x82f)],_0x11d8ea=_0xd22336===_0x6d9b26(0x964)?TextManager[_0x6d9b26(0x8f0)]:'\x5cI[%1]%2'[_0x6d9b26(0x1d3)](_0x3b48bd,TextManager[_0x6d9b26(0x8f0)]),_0x2188a3=this[_0x6d9b26(0x1ee)]();this['addCommand'](_0x11d8ea,_0x6d9b26(0x8f0),_0x2188a3);},Window_ActorCommand[_0x58cf34(0x8ef)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0xb84)]=function(){const _0x3a073b=_0x58cf34;return VisuMZ['BattleCore']['Settings']['ActorCmd'][_0x3a073b(0x6c4)];},Window_ActorCommand[_0x58cf34(0x8ef)]['drawItem']=function(_0x521c80){const _0x402380=_0x58cf34,_0x39443c=this[_0x402380(0xb6e)](_0x521c80);if(_0x39443c==='iconText')this[_0x402380(0x901)](_0x521c80);else _0x39443c===_0x402380(0x70d)?this[_0x402380(0xb3a)](_0x521c80):Window_Command['prototype']['drawItem'][_0x402380(0x9a4)](this,_0x521c80);this[_0x402380(0x4cb)](_0x521c80);},Window_ActorCommand[_0x58cf34(0x8ef)]['commandStyle']=function(){const _0x581c17=_0x58cf34;return VisuMZ[_0x581c17(0xa6b)][_0x581c17(0xb05)][_0x581c17(0x226)]['CmdStyle'];},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0xb6e)]=function(_0x531d34){const _0x12fe15=_0x58cf34;if(_0x531d34<0x0)return'text';const _0x3557b4=this['commandStyle']();if(_0x3557b4!=='auto')return _0x3557b4;else{if(this[_0x12fe15(0x811)]()>0x0){const _0x436827=this[_0x12fe15(0x752)](_0x531d34);if(_0x436827[_0x12fe15(0xcbb)](/\\I\[(\d+)\]/i)){const _0x17dfa8=this['itemLineRect'](_0x531d34),_0x1fc21f=this[_0x12fe15(0xc2a)](_0x436827)[_0x12fe15(0xc78)];return _0x1fc21f<=_0x17dfa8[_0x12fe15(0xc78)]?_0x12fe15(0xb7e):'icon';}}}return _0x12fe15(0x964);},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0x901)]=function(_0x2624cb){const _0x3c1a32=_0x58cf34,_0x3e204b=this[_0x3c1a32(0x83d)](_0x2624cb),_0x187770=this[_0x3c1a32(0x752)](_0x2624cb),_0x3dac85=this[_0x3c1a32(0xc2a)](_0x187770)['width'];this[_0x3c1a32(0x79d)](this[_0x3c1a32(0xa9a)](_0x2624cb));const _0x1f31cc=this['itemTextAlign']();if(_0x1f31cc==='right')this['drawTextEx'](_0x187770,_0x3e204b['x']+_0x3e204b[_0x3c1a32(0xc78)]-_0x3dac85,_0x3e204b['y'],_0x3dac85);else{if(_0x1f31cc===_0x3c1a32(0x318)){const _0x5e7bc3=_0x3e204b['x']+Math[_0x3c1a32(0x951)]((_0x3e204b[_0x3c1a32(0xc78)]-_0x3dac85)/0x2);this[_0x3c1a32(0x6cd)](_0x187770,_0x5e7bc3,_0x3e204b['y'],_0x3dac85);}else this['drawTextEx'](_0x187770,_0x3e204b['x'],_0x3e204b['y'],_0x3dac85);}},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0xb3a)]=function(_0x4ed60c){const _0x5f9d7f=_0x58cf34;this[_0x5f9d7f(0x752)](_0x4ed60c)[_0x5f9d7f(0xcbb)](/\\I\[(\d+)\]/i);const _0x16911c=Number(RegExp['$1'])||0x0,_0x18f2ab=this[_0x5f9d7f(0x83d)](_0x4ed60c),_0x575688=_0x18f2ab['x']+Math[_0x5f9d7f(0x951)]((_0x18f2ab['width']-ImageManager[_0x5f9d7f(0x659)])/0x2),_0x40fd92=_0x18f2ab['y']+(_0x18f2ab[_0x5f9d7f(0x725)]-ImageManager[_0x5f9d7f(0x84b)])/0x2;this['drawIcon'](_0x16911c,_0x575688,_0x40fd92);},Window_ActorCommand[_0x58cf34(0x8ef)]['drawSingleSkillCost']=function(_0x7ffd7b){const _0x19ad38=_0x58cf34;if(!(VisuMZ[_0x19ad38(0xa6b)][_0x19ad38(0xb05)][_0x19ad38(0x226)]['ShowCosts']??!![]))return;const _0x207ece=this['commandSymbol'](_0x7ffd7b);if(![_0x19ad38(0x873),'guard',_0x19ad38(0x87e)]['includes'](_0x207ece))return;const _0x100fdc=this[_0x19ad38(0x83d)](_0x7ffd7b);let _0x2e3122=null;if(_0x207ece===_0x19ad38(0x873))_0x2e3122=$dataSkills[this[_0x19ad38(0xcc7)][_0x19ad38(0x326)]()];else _0x207ece==='guard'?_0x2e3122=$dataSkills[this[_0x19ad38(0xcc7)][_0x19ad38(0x74c)]()]:_0x2e3122=$dataSkills[this[_0x19ad38(0xaad)][_0x7ffd7b][_0x19ad38(0x2f5)]];this[_0x19ad38(0x7cf)](this[_0x19ad38(0xcc7)],_0x2e3122,_0x100fdc['x'],_0x100fdc['y'],_0x100fdc['width']);},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0x7cf)]=function(_0x153acd,_0x34fb86,_0x5752b6,_0x32ff1f,_0x49e3e5){const _0x458662=_0x58cf34;if(!_0x34fb86)return;Imported[_0x458662(0x62f)]?Window_Command[_0x458662(0x8ef)][_0x458662(0x7cf)][_0x458662(0x9a4)](this,_0x153acd,_0x34fb86,_0x5752b6,_0x32ff1f,_0x49e3e5):Window_SkillList['prototype'][_0x458662(0x7cf)][_0x458662(0x9a4)](this,_0x34fb86,_0x5752b6,_0x32ff1f,_0x49e3e5);},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0x48f)]=function(){},Window_ActorCommand[_0x58cf34(0x8ef)]['activate']=function(){const _0x5834d4=_0x58cf34;Window_Command[_0x5834d4(0x8ef)][_0x5834d4(0x279)][_0x5834d4(0x9a4)](this);const _0x26d5d9=this[_0x5834d4(0x9df)]();_0x26d5d9===_0x5834d4(0xa21)&&this['showHelpWindow']();},Window_ActorCommand['prototype'][_0x58cf34(0x9df)]=function(){const _0x4203b9=_0x58cf34;if(this[_0x4203b9(0x608)])return this[_0x4203b9(0x608)];return this[_0x4203b9(0x608)]=SceneManager[_0x4203b9(0xb85)][_0x4203b9(0x9df)](),this['_battleLayoutStyle'];},VisuMZ['BattleCore']['Window_ActorCommand_setup']=Window_ActorCommand['prototype'][_0x58cf34(0x6e1)],Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0x6e1)]=function(_0x2e9a5a){const _0x19efda=_0x58cf34,_0x19c0fd=this['battleLayoutStyle']();if(_0x2e9a5a&&['xp',_0x19efda(0x445)]['includes'](_0x19c0fd))this['resizeWindowXPStyle'](_0x2e9a5a);else _0x2e9a5a&&[_0x19efda(0xa21)][_0x19efda(0x375)](_0x19c0fd)&&(this[_0x19efda(0x3d4)](_0x2e9a5a),this[_0x19efda(0x436)]());VisuMZ['BattleCore']['Window_ActorCommand_setup'][_0x19efda(0x9a4)](this,_0x2e9a5a),_0x2e9a5a&&$gameTroop[_0x19efda(0x565)]()['length']>0x0&&_0x2e9a5a['battler']()&&_0x2e9a5a['battler']()[_0x19efda(0xa7a)]();},Window_ActorCommand['prototype'][_0x58cf34(0x340)]=function(_0x2283c8){const _0x32dbc5=_0x58cf34,_0x27b13a=VisuMZ['BattleCore'][_0x32dbc5(0xb05)][_0x32dbc5(0x272)][_0x32dbc5(0xc0f)],_0x3bacf2=Math[_0x32dbc5(0x92e)](Graphics[_0x32dbc5(0x9ad)]/0x3),_0x46b293=Math[_0x32dbc5(0x92e)](Graphics[_0x32dbc5(0x9ad)]/$gameParty['battleMembers']()[_0x32dbc5(0x3eb)]),_0x3342b6=Math[_0x32dbc5(0x238)](Math[_0x32dbc5(0xa8f)](_0x3bacf2,_0x46b293),_0x27b13a),_0x4e16b7=this['fittingHeight'](VisuMZ[_0x32dbc5(0xa6b)][_0x32dbc5(0xb05)][_0x32dbc5(0x272)][_0x32dbc5(0x835)]),_0x3a4046=Math['floor']((Graphics[_0x32dbc5(0x9ad)]-Graphics[_0x32dbc5(0xc78)])/0x2),_0x5a491d=Graphics['boxWidth']-_0x3a4046,_0x60aa5f=(Math[_0x32dbc5(0x92e)](_0x46b293*_0x2283c8[_0x32dbc5(0x94f)]())+Math[_0x32dbc5(0x92e)]((_0x46b293-_0x3342b6)/0x2))[_0x32dbc5(0xaa5)](_0x3a4046,_0x5a491d-_0x3342b6),_0x38b127=Math[_0x32dbc5(0x92e)](SceneManager[_0x32dbc5(0xb85)][_0x32dbc5(0x4f1)]['y']-_0x4e16b7);this[_0x32dbc5(0x612)](_0x60aa5f,_0x38b127,_0x3342b6,_0x4e16b7),this['createContents'](),this[_0x32dbc5(0x658)](0x1);},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0x3d4)]=function(_0xaa5237){const _0x54172d=_0x58cf34,_0x4c72ad=SceneManager[_0x54172d(0xb85)][_0x54172d(0x1ed)]();this[_0x54172d(0x612)](_0x4c72ad['x'],_0x4c72ad['y'],_0x4c72ad[_0x54172d(0xc78)],_0x4c72ad[_0x54172d(0x725)]),this[_0x54172d(0x2b8)](),this['setBackgroundType'](0x0);},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0xa74)]=function(){const _0x45a1dc=_0x58cf34;if(this[_0x45a1dc(0x28a)]){const _0x530f4f=this[_0x45a1dc(0x28a)][_0x45a1dc(0xa41)],_0x374f38=this[_0x45a1dc(0xc78)]-0x8,_0x5244b1=this['height'],_0x17c7f0=this[_0x45a1dc(0xa80)],_0x1f7333=ColorManager[_0x45a1dc(0x925)](),_0x148c86=ColorManager['dimColor2']();this[_0x45a1dc(0x28a)]['x']=0x4,_0x530f4f[_0x45a1dc(0x9fe)](_0x374f38,_0x5244b1),_0x530f4f[_0x45a1dc(0xb8c)](0x0,0x0,_0x374f38,_0x17c7f0,_0x148c86,_0x1f7333,!![]),_0x530f4f[_0x45a1dc(0x3d1)](0x0,_0x17c7f0,_0x374f38,_0x5244b1-_0x17c7f0*0x2,_0x1f7333),_0x530f4f[_0x45a1dc(0xb8c)](0x0,_0x5244b1-_0x17c7f0,_0x374f38,_0x17c7f0,_0x1f7333,_0x148c86,!![]),this[_0x45a1dc(0x28a)][_0x45a1dc(0x4a5)](0x0,0x0,_0x374f38,_0x5244b1);}},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0x4f5)]=function(){const _0x415133=_0x58cf34;if(!this['_actor'])return;const _0x2d24cf=VisuMZ['BattleCore'][_0x415133(0xb05)]['ActorCmd'],_0x43b0f3=this[_0x415133(0xaec)]();switch(_0x43b0f3){case _0x415133(0x873):this[_0x415133(0xc60)]($dataSkills[this[_0x415133(0xcc7)]['attackSkillId']()]);break;case _0x415133(0xacf):this[_0x415133(0xc60)]($dataSkills[this[_0x415133(0xcc7)][_0x415133(0x74c)]()]);break;case _0x415133(0xa42):const _0x2be255=_0x2d24cf[_0x415133(0x262)],_0x3c2476=_0x2be255[_0x415133(0x1d3)]($dataSystem[_0x415133(0xb60)][this[_0x415133(0xcb2)]()]);this[_0x415133(0xa32)][_0x415133(0xa55)](_0x3c2476);break;case _0x415133(0x87e):this[_0x415133(0xc60)]($dataSkills[this['currentExt']()]);break;case'item':this[_0x415133(0xa32)][_0x415133(0xa55)](_0x2d24cf[_0x415133(0x2e1)]);break;case _0x415133(0x6f3):this[_0x415133(0xa32)][_0x415133(0xa55)](_0x2d24cf[_0x415133(0x6d7)]);break;case _0x415133(0x8f0):this[_0x415133(0xa32)][_0x415133(0xa55)](_0x2d24cf[_0x415133(0xbcb)]);break;case _0x415133(0xa5a):this[_0x415133(0xa32)][_0x415133(0xa55)](Window_InBattleStatus['SETTINGS']['statusHelpDesc']);break;default:this[_0x415133(0xa32)]['setText']('');break;}},Window_ActorCommand[_0x58cf34(0x8ef)]['selectLast']=function(){const _0x32c94c=_0x58cf34;this['forceSelect'](0x0);if(this[_0x32c94c(0xcc7)]&&ConfigManager[_0x32c94c(0xbc9)]){const _0x10029b=this[_0x32c94c(0xcc7)]['lastCommandSymbol']();this[_0x32c94c(0x3af)](_0x10029b);if(_0x10029b==='skill'){const _0x47f104=this[_0x32c94c(0xcc7)][_0x32c94c(0xa30)]();if(_0x47f104){const _0x42893e=this[_0x32c94c(0xafe)](_0x32c94c(0xa42),_0x47f104['stypeId']);this['select'](_0x42893e||0x0);}}else{if(_0x10029b===_0x32c94c(0x87e)){const _0x59eaed=this[_0x32c94c(0xcc7)][_0x32c94c(0xa30)]();if(_0x59eaed){const _0x3ff464=this['findSymbolExt']('singleSkill',_0x59eaed['id']);this[_0x32c94c(0x755)](_0x3ff464||0x0);}}}}},Window_ActorCommand[_0x58cf34(0x8ef)][_0x58cf34(0xafe)]=function(_0x287cff,_0x37c015){const _0x4a50db=_0x58cf34;return this[_0x4a50db(0xaad)]['findIndex'](_0x5bf4d3=>_0x5bf4d3[_0x4a50db(0x9b7)]===_0x287cff&&_0x5bf4d3['ext']===_0x37c015);},VisuMZ['BattleCore']['Window_BattleStatus_initialize']=Window_BattleStatus['prototype'][_0x58cf34(0xb4e)],Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)]=function(_0x4c6b9d){const _0xd0bf43=_0x58cf34;VisuMZ['BattleCore']['Window_BattleStatus_initialize'][_0xd0bf43(0x9a4)](this,_0x4c6b9d),this['initBattleCore'](),this['createAttachmentSprites']();},Window_BattleStatus['prototype']['battleLayoutStyle']=function(){const _0x3425ed=_0x58cf34;if(this[_0x3425ed(0x608)])return this[_0x3425ed(0x608)];return this[_0x3425ed(0x608)]=SceneManager[_0x3425ed(0xb85)][_0x3425ed(0x9df)](),this[_0x3425ed(0x608)];},Window_BattleStatus['prototype'][_0x58cf34(0x4ce)]=function(){const _0x4247cb=_0x58cf34;this[_0x4247cb(0xb76)]=this['isFrameVisible']();const _0xaf42f6=VisuMZ[_0x4247cb(0xa6b)]['Settings'][_0x4247cb(0x272)];_0xaf42f6[_0x4247cb(0xbe4)]&&(this[_0x4247cb(0xc46)]=0x0);},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x5fe)]=function(){const _0x41e397=_0x58cf34,_0x199181=VisuMZ['BattleCore'][_0x41e397(0xb05)][_0x41e397(0x272)];if(_0x199181[_0x41e397(0x7a4)])return!![];const _0x1a5ad1=this[_0x41e397(0x9df)]();switch(_0x1a5ad1){case _0x41e397(0x83e):case _0x41e397(0xa21):return!![];break;case'default':case'xp':case _0x41e397(0x445):default:return![];break;}},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x673)]=function(){const _0xcd9ade=_0x58cf34;return this[_0xcd9ade(0x5fe)]()?0x0:0xa;},Window_BattleStatus['prototype'][_0x58cf34(0x259)]=function(){const _0x233f26=_0x58cf34,_0x2acfa8=this[_0x233f26(0x9df)]();switch(_0x2acfa8){case _0x233f26(0x83e):return 0x1;break;case'xp':case _0x233f26(0x445):return $gameParty[_0x233f26(0x623)]()[_0x233f26(0x3eb)];break;case _0x233f26(0x246):default:return $gameParty[_0x233f26(0x5be)]();break;}},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x76a)]=function(){const _0x4f4b2f=_0x58cf34,_0x427ee2=this[_0x4f4b2f(0x9df)]();switch(_0x427ee2){case'list':return Window_StatusBase['prototype'][_0x4f4b2f(0x76a)]['call'](this);break;case'default':case'xp':case _0x4f4b2f(0x445):default:return this['innerHeight'];break;}},Window_BattleStatus[_0x58cf34(0x8ef)]['rowSpacing']=function(){const _0x191bdd=_0x58cf34,_0x52be30=this['battleLayoutStyle']();switch(_0x52be30){case _0x191bdd(0x83e):return Window_StatusBase[_0x191bdd(0x8ef)][_0x191bdd(0x84e)]['call'](this);break;case _0x191bdd(0x246):case'xp':case'portrait':default:return 0x0;break;}},Window_BattleStatus[_0x58cf34(0x8ef)]['updatePadding']=function(){const _0x14a87b=_0x58cf34;this[_0x14a87b(0x5fe)]()?Window_StatusBase['prototype'][_0x14a87b(0x789)]['call'](this):this[_0x14a87b(0xa80)]=0x8;},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0xbeb)]=function(){const _0x22e054=_0x58cf34,_0x1d1717=VisuMZ[_0x22e054(0xa6b)]['Settings'][_0x22e054(0x272)];_0x1d1717[_0x22e054(0x7a4)]?this[_0x22e054(0xc4b)]=ImageManager[_0x22e054(0xace)](_0x1d1717[_0x22e054(0x7a4)]):Window_StatusBase[_0x22e054(0x8ef)][_0x22e054(0xbeb)][_0x22e054(0x9a4)](this);},Window_BattleStatus['prototype'][_0x58cf34(0xba3)]=function(_0x38d249){const _0xb55d72=_0x58cf34,_0x5b471d=VisuMZ['BattleCore'][_0xb55d72(0xb05)][_0xb55d72(0x272)];if(_0x5b471d['StatusWindowSelectableBackHide'])return;Window_StatusBase[_0xb55d72(0x8ef)]['drawItemBackground'][_0xb55d72(0x9a4)](this,_0x38d249);},Window_BattleStatus['prototype'][_0x58cf34(0x347)]=function(){this['_requestRefresh']=!![];},Window_BattleStatus['prototype'][_0x58cf34(0x6a2)]=function(){const _0x131eef=_0x58cf34;Window_StatusBase[_0x131eef(0x8ef)][_0x131eef(0x6a2)][_0x131eef(0x9a4)](this),this[_0x131eef(0xbb4)](),this[_0x131eef(0x370)]();if(this[_0x131eef(0x9df)]()===_0x131eef(0xa21))this['updateBorderStyle']();},Window_BattleStatus['prototype'][_0x58cf34(0xbb4)]=function(){const _0xb97b63=_0x58cf34;if($gameTemp[_0xb97b63(0xc7e)]())this[_0xb97b63(0x6bc)](),this['_requestRefresh']=![],$gameTemp[_0xb97b63(0x64f)]();else this[_0xb97b63(0x1d4)]&&(this[_0xb97b63(0x1d4)]=![],this[_0xb97b63(0x7ff)](),this[_0xb97b63(0x844)]());},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x68d)]=function(){const _0xf607f9=_0x58cf34;Window_StatusBase[_0xf607f9(0x8ef)]['show'][_0xf607f9(0x9a4)](this);if(!$gameSystem[_0xf607f9(0xc41)]())this['refresh']();},Window_BattleStatus['prototype']['hide']=function(){const _0x1743ca=_0x58cf34;if(this[_0x1743ca(0x408)]===Window_BattleStatus)return;Window_StatusBase['prototype']['hide']['call'](this);},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x567)]=function(_0x3f00cc){const _0x180873=_0x58cf34,_0x35b2e9=this[_0x180873(0x9df)]();switch(_0x35b2e9){case'xp':case _0x180873(0x445):break;case _0x180873(0x246):case _0x180873(0x83e):case'border':default:return Window_StatusBase['prototype'][_0x180873(0x567)]['call'](this,_0x3f00cc);break;}},VisuMZ['BattleCore'][_0x58cf34(0x423)]=Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x85a)],Window_BattleStatus['prototype'][_0x58cf34(0x85a)]=function(_0x35e846){const _0x5719d3=_0x58cf34,_0x51ea67=this[_0x5719d3(0x9df)]();switch(_0x51ea67){case _0x5719d3(0x83e):this[_0x5719d3(0x224)](_0x35e846);break;case'xp':this[_0x5719d3(0xcd1)](_0x35e846);break;case _0x5719d3(0x445):this[_0x5719d3(0xc5d)](_0x35e846);break;case'default':case _0x5719d3(0xa21):default:VisuMZ['BattleCore'][_0x5719d3(0x423)][_0x5719d3(0x9a4)](this,_0x35e846);break;}},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x2ab)]=function(_0x471453){const _0x4f43ab=_0x58cf34,_0x4d9046=this['battleLayoutStyle']();if(!$gameSystem[_0x4f43ab(0xc41)]())this[_0x4f43ab(0x5de)](_0x471453);switch(_0x4d9046){case _0x4f43ab(0x83e):this['drawItemStatusListStyle'](_0x471453);break;case'xp':case _0x4f43ab(0x445):case _0x4f43ab(0x246):case _0x4f43ab(0xa21):default:this[_0x4f43ab(0xb1e)](_0x471453);break;}},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x66c)]=function(){const _0x2e8d8e=_0x58cf34,_0xb9f9ec=this[_0x2e8d8e(0x9df)]();if(['xp'][_0x2e8d8e(0x375)](_0xb9f9ec)&&!$gameSystem['isSideView']()){this[_0x2e8d8e(0x1f7)](0x0,0x0,0x0,0x0);return;}Window_StatusBase['prototype']['refreshCursor'][_0x2e8d8e(0x9a4)](this);},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x5de)]=function(_0x402ee3){const _0x1f55fc=_0x58cf34,_0x9fee2c=this['actor'](_0x402ee3)[_0x1f55fc(0x399)]();if(!_0x9fee2c)return;const _0x79daa1=this[_0x1f55fc(0x9df)](),_0x3efce6=this[_0x1f55fc(0x984)](_0x402ee3);let _0x3fe411=Math[_0x1f55fc(0x92e)](_0x3efce6['x']+_0x3efce6['width']/0x2)+this[_0x1f55fc(0xa80)];['list'][_0x1f55fc(0x375)](_0x79daa1)&&(_0x3fe411=_0x3efce6[_0x1f55fc(0xc78)]/$gameParty['battleMembers']()[_0x1f55fc(0x3eb)],_0x3fe411*=_0x402ee3,_0x3fe411+=_0x3efce6[_0x1f55fc(0xc78)]/$gameParty[_0x1f55fc(0x623)]()[_0x1f55fc(0x3eb)]/0x2);let _0x3f6839=Math['round'](this[_0x1f55fc(0x29b)](_0x402ee3,_0x9fee2c,_0x3efce6));_0x9fee2c['setHome'](_0x3fe411,_0x3f6839),this[_0x1f55fc(0x7ec)](_0x9fee2c,0x1),_0x9fee2c['show'](),this[_0x1f55fc(0xa6d)](),this['updateAttachmentSprites']();},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x29b)]=function(_0x48c75e,_0x179797,_0x265eea){const _0x65f076=_0x58cf34,_0x9615f0=VisuMZ[_0x65f076(0xa6b)][_0x65f076(0xb05)][_0x65f076(0x272)],_0x783ec0=this['battleLayoutStyle']();if(_0x783ec0==='xp'){const _0x2fc473=_0x9615f0['XPSpriteYLocation'];switch(_0x2fc473['toLowerCase']()[_0x65f076(0x989)]()){case _0x65f076(0x59f):return _0x265eea['height']-_0x179797['_shadowSprite']['height']/0x4;break;case'center':const _0x140fe3=_0x9615f0[_0x65f076(0x3cf)];return(_0x265eea['height']+(_0x179797[_0x65f076(0x725)]||_0x140fe3))/0x2;break;case _0x65f076(0x512):return 0x0;case _0x65f076(0xc22):default:return this[_0x65f076(0x667)](_0x265eea);break;}}else{if(_0x783ec0===_0x65f076(0x445)){}}return _0x179797[_0x65f076(0x725)];},Sprite_Name[_0x58cf34(0x8ef)][_0x58cf34(0xa47)]=function(){return 0x24;},Sprite_Name[_0x58cf34(0x8ef)][_0x58cf34(0x617)]=function(){const _0x413b12=_0x58cf34,_0x20c3b4=this[_0x413b12(0xc22)](),_0x561d8f=this[_0x413b12(0xcd4)](),_0x474fd5=this[_0x413b12(0xa47)]();this[_0x413b12(0x6e9)](),this[_0x413b12(0xa41)][_0x413b12(0xcdf)](),this['bitmap']['drawTextTopAligned'](_0x20c3b4,0x4,0x0,_0x561d8f,_0x474fd5,_0x413b12(0xa93));},Bitmap[_0x58cf34(0x8ef)]['drawTextTopAligned']=function(_0x47fa88,_0x40b19a,_0x534264,_0x302052,_0x40689e,_0x51adf8){const _0x24c0fe=_0x58cf34;TextManager['parseLocalizedText']&&(_0x47fa88=TextManager[_0x24c0fe(0x930)](_0x47fa88));const _0x19b68f=this[_0x24c0fe(0xc7c)],_0x5530c4=_0x19b68f[_0x24c0fe(0x1e1)];_0x302052=_0x302052||0xffffffff;let _0x350af4=_0x40b19a,_0x385dda=Math['round'](_0x534264+0x18/0x2+this['fontSize']*0.35);_0x51adf8===_0x24c0fe(0x318)&&(_0x350af4+=_0x302052/0x2),_0x51adf8==='right'&&(_0x350af4+=_0x302052),_0x19b68f[_0x24c0fe(0xbdc)](),_0x19b68f[_0x24c0fe(0xb2d)]=this[_0x24c0fe(0x4c2)](),_0x19b68f[_0x24c0fe(0x99a)]=_0x51adf8,_0x19b68f[_0x24c0fe(0x2c2)]='alphabetic',_0x19b68f['globalAlpha']=0x1,this[_0x24c0fe(0x60b)](_0x47fa88,_0x350af4,_0x385dda,_0x302052),_0x19b68f[_0x24c0fe(0x1e1)]=_0x5530c4,this[_0x24c0fe(0x949)](_0x47fa88,_0x350af4,_0x385dda,_0x302052),_0x19b68f[_0x24c0fe(0x3db)](),this[_0x24c0fe(0xc8b)][_0x24c0fe(0x6a2)]();},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x667)]=function(_0x44e7ba){const _0x289878=_0x58cf34;return this[_0x289878(0x2b6)](_0x44e7ba)-this['gaugeLineHeight']();},Window_BattleStatus['prototype'][_0x58cf34(0x224)]=function(_0xf4b3a5){const _0x3e2c77=_0x58cf34;if(!VisuMZ[_0x3e2c77(0xa6b)][_0x3e2c77(0xb05)][_0x3e2c77(0x272)][_0x3e2c77(0x5d9)])return;const _0x1b6294=this[_0x3e2c77(0x2fd)](_0xf4b3a5),_0x5d8b1a=this[_0x3e2c77(0x984)](_0xf4b3a5);_0x5d8b1a[_0x3e2c77(0xc78)]=ImageManager[_0x3e2c77(0x80d)],_0x5d8b1a[_0x3e2c77(0x725)]-=0x2,this[_0x3e2c77(0x72a)](_0x1b6294,_0x5d8b1a['x']+0x1,_0x5d8b1a['y']+0x1,_0x5d8b1a[_0x3e2c77(0xc78)],_0x5d8b1a[_0x3e2c77(0x725)]);},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x6dd)]=function(_0xc1f83e){const _0x2829e5=_0x58cf34,_0x36338f=VisuMZ[_0x2829e5(0xa6b)]['Settings'][_0x2829e5(0x272)],_0x21468c=$dataSystem[_0x2829e5(0x50c)]?0x4:0x3,_0x59f086=_0x21468c*0x80+(_0x21468c-0x1)*0x8+0x4,_0x5895b7=this[_0x2829e5(0x2fd)](_0xc1f83e),_0x276174=this[_0x2829e5(0x984)](_0xc1f83e);let _0x381191=_0x276174['x']+this[_0x2829e5(0xa80)];_0x36338f[_0x2829e5(0x5d9)]?_0x381191=_0x276174['x']+ImageManager['faceWidth']+0x8:_0x381191+=ImageManager['iconWidth'];const _0x5acc35=Math[_0x2829e5(0x92e)](Math[_0x2829e5(0xa8f)](_0x276174['x']+_0x276174[_0x2829e5(0xc78)]-_0x59f086,_0x381191)),_0x3b5b05=Math['round'](_0x276174['y']+(_0x276174[_0x2829e5(0x725)]-Sprite_Name[_0x2829e5(0x8ef)][_0x2829e5(0xa47)]())/0x2),_0x536c1a=Math[_0x2829e5(0x92e)](_0x5acc35-ImageManager[_0x2829e5(0x659)]/0x2-0x4),_0x13a319=Math[_0x2829e5(0x92e)](_0x276174['y']+(_0x276174[_0x2829e5(0x725)]-ImageManager['iconHeight'])/0x2+ImageManager['iconHeight']/0x2);let _0xefd165=_0x5acc35+0x88;const _0x864339=_0x3b5b05;this[_0x2829e5(0x8c1)](_0x5895b7,_0x5acc35-0x4+(_0x36338f[_0x2829e5(0x306)]||0x0),_0x3b5b05+(_0x36338f[_0x2829e5(0xc74)]||0x0)),this[_0x2829e5(0x470)](_0x5895b7,_0x5acc35+(_0x36338f[_0x2829e5(0x4f2)]||0x0),_0x3b5b05+(_0x36338f[_0x2829e5(0x40e)]||0x0)),this[_0x2829e5(0xc36)](_0x5895b7,_0x536c1a+(_0x36338f[_0x2829e5(0xbf5)]||0x0),_0x13a319+(_0x36338f[_0x2829e5(0x466)]||0x0)),this[_0x2829e5(0x482)](_0x5895b7,'hp',_0xefd165+0x88*0x0+(_0x36338f['HpGaugeOffsetX']||0x0),_0x864339+(_0x36338f[_0x2829e5(0xa8e)]||0x0)),this[_0x2829e5(0x482)](_0x5895b7,'mp',_0xefd165+0x88*0x1+(_0x36338f[_0x2829e5(0x24f)]||0x0),_0x864339+(_0x36338f[_0x2829e5(0x750)]||0x0)),$dataSystem[_0x2829e5(0x50c)]&&this['placeGauge'](_0x5895b7,'tp',_0xefd165+0x88*0x2+(_0x36338f['TpGaugeOffsetX']||0x0),_0x864339+(_0x36338f[_0x2829e5(0x89a)]||0x0));},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0xcd1)]=function(_0x96302d){const _0x352926=_0x58cf34;if(!$gameSystem[_0x352926(0xc41)]())return;VisuMZ[_0x352926(0xa6b)][_0x352926(0x423)]['call'](this,_0x96302d);},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0xb1e)]=function(_0x1b674a){const _0x243e40=_0x58cf34,_0x319e4f=VisuMZ['BattleCore'][_0x243e40(0xb05)][_0x243e40(0x272)],_0x30bae3=this['actor'](_0x1b674a),_0x434a0c=this[_0x243e40(0x984)](_0x1b674a),_0x55d12f=Math[_0x243e40(0x92e)](_0x434a0c['x']+(_0x434a0c[_0x243e40(0xc78)]-0x80)/0x2),_0x102b42=this[_0x243e40(0x667)](_0x434a0c);let _0x22bc8c=_0x55d12f-ImageManager[_0x243e40(0x659)]/0x2-0x4,_0xc06d2d=_0x102b42+ImageManager[_0x243e40(0x84b)]/0x2;_0x22bc8c-ImageManager[_0x243e40(0x659)]/0x2<_0x434a0c['x']&&(_0x22bc8c=_0x55d12f+ImageManager[_0x243e40(0x659)]/0x2-0x4,_0xc06d2d=_0x102b42-ImageManager[_0x243e40(0x84b)]/0x2);const _0x467b81=_0x55d12f,_0x4d5676=this[_0x243e40(0x2b6)](_0x434a0c);this['placeTimeGauge'](_0x30bae3,_0x55d12f+(_0x319e4f[_0x243e40(0x306)]||0x0),_0x102b42+(_0x319e4f[_0x243e40(0xc74)]||0x0)),this[_0x243e40(0x470)](_0x30bae3,_0x55d12f+(_0x319e4f[_0x243e40(0x4f2)]||0x0),_0x102b42+(_0x319e4f[_0x243e40(0x40e)]||0x0)),this[_0x243e40(0xc36)](_0x30bae3,_0x22bc8c+(_0x319e4f['StateIconOffsetX']||0x0),_0xc06d2d+(_0x319e4f[_0x243e40(0x466)]||0x0)),this[_0x243e40(0x482)](_0x30bae3,'hp',_0x467b81+(_0x319e4f[_0x243e40(0x3b2)]||0x0),_0x4d5676+(_0x319e4f[_0x243e40(0xa8e)]||0x0)),this[_0x243e40(0x482)](_0x30bae3,'mp',_0x467b81+(_0x319e4f[_0x243e40(0x24f)]||0x0),_0x4d5676+this['gaugeLineHeight']()+(_0x319e4f['MpGaugeOffsetY']||0x0)),$dataSystem[_0x243e40(0x50c)]&&this[_0x243e40(0x482)](_0x30bae3,'tp',_0x467b81+(_0x319e4f['TpGaugeOffsetX']||0x0),_0x4d5676+this['gaugeLineHeight']()*0x2+(_0x319e4f[_0x243e40(0x89a)]||0x0));},Window_BattleStatus[_0x58cf34(0x8ef)]['showPortraits']=function(_0x46606f){const _0x11ed1d=_0x58cf34;if(!VisuMZ['BattleCore'][_0x11ed1d(0xb05)]['BattleLayout'][_0x11ed1d(0x9c8)])return![];if(_0x46606f[_0x11ed1d(0x2f4)]())return!![];return Imported['VisuMZ_1_MainMenuCore']&&_0x46606f[_0x11ed1d(0x66f)]();},Game_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x7f0)]=function(){const _0xc44c8f=_0x58cf34;if(this['actor']()[_0xc44c8f(0x841)][_0xc44c8f(0xcbb)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0xc44c8f(0x841)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x58cf34(0x8ef)][_0x58cf34(0x90f)]=function(){const _0x2ec7ad=_0x58cf34;if(this[_0x2ec7ad(0x2fd)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x58cf34(0x8ef)]['drawItemImagePortraitStyle']=function(_0x349488){const _0x1f0073=_0x58cf34,_0x2528a4=this[_0x1f0073(0x2fd)](_0x349488);if(this[_0x1f0073(0x652)](_0x2528a4)){const _0x13a324=_0x1f0073(0x31f)[_0x1f0073(0x1d3)](_0x2528a4[_0x1f0073(0xb00)]()),_0x4960b2=this['createInnerPortrait'](_0x13a324,Sprite),_0x494aff=_0x2528a4[_0x1f0073(0x990)]();_0x494aff!==''?_0x4960b2[_0x1f0073(0xa41)]=ImageManager['loadPicture'](_0x494aff):_0x4960b2['bitmap']=ImageManager[_0x1f0073(0x63b)];const _0x373a65=this[_0x1f0073(0x984)](_0x349488);_0x4960b2[_0x1f0073(0x9cc)]['x']=0.5,_0x4960b2[_0x1f0073(0x9cc)]['y']=0x1;let _0x527181=Math['round'](_0x373a65['x']+_0x373a65[_0x1f0073(0xc78)]/0x2)+this[_0x1f0073(0xa80)];_0x527181+=_0x2528a4[_0x1f0073(0x7f0)]();let _0x4dcc13=Math[_0x1f0073(0x92e)](this[_0x1f0073(0x725)]);_0x4dcc13+=_0x2528a4[_0x1f0073(0x90f)](),_0x4960b2[_0x1f0073(0x612)](_0x527181,_0x4dcc13);const _0x56d737=VisuMZ[_0x1f0073(0xa6b)][_0x1f0073(0xb05)][_0x1f0073(0x272)][_0x1f0073(0x529)];_0x4960b2['scale']['x']=_0x56d737,_0x4960b2[_0x1f0073(0x527)]['y']=_0x56d737,_0x4960b2[_0x1f0073(0x68d)]();}else{const _0x36c756=this[_0x1f0073(0xadb)](_0x349488);this[_0x1f0073(0x72a)](_0x2528a4,_0x36c756['x'],_0x36c756['y'],_0x36c756[_0x1f0073(0xc78)],_0x36c756[_0x1f0073(0x725)]);}},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0xc62)]=function(_0x5896bc,_0x1236c4){const _0x5c1362=_0x58cf34,_0x4c5abf=this[_0x5c1362(0x78b)];if(_0x4c5abf[_0x5896bc])return _0x4c5abf[_0x5896bc];else{const _0x214241=new _0x1236c4();return _0x4c5abf[_0x5896bc]=_0x214241,this['addChildToBack'](_0x214241),this[_0x5c1362(0x929)](this[_0x5c1362(0x999)]),_0x214241;}},Window_BattleStatus['prototype'][_0x58cf34(0xb24)]=function(){const _0x1b4645=_0x58cf34;this['_createCursorArea'](),this[_0x1b4645(0x902)](),Window_StatusBase['prototype'][_0x1b4645(0xb24)]['call'](this),this['_createDamageContainer']();},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x7f5)]=function(){const _0x174d85=_0x58cf34;this['_cursorArea']=new Sprite(),this['_cursorArea']['filters']=[new PIXI[(_0x174d85(0xc1b))]['AlphaFilter']()],this[_0x174d85(0x999)][_0x174d85(0x1d2)]=new Rectangle(),this[_0x174d85(0x999)][_0x174d85(0x612)](this[_0x174d85(0x359)],this['_padding']),this[_0x174d85(0x3ac)](this[_0x174d85(0x999)]);},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x902)]=function(){const _0x2c2444=_0x58cf34;this[_0x2c2444(0x6cb)]=new Sprite(),this[_0x2c2444(0x3ac)](this[_0x2c2444(0x6cb)]);},Window_BattleStatus['prototype']['updateEffectsContainer']=function(){const _0x3e8441=_0x58cf34;this[_0x3e8441(0x6cb)]&&this[_0x3e8441(0x3ac)](this[_0x3e8441(0x6cb)]);},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0xc3f)]=function(){const _0xb02c38=_0x58cf34;this[_0xb02c38(0x9e4)]=new Sprite(),this['addChild'](this[_0xb02c38(0x9e4)]);},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x1d6)]=function(){const _0x30e7c4=_0x58cf34;this[_0x30e7c4(0x730)]=new Sprite();for(let _0x584998=0x0;_0x584998<0x9;_0x584998++){this['_cursorSprite'][_0x30e7c4(0x3ac)](new Sprite());}this[_0x30e7c4(0x999)]['addChild'](this[_0x30e7c4(0x730)]);},Window_BattleStatus[_0x58cf34(0x8ef)]['_updateClientArea']=function(){const _0x38d936=_0x58cf34;Window_StatusBase[_0x38d936(0x8ef)][_0x38d936(0x86a)][_0x38d936(0x9a4)](this),this[_0x38d936(0x1e9)]();},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x1e9)]=function(){const _0x30d4ab=_0x58cf34,_0x38f6ec=this['_padding'];this[_0x30d4ab(0x999)][_0x30d4ab(0x612)](_0x38f6ec,_0x38f6ec),this[_0x30d4ab(0x999)]['x']=_0x38f6ec-this[_0x30d4ab(0x484)]['x'],this[_0x30d4ab(0x999)]['y']=_0x38f6ec-this['origin']['y'],this['innerWidth']>0x0&&this[_0x30d4ab(0x836)]>0x0?this[_0x30d4ab(0x999)][_0x30d4ab(0x1e4)]=this[_0x30d4ab(0xa59)]():this[_0x30d4ab(0x999)]['visible']=![];},Window_BattleStatus['prototype'][_0x58cf34(0x4d1)]=function(){const _0x124b4f=_0x58cf34;Window_StatusBase['prototype'][_0x124b4f(0x4d1)]['call'](this),this[_0x124b4f(0x662)]();},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x662)]=function(){const _0x41f646=_0x58cf34,_0x5ee2f8=this[_0x41f646(0x999)][_0x41f646(0xc06)][_0x41f646(0x383)](new Point(0x0,0x0)),_0x5f4519=this[_0x41f646(0x999)][_0x41f646(0x1d2)];_0x5f4519['x']=_0x5ee2f8['x']+this[_0x41f646(0x484)]['x'],_0x5f4519['y']=_0x5ee2f8['y']+this['origin']['y'],_0x5f4519[_0x41f646(0xc78)]=this[_0x41f646(0x6c7)],_0x5f4519[_0x41f646(0x725)]=this[_0x41f646(0x836)];},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x51d)]=function(_0x49a324){const _0x266df9=_0x58cf34;if(this[_0x266df9(0x9df)]()!==_0x266df9(0x445))return;this[_0x266df9(0xc5d)](_0x49a324[_0x266df9(0x94f)]());},Window_BattleStatus['prototype'][_0x58cf34(0x435)]=function(_0x178eec,_0x2d599e){const _0x2835aa=_0x58cf34;if(!this[_0x2835aa(0x9e4)])return;if(!_0x178eec)return;if(!_0x2d599e)return;const _0x9ccab3=this['itemRect'](_0x2d599e[_0x2835aa(0x94f)]());_0x9ccab3['x']+=_0x9ccab3[_0x2835aa(0xc78)]/0x2+this[_0x2835aa(0xa80)],_0x178eec['x']=_0x9ccab3['x'],_0x178eec['y']=_0x9ccab3['y'],this[_0x2835aa(0x9e4)][_0x2835aa(0x3ac)](_0x178eec);},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x7d0)]=function(_0x42bf4d){const _0x16270e=_0x58cf34;if(!this['_damageContainer'])return;if(!_0x42bf4d)return;this['_damageContainer'][_0x16270e(0x9e9)](_0x42bf4d);},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0xabc)]=function(){const _0x5a3a59=_0x58cf34;if(!this[_0x5a3a59(0x63e)]())return;if(!this[_0x5a3a59(0xc5b)])this[_0x5a3a59(0x5e5)]();this['prepareBorderActor'](),this[_0x5a3a59(0x777)]();},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x63e)]=function(){const _0x4a3c7a=_0x58cf34;if(this[_0x4a3c7a(0x408)]!==Window_BattleStatus)return![];if(!SceneManager[_0x4a3c7a(0x3d3)]())return![];return VisuMZ['BattleCore']['Settings'][_0x4a3c7a(0x272)][_0x4a3c7a(0x829)];},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x5e5)]=function(){const _0x15248f=_0x58cf34;this['_borderPortraitSprite']=new Sprite();const _0x470cc3=SceneManager[_0x15248f(0xb85)],_0x1b437d=_0x470cc3[_0x15248f(0x9fa)][_0x15248f(0xccf)](_0x470cc3['_windowLayer']);_0x470cc3['addChildAt'](this[_0x15248f(0xc5b)],_0x1b437d),this['_borderPortraitSprite'][_0x15248f(0x9cc)]['x']=0.5,this['_borderPortraitSprite'][_0x15248f(0x9cc)]['y']=0x1;const _0x4b9a13=VisuMZ[_0x15248f(0xa6b)][_0x15248f(0xb05)][_0x15248f(0x272)][_0x15248f(0x733)];this[_0x15248f(0xc5b)]['scale']['x']=_0x4b9a13,this[_0x15248f(0xc5b)][_0x15248f(0x527)]['y']=_0x4b9a13,this['_borderPortraitSprite']['y']=this['y']+this[_0x15248f(0x725)],this[_0x15248f(0x783)]=0x0;},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x7e4)]=function(){const _0x504395=_0x58cf34;return BattleManager[_0x504395(0x9b1)]();},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x94b)]=function(){const _0x3698f6=_0x58cf34;this['_borderPortraitSprite'][_0x3698f6(0x1e4)]=this['isBorderPortraitSpriteVisible']();const _0x214bd2=BattleManager['actor'](),_0x4c9466=_0x214bd2?_0x214bd2['getBattlePortraitFilename']()||'':'';if(_0x214bd2===this[_0x3698f6(0xc5b)][_0x3698f6(0x2fd)]&&_0x4c9466===this[_0x3698f6(0xc5b)][_0x3698f6(0x221)])return;this['_borderPortraitSprite'][_0x3698f6(0x2fd)]=_0x214bd2||this['_borderPortraitSprite'][_0x3698f6(0x2fd)],this[_0x3698f6(0xc5b)]['lastFilename']=_0x4c9466;if(!_0x214bd2)return;else{if(_0x4c9466===''){this[_0x3698f6(0xc5b)][_0x3698f6(0xa41)]=ImageManager[_0x3698f6(0x63b)],this[_0x3698f6(0xc5b)][_0x3698f6(0x221)]='';return;}else{const _0x235296=ImageManager[_0x3698f6(0x25a)](_0x4c9466);this[_0x3698f6(0xc5b)][_0x3698f6(0xc46)]=0x0,_0x235296[_0x3698f6(0xb47)](this[_0x3698f6(0x900)][_0x3698f6(0xaf2)](this,_0x235296));}}},Window_BattleStatus['prototype']['processBorderActor']=function(_0x589ca4){const _0x3a031b=_0x58cf34;this[_0x3a031b(0x783)]=0x14,this['_borderPortraitSprite']['bitmap']=_0x589ca4;SceneManager[_0x3a031b(0xb85)][_0x3a031b(0x692)]()?(this[_0x3a031b(0xc5b)]['x']=0x0,this[_0x3a031b(0x709)]=Math[_0x3a031b(0xafc)](_0x589ca4['width']/0x2)):(this['_borderPortraitSprite']['x']=this['width'],this[_0x3a031b(0x709)]=this['width']*0x3/0x4);this[_0x3a031b(0xc5b)][_0x3a031b(0xc46)]=0x0,this[_0x3a031b(0xc5b)]['y']=this['y']+this[_0x3a031b(0x725)];const _0x3220ff=BattleManager[_0x3a031b(0x2fd)]();_0x3220ff&&(this[_0x3a031b(0x709)]+=_0x3220ff['getBattlePortraitOffsetX'](),this[_0x3a031b(0xc5b)]['y']+=_0x3220ff[_0x3a031b(0x90f)]());},Window_BattleStatus[_0x58cf34(0x8ef)]['updateBorderSprite']=function(){const _0x394171=_0x58cf34;if(this[_0x394171(0x783)]>0x0){const _0x2834d=this[_0x394171(0x783)],_0x2e4185=this[_0x394171(0xc5b)];_0x2e4185['x']=(_0x2e4185['x']*(_0x2834d-0x1)+this[_0x394171(0x709)])/_0x2834d,_0x2e4185[_0x394171(0xc46)]=(_0x2e4185[_0x394171(0xc46)]*(_0x2834d-0x1)+0xff)/_0x2834d,this[_0x394171(0x783)]--;}},Window_BattleStatus[_0x58cf34(0x8ef)]['updateEffectContainers']=function(){const _0x2aef0d=_0x58cf34;return;this[_0x2aef0d(0x6cb)]&&(this[_0x2aef0d(0x6cb)]['x']=this['x'],this[_0x2aef0d(0x6cb)]['y']=this['y']),this[_0x2aef0d(0x9e4)]&&(this['_damageContainer']['x']=this['x'],this[_0x2aef0d(0x9e4)]['y']=this['y']);},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x3f1)]=function(){const _0x154273=_0x58cf34,_0x239cb0=VisuMZ[_0x154273(0xa6b)][_0x154273(0xb05)][_0x154273(0x272)];if(_0x239cb0[_0x154273(0x2e6)]){const _0x41dc93=new Sprite();_0x41dc93['bitmap']=ImageManager['loadSystem'](_0x239cb0[_0x154273(0x2e6)]),_0x41dc93['x']=_0x239cb0[_0x154273(0xa61)]||0x0,_0x41dc93['y']=_0x239cb0['StatusWindowAttachmentBackOffsetY']||0x0,this['addChildToBack'](_0x41dc93),this[_0x154273(0xbd4)]=_0x41dc93;}if(_0x239cb0[_0x154273(0x896)]){const _0x32a469=new Sprite();_0x32a469['bitmap']=ImageManager[_0x154273(0xace)](_0x239cb0['StatusWindowAttachmentFront']),_0x32a469['x']=_0x239cb0[_0x154273(0xc76)]||0x0,_0x32a469['y']=_0x239cb0[_0x154273(0x2dc)]||0x0,this[_0x154273(0x3ac)](_0x32a469),this[_0x154273(0x6fb)]=_0x32a469;}},Window_BattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x844)]=function(){const _0x169258=_0x58cf34;this[_0x169258(0x6fb)]&&this[_0x169258(0x3ac)](this['_frontAttachmentSprite']),this[_0x169258(0xbd4)]&&this[_0x169258(0x929)](this[_0x169258(0xbd4)]);},Window_BattleActor[_0x58cf34(0x8ef)][_0x58cf34(0x729)]=function(){return this['isActionSelectionValid']();},Window_BattleActor[_0x58cf34(0x8ef)]['isActionSelectionValid']=function(){const _0x1323bf=_0x58cf34,_0x3c8b7b=BattleManager['inputtingAction']();if(!_0x3c8b7b)return!![];if(!_0x3c8b7b['item']())return!![];const _0x9ffbd5=this[_0x1323bf(0x2fd)](this['index']()),_0x33f403=_0x3c8b7b[_0x1323bf(0xb8a)]()[_0x1323bf(0x841)];if(_0x3c8b7b[_0x1323bf(0x97c)]()){if(_0x9ffbd5===BattleManager['actor']())return![];}if(_0x3c8b7b['isForDeadFriend']()){if(!_0x9ffbd5['isDead']())return![];}if(_0x3c8b7b['isForAliveFriend']()){if(!_0x9ffbd5[_0x1323bf(0x328)]())return![];}return!![];},Window_BattleActor['prototype']['setEnemyWindowMode']=function(_0x172ed6){const _0x9c159f=_0x58cf34;this[_0x9c159f(0xc6f)]=_0x172ed6;},VisuMZ[_0x58cf34(0xa6b)]['Window_BattleActor_processTouch']=Window_BattleActor[_0x58cf34(0x8ef)]['processTouch'],Window_BattleActor[_0x58cf34(0x8ef)]['processTouch']=function(){const _0x139799=_0x58cf34;Window_BattleStatus['prototype'][_0x139799(0x59e)][_0x139799(0x9a4)](this),this['_enemyWindowMode']?this['processEnemyModeTouchBattleCore']():VisuMZ[_0x139799(0xa6b)][_0x139799(0x554)][_0x139799(0x9a4)](this);},Window_BattleActor[_0x58cf34(0x8ef)]['processEnemyModeTouchBattleCore']=function(){const _0x2cc5d5=_0x58cf34,_0xf83201=SceneManager[_0x2cc5d5(0xb85)][_0x2cc5d5(0xa6e)];if(!_0xf83201)return;this[_0x2cc5d5(0x8bb)]=![];const _0x76bd35=this[_0x2cc5d5(0xa51)]();if(_0x76bd35>=0x0){this[_0x2cc5d5(0x755)](_0x76bd35);if(TouchInput['isClicked']()){const _0x1e6eb7=$gameParty[_0x2cc5d5(0x7b4)]()[_0x76bd35],_0x76e5cd=_0xf83201[_0x2cc5d5(0x8ab)][_0x2cc5d5(0xccf)](_0x1e6eb7);_0x76e5cd>=0x0&&(_0xf83201[_0x2cc5d5(0x755)](_0x76e5cd),_0xf83201['processOk']());}}},Window_BattleActor[_0x58cf34(0x8ef)][_0x58cf34(0xa82)]=function(){const _0x9d1a1=_0x58cf34;this[_0x9d1a1(0xc6f)]&&(this[_0x9d1a1(0x2bc)]++,this[_0x9d1a1(0x6c5)]=!![]);const _0x16c920=Window_BattleStatus[_0x9d1a1(0x8ef)][_0x9d1a1(0xa82)][_0x9d1a1(0x9a4)](this);return this[_0x9d1a1(0xc6f)]&&(this[_0x9d1a1(0x6c5)]=![]),_0x16c920;},VisuMZ['BattleCore'][_0x58cf34(0x27c)]=Window_BattleActor[_0x58cf34(0x8ef)]['show'],Window_BattleActor[_0x58cf34(0x8ef)]['show']=function(){const _0x531e26=_0x58cf34;VisuMZ[_0x531e26(0xa6b)][_0x531e26(0x27c)][_0x531e26(0x9a4)](this);const _0x3cba53=BattleManager['inputtingAction']();if(_0x3cba53){const _0x1d9c04=$gameParty['aliveMembers']();_0x3cba53[_0x531e26(0x324)]()&&_0x1d9c04[_0x531e26(0x3eb)]>0x1&&this[_0x531e26(0x5b3)]('pagedown',this[_0x531e26(0x9ec)][_0x531e26(0xaf2)](this));}},VisuMZ['BattleCore'][_0x58cf34(0x389)]=Window_BattleActor[_0x58cf34(0x8ef)][_0x58cf34(0x48f)],Window_BattleActor['prototype'][_0x58cf34(0x48f)]=function(){const _0x14e9e1=_0x58cf34;VisuMZ[_0x14e9e1(0xa6b)][_0x14e9e1(0x389)][_0x14e9e1(0x9a4)](this),delete this['_handlers'][_0x14e9e1(0xbaa)],delete this['_handlers'][_0x14e9e1(0x629)];},Window_BattleActor[_0x58cf34(0x8ef)][_0x58cf34(0x9ec)]=function(){const _0x18ba25=_0x58cf34,_0xa46cee=BattleManager[_0x18ba25(0xc4f)]();if(_0xa46cee)_0xa46cee['setTargetBattlerKey'](_0x18ba25(0xc0e));this[_0x18ba25(0x974)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x4bc)]=Window_BattleEnemy[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)],Window_BattleEnemy[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)]=function(_0x37901b){const _0x249bdc=_0x58cf34;this[_0x249bdc(0x636)]=null,VisuMZ[_0x249bdc(0xa6b)][_0x249bdc(0x4bc)][_0x249bdc(0x9a4)](this,_0x37901b);if(Imported[_0x249bdc(0xb4a)]){if(VisuMZ[_0x249bdc(0x2f8)][_0x249bdc(0x7d2)]<1.12){let _0x3930f1='';_0x3930f1+=_0x249bdc(0x51f),_0x3930f1+=_0x249bdc(0xcc5),_0x3930f1+=_0x249bdc(0xb5e),alert(_0x3930f1),SceneManager[_0x249bdc(0xcb5)]();}}},Window_BattleEnemy[_0x58cf34(0x8ef)][_0x58cf34(0x259)]=function(){const _0x1d5f7c=_0x58cf34;return this[_0x1d5f7c(0x811)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb29)]=Window_BattleEnemy[_0x58cf34(0x8ef)][_0x58cf34(0x68d)],Window_BattleEnemy[_0x58cf34(0x8ef)][_0x58cf34(0x68d)]=function(){const _0x311480=_0x58cf34;VisuMZ[_0x311480(0xa6b)]['Window_BattleEnemy_show'][_0x311480(0x9a4)](this),this['y']=Graphics['height']*0xa,this[_0x311480(0x77b)]()&&this[_0x311480(0x632)]();},VisuMZ['BattleCore'][_0x58cf34(0x5d8)]=Window_BattleEnemy[_0x58cf34(0x8ef)][_0x58cf34(0x48f)],Window_BattleEnemy['prototype'][_0x58cf34(0x48f)]=function(){const _0x2315a7=_0x58cf34;VisuMZ[_0x2315a7(0xa6b)]['Window_BattleEnemy_hide'][_0x2315a7(0x9a4)](this),$gameParty[_0x2315a7(0x755)](null),delete this[_0x2315a7(0x2f6)][_0x2315a7(0xbaa)],delete this['_handlers'][_0x2315a7(0x629)];},Window_BattleEnemy[_0x58cf34(0x8ef)][_0x58cf34(0x5d0)]=function(){const _0xa0ba=_0x58cf34;let _0x55942f=$gameTroop[_0xa0ba(0x565)]();const _0x583375=BattleManager[_0xa0ba(0xc4f)]();if(_0x583375){_0x583375[_0xa0ba(0x324)]()&&_0x55942f[_0xa0ba(0x3eb)]>0x1&&this[_0xa0ba(0x5b3)]('pageup',this[_0xa0ba(0x2e7)][_0xa0ba(0xaf2)](this));if(_0x583375[_0xa0ba(0x54d)]()){const _0x41b4aa=$gameParty[_0xa0ba(0x565)]();_0x55942f=_0x55942f[_0xa0ba(0xb59)](_0x41b4aa),_0x583375[_0xa0ba(0x324)]()&&_0x41b4aa[_0xa0ba(0x3eb)]>0x1&&this[_0xa0ba(0x5b3)](_0xa0ba(0x629),this['selectAllActors'][_0xa0ba(0xaf2)](this));}}return _0x55942f;},Window_BattleEnemy[_0x58cf34(0x8ef)]['refresh']=function(){const _0x3ea1a3=_0x58cf34;this['_enemies']=this[_0x3ea1a3(0x5d0)](),this[_0x3ea1a3(0xbc2)](),Window_Selectable[_0x3ea1a3(0x8ef)][_0x3ea1a3(0x7ff)][_0x3ea1a3(0x9a4)](this);},Window_BattleEnemy[_0x58cf34(0x8ef)][_0x58cf34(0xbc2)]=function(){const _0xe599cd=_0x58cf34;this[_0xe599cd(0x8ab)][_0xe599cd(0xa67)]((_0x45a0cd,_0x5198cd)=>{const _0x4f0cf8=_0xe599cd;if(_0x45a0cd[_0x4f0cf8(0x40c)]()!==_0x5198cd['isActor']()){if(_0x45a0cd[_0x4f0cf8(0x2d8)]())return-0x1;if(_0x5198cd['isEnemy']())return 0x1;}if(_0x45a0cd[_0x4f0cf8(0x40c)]()&&_0x5198cd[_0x4f0cf8(0x40c)]())return _0x45a0cd[_0x4f0cf8(0x94f)]()-_0x5198cd[_0x4f0cf8(0x94f)]();return _0x45a0cd[_0x4f0cf8(0x399)]()[_0x4f0cf8(0xc19)]===_0x5198cd[_0x4f0cf8(0x399)]()[_0x4f0cf8(0xc19)]?_0x45a0cd[_0x4f0cf8(0x399)]()[_0x4f0cf8(0xa73)]-_0x5198cd['battler']()['_baseY']:_0x45a0cd[_0x4f0cf8(0x399)]()['_baseX']-_0x5198cd[_0x4f0cf8(0x399)]()[_0x4f0cf8(0xc19)];}),SceneManager[_0xe599cd(0x52c)]()&&this[_0xe599cd(0x8ab)][_0xe599cd(0xbf1)]();},Window_BattleEnemy['prototype'][_0x58cf34(0x7dd)]=function(){const _0xec33da=_0x58cf34,_0x5bc7be=VisuMZ[_0xec33da(0xa6b)][_0xec33da(0xb05)]['Enemy'];_0x5bc7be[_0xec33da(0x1f1)]?this[_0xec33da(0x7a3)]():this[_0xec33da(0x7e3)]();},Window_BattleEnemy[_0x58cf34(0x8ef)]['autoSelectLastSelected']=function(){const _0x12157c=_0x58cf34,_0x55fe27=BattleManager[_0x12157c(0xc4f)]();if(_0x55fe27&&_0x55fe27[_0x12157c(0x54d)]()){if(_0x55fe27[_0x12157c(0xb5f)]()){if(this['_lastActor']&&this[_0x12157c(0x8ab)][_0x12157c(0x375)](this['_lastActor'])){const _0x130b92=this[_0x12157c(0x8ab)][_0x12157c(0xccf)](this[_0x12157c(0xc2e)]);return this[_0x12157c(0x1cd)](_0x130b92);}else return this[_0x12157c(0x7e3)]();}}if(this[_0x12157c(0x636)]&&this[_0x12157c(0x8ab)][_0x12157c(0x375)](this[_0x12157c(0x636)])){const _0x4d354e=this[_0x12157c(0x8ab)]['indexOf'](this['_lastEnemy']);this[_0x12157c(0x1cd)](_0x4d354e);}else this[_0x12157c(0x7e3)]();},Window_BattleEnemy[_0x58cf34(0x8ef)][_0x58cf34(0x7e3)]=function(){const _0x496d70=_0x58cf34,_0x171f37=BattleManager[_0x496d70(0xc4f)]();if(_0x171f37&&_0x171f37[_0x496d70(0x54d)]()){const _0x3e73ad=$gameParty['aliveMembers']()[0x0];let _0x55f8b7=this[_0x496d70(0x8ab)]['indexOf'](_0x3e73ad);const _0x562548=_0x171f37['item']()[_0x496d70(0x303)];if(_0x562548[_0x496d70(0xcbb)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x496d70(0x1cd)](_0x55f8b7);return;}else{if(_0x562548[_0x496d70(0xcbb)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x496d70(0x1cd)](_0x55f8b7-0x1);return;}}}const _0x585112=VisuMZ[_0x496d70(0xa6b)]['Settings']['Enemy'];let _0xc5610d=![];$gameSystem[_0x496d70(0xc41)]()?_0xc5610d=_0x585112['SideviewSelect']:_0xc5610d=_0x585112[_0x496d70(0x361)],this['forceSelect'](_0xc5610d?this[_0x496d70(0x811)]()-0x1:0x0);},Window_BattleEnemy[_0x58cf34(0x8ef)][_0x58cf34(0x2d3)]=function(){const _0x5bf40f=_0x58cf34;Window_Selectable[_0x5bf40f(0x8ef)][_0x5bf40f(0x2d3)]['call'](this);if(!this[_0x5bf40f(0xc20)]())return;if(this[_0x5bf40f(0xc20)]()[_0x5bf40f(0x2d8)]())this[_0x5bf40f(0x636)]=this[_0x5bf40f(0xc20)]();if(this['enemy']()[_0x5bf40f(0x40c)]())this[_0x5bf40f(0xc2e)]=this[_0x5bf40f(0xc20)]();},Window_BattleEnemy['prototype'][_0x58cf34(0x755)]=function(_0x370fea){const _0x4acc0d=_0x58cf34;Window_Selectable['prototype'][_0x4acc0d(0x755)][_0x4acc0d(0x9a4)](this,_0x370fea),$gameTroop['select'](this[_0x4acc0d(0xc20)]()),$gameParty[_0x4acc0d(0x755)](this[_0x4acc0d(0xc20)]());if(!this[_0x4acc0d(0xc20)]())return;if(this[_0x4acc0d(0x77b)]()){const _0x1d7858=SceneManager[_0x4acc0d(0xb85)][_0x4acc0d(0x79b)];this['enemy']()[_0x4acc0d(0x40c)]()?_0x1d7858[_0x4acc0d(0x755)](this[_0x4acc0d(0xc20)]()['index']()):_0x1d7858[_0x4acc0d(0x9a3)]();}},Window_BattleEnemy[_0x58cf34(0x8ef)]['meetsSelectFrontviewActorConditions']=function(){const _0x22a379=_0x58cf34;if(!this[_0x22a379(0x1e4)])return![];if($gameSystem['isSideView']())return![];const _0x40501c=SceneManager[_0x22a379(0xb85)][_0x22a379(0x9df)](),_0x36a691=[_0x22a379(0x246),'list','xp',_0x22a379(0x445),_0x22a379(0xa21)];return _0x36a691[_0x22a379(0x375)](_0x40501c);},Window_BattleEnemy[_0x58cf34(0x8ef)]['openBattleActorWindow']=function(){const _0x5286c8=_0x58cf34,_0x3b1567=SceneManager['_scene'][_0x5286c8(0x79b)];_0x3b1567[_0x5286c8(0x68d)](),_0x3b1567['setEnemyWindowMode'](!![]),_0x3b1567[_0x5286c8(0x7ff)](),_0x3b1567[_0x5286c8(0x9a3)]();const _0x16ad6f=SceneManager[_0x5286c8(0xb85)][_0x5286c8(0x9df)](),_0x3617cb=['xp',_0x5286c8(0x445),_0x5286c8(0xa21)];if(_0x3617cb['includes'](_0x16ad6f)){const _0x2f8d3a=SceneManager['_scene'][_0x5286c8(0x4f1)];_0x2f8d3a[_0x5286c8(0x527)]['y']=0x0;}},Window_BattleEnemy[_0x58cf34(0x8ef)]['closeBattleActorWindow']=function(){const _0x54d0e0=_0x58cf34,_0x124c2b=SceneManager['_scene']['_actorWindow'];_0x124c2b[_0x54d0e0(0x48f)](),_0x124c2b[_0x54d0e0(0x921)](![]),_0x124c2b[_0x54d0e0(0x9a3)]();const _0x51a57c=SceneManager[_0x54d0e0(0xb85)][_0x54d0e0(0x4f1)];_0x51a57c[_0x54d0e0(0x527)]['y']=0x1;},Window_BattleEnemy[_0x58cf34(0x8ef)][_0x58cf34(0x2e7)]=function(){const _0x5ec0f8=_0x58cf34,_0x2a7683=BattleManager[_0x5ec0f8(0xc4f)]();if(_0x2a7683)_0x2a7683['setTargetBattlerKey']('all\x20enemies');this['processOk']();},Window_BattleEnemy[_0x58cf34(0x8ef)][_0x58cf34(0x9ec)]=function(){const _0x4ce7cb=_0x58cf34,_0x21c143=BattleManager[_0x4ce7cb(0xc4f)]();if(_0x21c143)_0x21c143['setTargetBattlerKey']('all\x20actors');this['processOk']();},Window_BattleEnemy[_0x58cf34(0x8ef)][_0x58cf34(0x729)]=function(){const _0x4caddc=_0x58cf34;return this[_0x4caddc(0x367)]();},Window_BattleEnemy['prototype']['isActionSelectionValid']=function(){const _0x304cd9=_0x58cf34,_0x268d5d=BattleManager['inputtingAction']();if(!_0x268d5d)return!![];if(!_0x268d5d['item']())return!![];const _0x51ea3b=this[_0x304cd9(0xc20)](),_0x2fd045=_0x268d5d['item']()[_0x304cd9(0x841)];if(_0x268d5d['isForNotUser']()){if(_0x51ea3b===BattleManager[_0x304cd9(0x2fd)]())return![];}return!![];},Window_BattleItem[_0x58cf34(0x8ef)][_0x58cf34(0x375)]=function(_0x2d96ca){const _0x2e4963=_0x58cf34;if(!_0x2d96ca)return![];return _0x2d96ca['occasion']===0x0||_0x2d96ca[_0x2e4963(0x7f6)]===0x1;};function Window_AutoBattleCancel(){const _0x530a97=_0x58cf34;this[_0x530a97(0xb4e)](...arguments);}Window_AutoBattleCancel['prototype']=Object[_0x58cf34(0x5fa)](Window_Base[_0x58cf34(0x8ef)]),Window_AutoBattleCancel[_0x58cf34(0x8ef)][_0x58cf34(0x408)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x58cf34(0x8ef)]['initialize']=function(_0x4e9ae1){const _0x98a061=_0x58cf34;Window_Base[_0x98a061(0x8ef)][_0x98a061(0xb4e)][_0x98a061(0x9a4)](this,_0x4e9ae1),this[_0x98a061(0x658)](this[_0x98a061(0x1e8)]()),this[_0x98a061(0x7ff)]();},Window_AutoBattleCancel[_0x58cf34(0x8ef)][_0x58cf34(0x1e8)]=function(){const _0x29c5ae=_0x58cf34;return VisuMZ['BattleCore'][_0x29c5ae(0xb05)][_0x29c5ae(0x96a)][_0x29c5ae(0x909)];},Window_AutoBattleCancel[_0x58cf34(0x8ef)]['refresh']=function(){const _0x4c73c8=_0x58cf34;this[_0x4c73c8(0x852)][_0x4c73c8(0xcdf)]();const _0x19fb46=VisuMZ[_0x4c73c8(0xa6b)][_0x4c73c8(0xb05)][_0x4c73c8(0x96a)][_0x4c73c8(0x890)],_0x4751bc=_0x19fb46['format'](this['okButtonText'](),this[_0x4c73c8(0xbf6)]()),_0x3ce8bf=this[_0x4c73c8(0xc2a)](_0x4751bc)['width'],_0x14ae21=Math['floor']((this[_0x4c73c8(0x6c7)]-_0x3ce8bf)/0x2);this[_0x4c73c8(0x6cd)](_0x4751bc,_0x14ae21,0x0,_0x3ce8bf);},Window_AutoBattleCancel[_0x58cf34(0x8ef)][_0x58cf34(0xc7a)]=function(){const _0x3a8a15=_0x58cf34;return Imported[_0x3a8a15(0xaa1)]?TextManager['getInputButtonString']('ok'):VisuMZ[_0x3a8a15(0xa6b)][_0x3a8a15(0xb05)][_0x3a8a15(0x96a)][_0x3a8a15(0x5d5)];},Window_AutoBattleCancel[_0x58cf34(0x8ef)][_0x58cf34(0xbf6)]=function(){const _0x52d29f=_0x58cf34;return Imported[_0x52d29f(0xaa1)]?TextManager[_0x52d29f(0xc17)](_0x52d29f(0x3aa)):VisuMZ[_0x52d29f(0xa6b)][_0x52d29f(0xb05)]['AutoBattle'][_0x52d29f(0x958)];},Window_AutoBattleCancel[_0x58cf34(0x8ef)][_0x58cf34(0x6a2)]=function(){const _0x45da03=_0x58cf34;Window_Base[_0x45da03(0x8ef)][_0x45da03(0x6a2)][_0x45da03(0x9a4)](this),this[_0x45da03(0x706)](),this['updateCancel']();},Window_AutoBattleCancel[_0x58cf34(0x8ef)][_0x58cf34(0x706)]=function(){const _0x51492c=_0x58cf34;this[_0x51492c(0x1e4)]=BattleManager[_0x51492c(0x7d4)];},Window_AutoBattleCancel[_0x58cf34(0x8ef)][_0x58cf34(0x684)]=function(){const _0x4ed337=_0x58cf34;if(!BattleManager['_autoBattle'])return;(Input['isTriggered']('ok')||Input['isTriggered']('cancel')||TouchInput[_0x4ed337(0x2b5)]()||TouchInput['isCancelled']())&&(SoundManager[_0x4ed337(0x88a)](),BattleManager[_0x4ed337(0x7d4)]=![],Input[_0x4ed337(0xcdf)](),TouchInput[_0x4ed337(0xcdf)]());};function _0x16bc(_0x47bb71,_0x56e066){const _0x361302=_0x3613();return _0x16bc=function(_0x16bc05,_0x3d8f1e){_0x16bc05=_0x16bc05-0x1bf;let _0x33287e=_0x361302[_0x16bc05];return _0x33287e;},_0x16bc(_0x47bb71,_0x56e066);}function Window_EnemyName(){const _0x5af69e=_0x58cf34;this[_0x5af69e(0xb4e)](...arguments);}Window_EnemyName[_0x58cf34(0x8ef)]=Object[_0x58cf34(0x5fa)](Window_StatusBase[_0x58cf34(0x8ef)]),Window_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0x408)]=Window_EnemyName,Window_EnemyName[_0x58cf34(0x8ef)]['initialize']=function(_0x56ac46){const _0x4b5a15=_0x58cf34;this[_0x4b5a15(0x393)]=_0x56ac46,this[_0x4b5a15(0x7d8)]='';const _0x49916b=new Rectangle(0x0,0x0,Graphics[_0x4b5a15(0x9ad)],this[_0x4b5a15(0x7b1)]()*0x4);Window_StatusBase[_0x4b5a15(0x8ef)][_0x4b5a15(0xb4e)]['call'](this,_0x49916b),this[_0x4b5a15(0x658)](0x2),this['contentsOpacity']=0x0;},Window_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0x789)]=function(){const _0x23a02c=_0x58cf34;this[_0x23a02c(0xa80)]=0x0;},Window_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0xc20)]=function(){const _0x47e9ab=_0x58cf34;return $gameTroop[_0x47e9ab(0x7b4)]()[this[_0x47e9ab(0x393)]];},Window_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0x6a2)]=function(){const _0x3311c5=_0x58cf34;Window_StatusBase[_0x3311c5(0x8ef)]['update']['call'](this),this['enemy']()&&this[_0x3311c5(0xc20)]()['name']()!==this[_0x3311c5(0x7d8)]&&(this[_0x3311c5(0x7d8)]=this[_0x3311c5(0xc20)]()[_0x3311c5(0xc22)](),this[_0x3311c5(0x7ff)]()),this[_0x3311c5(0xc39)](),this[_0x3311c5(0x2a5)]();},Window_EnemyName['prototype'][_0x58cf34(0xc39)]=function(){const _0x44fff7=_0x58cf34;if(!this[_0x44fff7(0xc20)]()){if(this[_0x44fff7(0x2ad)]>0x0)this[_0x44fff7(0x2ad)]-=0x10;}else{if(this[_0x44fff7(0xc20)]()['isDead']()){if(this[_0x44fff7(0x2ad)]>0x0)this[_0x44fff7(0x2ad)]-=0x10;}else{if(SceneManager[_0x44fff7(0xb85)][_0x44fff7(0xa6e)]&&SceneManager[_0x44fff7(0xb85)][_0x44fff7(0xa6e)][_0x44fff7(0x6c5)]&&SceneManager[_0x44fff7(0xb85)]['_enemyWindow'][_0x44fff7(0x8ab)]['includes'](this[_0x44fff7(0xc20)]())){if(this['contentsOpacity']<0xff)this[_0x44fff7(0x2ad)]+=0x10;}else this[_0x44fff7(0x2ad)]>0x0&&(this['contentsOpacity']-=0x10);}}},Window_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0x2a5)]=function(){const _0x5473f8=_0x58cf34;if(!this['enemy']())return;SceneManager[_0x5473f8(0x52c)]()?this['x']=Graphics[_0x5473f8(0x9ad)]-this[_0x5473f8(0xc20)]()[_0x5473f8(0x399)]()[_0x5473f8(0xc19)]:this['x']=this['enemy']()['battler']()[_0x5473f8(0xc19)];this['x']-=Math[_0x5473f8(0x92e)](this[_0x5473f8(0xc78)]/0x2),this['y']=this[_0x5473f8(0xc20)]()[_0x5473f8(0x399)]()[_0x5473f8(0xa73)]-Math['round'](this[_0x5473f8(0x7b1)]()*1.5);const _0xd2cc85=VisuMZ[_0x5473f8(0xa6b)][_0x5473f8(0xb05)][_0x5473f8(0x48b)];this['x']+=_0xd2cc85[_0x5473f8(0x4f2)]||0x0,this['y']+=_0xd2cc85[_0x5473f8(0x40e)]||0x0;},Window_EnemyName[_0x58cf34(0x8ef)][_0x58cf34(0x9d7)]=function(){const _0x254d5d=_0x58cf34;Window_Base[_0x254d5d(0x8ef)][_0x254d5d(0x9d7)][_0x254d5d(0x9a4)](this),this[_0x254d5d(0x852)][_0x254d5d(0xac1)]=VisuMZ[_0x254d5d(0xa6b)]['Settings']['Enemy'][_0x254d5d(0x558)];},Window_EnemyName['prototype']['refresh']=function(){const _0x5910d4=_0x58cf34;Window_StatusBase[_0x5910d4(0x8ef)][_0x5910d4(0x7ff)][_0x5910d4(0x9a4)](this),this['contents']['clear']();if(!this[_0x5910d4(0xc20)]())return;this['drawEnemyName']();},Window_EnemyName[_0x58cf34(0x8ef)]['drawEnemyName']=function(){const _0x239743=_0x58cf34;this[_0x239743(0x7d8)]=this['enemy']()['name']();const _0x586a18=this[_0x239743(0xc2a)](this[_0x239743(0x7d8)])['width'],_0x235723=Math[_0x239743(0x92e)]((this[_0x239743(0x6c7)]-_0x586a18)/0x2);this[_0x239743(0x6cd)](this['_text'],_0x235723,0x0,_0x586a18+0x8);},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x9af)]=function(){const _0x2f88c0=_0x58cf34;return VisuMZ[_0x2f88c0(0xa6b)][_0x2f88c0(0xb05)]['BattleLog'][_0x2f88c0(0xa9f)];},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xc00)]=function(){const _0x50c319=_0x58cf34;return VisuMZ[_0x50c319(0xa6b)][_0x50c319(0xb05)][_0x50c319(0xaca)][_0x50c319(0x81b)];},Window_BattleLog[_0x58cf34(0x8ef)]['backColor']=function(){const _0x163591=_0x58cf34;return VisuMZ[_0x163591(0xa6b)][_0x163591(0xb05)][_0x163591(0xaca)][_0x163591(0xabb)];},Window_BattleLog['prototype'][_0x58cf34(0x1d8)]=function(){return![];},Window_BattleLog[_0x58cf34(0x8ef)]['actionEffect']=function(_0xf315ba,_0x778097){const _0x279fba=_0x58cf34;this[_0x279fba(0x2b1)](_0x279fba(0x936)),BattleManager['invokeAction'](_0xf315ba,_0x778097),this[_0x279fba(0x36d)]();},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x8b2)]=function(_0x36af78,_0x1b9272,_0x188a43){const _0x49eeb3=_0x58cf34;this[_0x49eeb3(0x2b1)](_0x49eeb3(0x936)),BattleManager['emulateAction'](_0x36af78,_0x1b9272,_0x188a43),this[_0x49eeb3(0x36d)]();},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x936)]=function(){this['callNextMethod']();},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x6db)]=function(_0x11a21e){const _0x2225ee=_0x58cf34,_0x554e88=Array[_0x2225ee(0x8ef)][_0x2225ee(0x2c3)][_0x2225ee(0x9a4)](arguments,0x1),_0x4c16b0={'name':_0x11a21e,'params':_0x554e88},_0xd9a972=this['_methods'][_0x2225ee(0x5a0)](_0x560b9f=>_0x560b9f[_0x2225ee(0xc22)])[_0x2225ee(0xccf)](_0x2225ee(0x936));_0xd9a972>=0x0?this[_0x2225ee(0x81f)][_0x2225ee(0x5e4)](_0xd9a972,0x0,_0x4c16b0):this['_methods'][_0x2225ee(0x6db)](_0x4c16b0);},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x2b1)]=function(_0x576ff7){const _0x51028f=_0x58cf34,_0x565158=Array[_0x51028f(0x8ef)]['slice'][_0x51028f(0x9a4)](arguments,0x1);this[_0x51028f(0x81f)][_0x51028f(0x2b1)]({'name':_0x576ff7,'params':_0x565158});},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xbef)]=function(){const _0x5d2082=_0x58cf34;if(!$gameTemp[_0x5d2082(0x845)]())return;console['log'](this['_methods'][_0x5d2082(0x5a0)](_0x150244=>_0x150244[_0x5d2082(0xc22)])[_0x5d2082(0x846)]('\x0a'));},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb3e)]=Window_BattleLog[_0x58cf34(0x8ef)]['refresh'],Window_BattleLog[_0x58cf34(0x8ef)]['refresh']=function(){const _0x4302d1=_0x58cf34;this[_0x4302d1(0x1d4)]=!![];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x715)]=Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x6a2)],Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x6a2)]=function(){const _0x518373=_0x58cf34;VisuMZ[_0x518373(0xa6b)]['Window_BattleLog_update'][_0x518373(0x9a4)](this);if(this[_0x518373(0x1d4)])this['processRefresh']();},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x590)]=function(){const _0x35d598=_0x58cf34;this[_0x35d598(0x1d4)]=![],VisuMZ[_0x35d598(0xa6b)][_0x35d598(0xb3e)][_0x35d598(0x9a4)](this);},Window_BattleLog[_0x58cf34(0x8ef)]['drawLineText']=function(_0x10d8d8){const _0x3e3512=_0x58cf34;let _0x220c13=VisuMZ['BattleCore']['Settings'][_0x3e3512(0xaca)][_0x3e3512(0x4c5)][_0x3e3512(0x5b9)]()['trim'](),_0x24a6d4=this[_0x3e3512(0xcd5)][_0x10d8d8];if(_0x24a6d4[_0x3e3512(0xcbb)](/<LEFT>/i))_0x220c13=_0x3e3512(0xa93);else{if(_0x24a6d4[_0x3e3512(0xcbb)](/<CENTER>/i))_0x220c13=_0x3e3512(0x318);else _0x24a6d4[_0x3e3512(0xcbb)](/<RIGHT>/i)&&(_0x220c13='right');}_0x24a6d4=_0x24a6d4[_0x3e3512(0x6e4)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x24a6d4=_0x24a6d4[_0x3e3512(0x6e4)](/\\I\[0\]/gi,'');const _0x338daa=this[_0x3e3512(0x251)](_0x10d8d8);this[_0x3e3512(0x852)][_0x3e3512(0xa53)](_0x338daa['x'],_0x338daa['y'],_0x338daa[_0x3e3512(0xc78)],_0x338daa[_0x3e3512(0x725)]);const _0x3848ca=this[_0x3e3512(0xc2a)](_0x24a6d4)[_0x3e3512(0xc78)];let _0x3351ef=_0x338daa['x'];if(_0x220c13==='center')_0x3351ef+=(_0x338daa[_0x3e3512(0xc78)]-_0x3848ca)/0x2;else _0x220c13===_0x3e3512(0x25b)&&(_0x3351ef+=_0x338daa['width']-_0x3848ca);this[_0x3e3512(0x6cd)](_0x24a6d4,_0x3351ef,_0x338daa['y'],_0x3848ca+0x8);},Window_BattleLog[_0x58cf34(0x8ef)]['addText']=function(_0x47c5d8){const _0x11f2e3=_0x58cf34;this[_0x11f2e3(0xcd5)]['push'](_0x47c5d8),this['refresh'](),this['callNextMethod']();},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xbc0)]=function(){const _0x4a596f=_0x58cf34;let _0x9d813b=![];switch(this[_0x4a596f(0xaa8)]){case _0x4a596f(0x1d5):_0x9d813b=this[_0x4a596f(0x5ae)][_0x4a596f(0x6ba)]();break;case'movement':_0x9d813b=this[_0x4a596f(0x5ae)]['isAnyoneMoving']();break;case'animation':_0x9d813b=this[_0x4a596f(0x5ae)][_0x4a596f(0x8a6)]();break;case _0x4a596f(0x8bd):_0x9d813b=this['_spriteset'][_0x4a596f(0xa40)]();break;case'jump':_0x9d813b=this[_0x4a596f(0x5ae)][_0x4a596f(0x6ed)]();break;case _0x4a596f(0xc46):_0x9d813b=this[_0x4a596f(0x5ae)][_0x4a596f(0xa4c)]();break;}return!_0x9d813b&&(this[_0x4a596f(0xaa8)]=''),_0x9d813b;},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x5a2)]=function(){const _0x3e4d22=_0x58cf34;this[_0x3e4d22(0x9d6)](_0x3e4d22(0xaa6));},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x89d)]=function(){const _0x558b80=_0x58cf34;this[_0x558b80(0x9d6)]('float');},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x487)]=function(){this['setWaitMode']('jump');},Window_BattleLog[_0x58cf34(0x8ef)]['waitForOpacity']=function(){const _0x1d32b9=_0x58cf34;this[_0x1d32b9(0x9d6)](_0x1d32b9(0xc46));},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x553)]=function(){const _0x4eac43=_0x58cf34,_0x103ddb=VisuMZ[_0x4eac43(0xa6b)][_0x4eac43(0xb05)][_0x4eac43(0xaca)];if(!_0x103ddb['StartTurnShow'])return;this[_0x4eac43(0x6db)](_0x4eac43(0x747),_0x103ddb[_0x4eac43(0x561)][_0x4eac43(0x1d3)]($gameTroop['turnCount']())),this[_0x4eac43(0x6db)](_0x4eac43(0xcd7),_0x103ddb[_0x4eac43(0x50a)]),this['push'](_0x4eac43(0xcdf));};var $subject,$action,$targets;Window_BattleLog['prototype'][_0x58cf34(0x65e)]=function(_0x107bac,_0x3e609a,_0x45e76c){const _0x5c3f68=_0x58cf34;$subject=_0x107bac,$action=_0x3e609a,$targets=_0x45e76c,this[_0x5c3f68(0xb9b)](_0x3e609a)?BattleManager[_0x5c3f68(0x6ae)]():this[_0x5c3f68(0x668)](_0x107bac,_0x3e609a,_0x45e76c);},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xb9b)]=function(_0x4b9982){const _0x5ed0c5=_0x58cf34;if(!SceneManager['isSceneBattle']())return![];if(!_0x4b9982)return![];if(!_0x4b9982[_0x5ed0c5(0xb8a)]())return![];if(_0x4b9982['item']()[_0x5ed0c5(0x841)][_0x5ed0c5(0xcbb)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x5ed0c5(0x942)](_0x4b9982['item']()))return!![];return![];},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x668)]=function(_0x1d3ccb,_0x17dcc2,_0x21ee2e){this['setupActionSet'](_0x1d3ccb,_0x17dcc2,_0x21ee2e),this['createEffectActionSet'](_0x1d3ccb,_0x17dcc2,_0x21ee2e),this['finishActionSet'](_0x1d3ccb,_0x17dcc2,_0x21ee2e);},Window_BattleLog['prototype'][_0x58cf34(0xb39)]=function(_0x5cd11d,_0x579b8b){const _0x54e3f8=_0x58cf34,_0x4e0831=VisuMZ[_0x54e3f8(0xa6b)][_0x54e3f8(0xb05)][_0x54e3f8(0xaca)];_0x4e0831[_0x54e3f8(0x1de)]&&this[_0x54e3f8(0x6db)](_0x54e3f8(0x747),_0x54e3f8(0xab0)['format'](DataManager['battleDisplayText'](_0x579b8b)));if(DataManager['isSkill'](_0x579b8b)){if(_0x4e0831[_0x54e3f8(0x6b6)])this[_0x54e3f8(0xa8a)](_0x579b8b[_0x54e3f8(0x3b7)],_0x5cd11d,_0x579b8b);if(_0x4e0831[_0x54e3f8(0xc32)])this[_0x54e3f8(0xa8a)](_0x579b8b[_0x54e3f8(0xc68)],_0x5cd11d,_0x579b8b);}else{if(_0x4e0831[_0x54e3f8(0x4a0)])this[_0x54e3f8(0xa8a)](TextManager[_0x54e3f8(0x7b5)],_0x5cd11d,_0x579b8b);}},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xc1c)]=function(_0x6e79d7,_0x1275e5,_0x5baced){const _0x59cea0=_0x58cf34,_0x1ab473=_0x1275e5[_0x59cea0(0xb8a)]();this[_0x59cea0(0xb39)](_0x6e79d7,_0x1ab473),this[_0x59cea0(0x6db)](_0x59cea0(0x8dd),_0x6e79d7,_0x5baced,!![]),this['push']('performActionStart',_0x6e79d7,_0x1275e5),this['push'](_0x59cea0(0x47a)),this[_0x59cea0(0x6db)](_0x59cea0(0x52a),_0x6e79d7,_0x1275e5),this['push'](_0x59cea0(0x5a2));},Window_BattleLog[_0x58cf34(0x8ef)]['createEffectActionSet']=function(_0x276dcc,_0x5e609c,_0x3a9698){const _0x447b17=_0x58cf34;if(this[_0x447b17(0x5ff)](_0x5e609c))this[_0x447b17(0x7ad)](_0x276dcc,_0x5e609c,_0x3a9698);else{if(this[_0x447b17(0x384)](_0x5e609c))this['autoMeleeMultiTargetActionSet'](_0x276dcc,_0x5e609c,_0x3a9698);else _0x5e609c[_0x447b17(0xb9e)]()?this['targetActionSet'](_0x276dcc,_0x5e609c,_0x3a9698):this[_0x447b17(0x82d)](_0x276dcc,_0x5e609c,_0x3a9698);}},Window_BattleLog[_0x58cf34(0x8ef)]['addMeleeReturnActionSet']=function(_0x8ba514,_0x150436,_0x12eab8,_0x1d4e80){const _0x2b6e9a=_0x58cf34;if(_0x150436){const _0x170988=_0x8ba514[_0x2b6e9a(0x399)]();this[_0x2b6e9a(0x6db)](_0x2b6e9a(0x5e1),[_0x8ba514],_0x12eab8,_0x1d4e80),this[_0x2b6e9a(0x6db)]('performMoveToPoint',_0x8ba514,_0x170988[_0x2b6e9a(0x43b)],_0x170988[_0x2b6e9a(0xb73)],_0x1d4e80,![],_0x2b6e9a(0x7e6)),this['push'](_0x2b6e9a(0x780),[_0x8ba514],_0x2b6e9a(0x666)),this['push'](_0x2b6e9a(0x47a)),this[_0x2b6e9a(0x6db)](_0x2b6e9a(0x780),[_0x8ba514],'walk');}},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x5ff)]=function(_0x56f46a){const _0x551502=_0x58cf34;if(!_0x56f46a[_0x551502(0x467)]())return![];if(!_0x56f46a[_0x551502(0x9c6)]())return![];if(!_0x56f46a[_0x551502(0xccb)]())return![];return VisuMZ['BattleCore']['Settings'][_0x551502(0x3f0)][_0x551502(0xb02)];},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x7ad)]=function(_0x30f353,_0x156ea7,_0x458415){const _0x46c7af=_0x58cf34,_0xfe724b=_0x30f353[_0x46c7af(0x3a9)]()[_0x46c7af(0x83c)]<0x2,_0x5d9a6a=0x14,_0x11c403=0x30;let _0x5c72e8=!![];_0x458415['length']>0x0&&_0x30f353[_0x46c7af(0x40c)]()===_0x458415[0x0][_0x46c7af(0x40c)]()&&(_0x5c72e8=![]);_0xfe724b&&_0x5c72e8&&(this[_0x46c7af(0x6db)](_0x46c7af(0x5e1),[_0x30f353],_0x11c403,_0x5d9a6a),this[_0x46c7af(0x6db)](_0x46c7af(0xb48),_0x30f353,_0x458415,_0x46c7af(0x78a),_0x5d9a6a,!![],_0x46c7af(0x7e6),!![]),this[_0x46c7af(0x6db)]('requestMotion',[_0x30f353],_0x46c7af(0x793)),this[_0x46c7af(0x6db)](_0x46c7af(0x47a)));let _0xbe2013=_0x156ea7[_0x46c7af(0xaf9)]()?this[_0x46c7af(0x5c7)](_0x30f353):0x1;for(let _0x2c604b=0x0;_0x2c604b<_0xbe2013;_0x2c604b++){_0x156ea7[_0x46c7af(0xaf9)]()&&_0x30f353[_0x46c7af(0x40c)]()&&this[_0x46c7af(0x6db)]('setActiveWeaponSet',_0x30f353,_0x2c604b),_0x156ea7[_0x46c7af(0xb8a)]()[_0x46c7af(0x273)]<0x0?this[_0x46c7af(0xc31)](_0x30f353,_0x156ea7,_0x458415):this['wholeActionSet'](_0x30f353,_0x156ea7,_0x458415);}_0x156ea7[_0x46c7af(0xaf9)]()&&_0x30f353[_0x46c7af(0x40c)]()&&this[_0x46c7af(0x6db)](_0x46c7af(0x4e6),_0x30f353),this['push'](_0x46c7af(0x8dd),_0x30f353,_0x458415,![]),this['addMeleeReturnActionSet'](_0x30f353,_0xfe724b,_0x11c403,_0x5d9a6a);},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x384)]=function(_0xe17ed3){const _0x54292b=_0x58cf34;if(!_0xe17ed3[_0x54292b(0x467)]())return![];if(!_0xe17ed3[_0x54292b(0x23d)]())return![];if(!_0xe17ed3[_0x54292b(0xccb)]())return![];return VisuMZ[_0x54292b(0xa6b)][_0x54292b(0xb05)][_0x54292b(0x3f0)][_0x54292b(0xa4a)];},Window_BattleLog[_0x58cf34(0x8ef)]['autoMeleeMultiTargetActionSet']=function(_0x25d1f2,_0x148b80,_0x493ceb){const _0x34c656=_0x58cf34,_0x39bcb9=_0x25d1f2[_0x34c656(0x3a9)]()[_0x34c656(0x83c)]<0x2,_0x4be624=0x14,_0x32d1f0=0x30;if(_0x39bcb9){this[_0x34c656(0x6db)](_0x34c656(0x5e1),[_0x25d1f2],_0x32d1f0,_0x4be624);const _0x1a6402=_0x493ceb['length']>0x1?_0x34c656(0xcbe):_0x34c656(0x78a);this[_0x34c656(0x6db)](_0x34c656(0xb48),_0x25d1f2,_0x493ceb,_0x1a6402,_0x4be624,!![],_0x34c656(0x7e6),!![]),this[_0x34c656(0x6db)]('requestMotion',[_0x25d1f2],'walk'),this[_0x34c656(0x6db)](_0x34c656(0x47a));}let _0x23d1db=_0x148b80[_0x34c656(0xaf9)]()?this[_0x34c656(0x5c7)](_0x25d1f2):0x1;for(let _0x2909bc=0x0;_0x2909bc<_0x23d1db;_0x2909bc++){_0x148b80[_0x34c656(0xaf9)]()&&_0x25d1f2['isActor']()&&this[_0x34c656(0x6db)]('setActiveWeaponSet',_0x25d1f2,_0x2909bc),this[_0x34c656(0x82d)](_0x25d1f2,_0x148b80,_0x493ceb);}_0x148b80[_0x34c656(0xaf9)]()&&_0x25d1f2[_0x34c656(0x40c)]()&&this['push']('clearActiveWeaponSet',_0x25d1f2),this['push']('applyImmortal',_0x25d1f2,_0x493ceb,![]),this['addMeleeReturnActionSet'](_0x25d1f2,_0x39bcb9,_0x32d1f0,_0x4be624);},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xc31)]=function(_0x40044f,_0x1dc3e3,_0x5745a6){const _0x1784e3=_0x58cf34,_0x3acc44=_0x1dc3e3[_0x1784e3(0xb8a)]();for(const _0x26786b of _0x5745a6){if(!_0x26786b)continue;this[_0x1784e3(0x6db)](_0x1784e3(0xad8),_0x40044f,_0x1dc3e3),this[_0x1784e3(0x6db)](_0x1784e3(0xcd7),Sprite_Battler['_motionSpeed']),this[_0x1784e3(0x6db)](_0x1784e3(0x854),_0x40044f,[_0x26786b],_0x3acc44['animationId']),this[_0x1784e3(0x6db)](_0x1784e3(0xcd7),0x18),this['push'](_0x1784e3(0x723),_0x40044f,_0x26786b);}},Window_BattleLog['prototype']['wholeActionSet']=function(_0x16535,_0x40d0b9,_0x3e8d98){const _0xe3533b=_0x58cf34,_0x179ed3=_0x40d0b9[_0xe3533b(0xb8a)]();let _0x552be1=_0x40d0b9[_0xe3533b(0xaf9)]()?0x1+_0x16535[_0xe3533b(0x297)]():0x1;while(_0x552be1--){this[_0xe3533b(0x6db)]('performAction',_0x16535,_0x40d0b9),this[_0xe3533b(0x6db)](_0xe3533b(0xcd7),Sprite_Battler['_motionSpeed']),this[_0xe3533b(0x6db)](_0xe3533b(0x854),_0x16535,_0x3e8d98['clone'](),_0x179ed3[_0xe3533b(0x273)]),this['push'](_0xe3533b(0x5a2));}for(const _0x29c07d of _0x3e8d98){if(!_0x29c07d)continue;this['push']('actionEffect',_0x16535,_0x29c07d);}},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x77a)]=function(_0x48df8c,_0x19f576,_0x3801d7){const _0x28c9af=_0x58cf34,_0x582620=_0x19f576[_0x28c9af(0xb8a)]();this[_0x28c9af(0x6db)](_0x28c9af(0x8dd),_0x48df8c,_0x3801d7,![]),this[_0x28c9af(0x6db)]('waitForNewLine'),this[_0x28c9af(0x6db)](_0x28c9af(0x78c)),this['push'](_0x28c9af(0xcdf)),this['push'](_0x28c9af(0x261),_0x48df8c),this['push']('waitForMovement');},Window_BattleLog['prototype']['endAction']=function(_0x1299fe){$subject=null,$action=null,$targets=[];},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb62)]=Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x722)],Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x722)]=function(_0x162e61){const _0x42913a=_0x58cf34;if(!VisuMZ['BattleCore'][_0x42913a(0xb05)][_0x42913a(0xaca)][_0x42913a(0x897)])return;VisuMZ[_0x42913a(0xa6b)][_0x42913a(0xb62)]['call'](this,_0x162e61);},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x903)]=function(_0x50c552){const _0x131b85=_0x58cf34;this[_0x131b85(0x6db)](_0x131b85(0xa10),_0x50c552);VisuMZ['BattleCore'][_0x131b85(0xb05)]['ActionSequence'][_0x131b85(0x5b2)]&&this[_0x131b85(0x6db)]('showAnimation',_0x50c552,[BattleManager[_0x131b85(0x6f1)]],-0x1);if(!VisuMZ[_0x131b85(0xa6b)][_0x131b85(0xb05)][_0x131b85(0xaca)][_0x131b85(0xac8)])return;this[_0x131b85(0x6db)](_0x131b85(0x747),TextManager[_0x131b85(0x7cb)][_0x131b85(0x1d3)](_0x50c552[_0x131b85(0xc22)]()));const _0x60943f=VisuMZ['BattleCore'][_0x131b85(0xb05)]['BattleLog'][_0x131b85(0xb54)]??0x0;if(_0x60943f>0x0)this['push'](_0x131b85(0xcd7),_0x60943f);;},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x23b)]=function(_0x431665){const _0x4370a7=_0x58cf34;this[_0x4370a7(0x6db)]('performReflection',_0x431665);if(!VisuMZ[_0x4370a7(0xa6b)][_0x4370a7(0xb05)][_0x4370a7(0xaca)][_0x4370a7(0x8ed)])return;this[_0x4370a7(0x6db)](_0x4370a7(0x747),TextManager[_0x4370a7(0x3d7)]['format'](_0x431665[_0x4370a7(0xc22)]()));const _0x26d033=VisuMZ[_0x4370a7(0xa6b)][_0x4370a7(0xb05)][_0x4370a7(0xaca)]['ShowReflectWait']??0x0;if(_0x26d033>0x0)this['push']('waitCount',_0x26d033);;},Window_BattleLog[_0x58cf34(0x8ef)]['displayReflectionPlayBack']=function(_0x47ff28,_0x362d5f){const _0x3faaa1=_0x58cf34;if(VisuMZ['BattleCore'][_0x3faaa1(0xb05)]['ActionSequence']['ReflectPlayback']){const _0x4dd182=_0x362d5f[_0x3faaa1(0xb8a)]();this['push'](_0x3faaa1(0x854),_0x47ff28,[_0x47ff28],_0x4dd182['animationId']);}},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x5f6)]=function(_0x4fda14,_0x50a073){const _0x3cbadf=_0x58cf34;this['push'](_0x3cbadf(0x646),_0x4fda14,_0x50a073);if(!VisuMZ[_0x3cbadf(0xa6b)][_0x3cbadf(0xb05)]['BattleLog'][_0x3cbadf(0x619)])return;const _0xd6ae73=_0x4fda14['name'](),_0x214aa5=TextManager[_0x3cbadf(0xb8f)][_0x3cbadf(0x1d3)](_0xd6ae73,_0x50a073['name']());this[_0x3cbadf(0x6db)](_0x3cbadf(0x747),_0x214aa5);const _0x1e0bd8=VisuMZ[_0x3cbadf(0xa6b)][_0x3cbadf(0xb05)][_0x3cbadf(0xaca)]['ShowSubstituteWait']??0x0;if(_0x1e0bd8>0x0)this[_0x3cbadf(0x6db)]('waitCount',_0x1e0bd8);;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x43e)]=Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xa2b)],Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xa2b)]=function(_0x2f4669,_0x4f23e8){const _0x59a95d=_0x58cf34;VisuMZ[_0x59a95d(0xa6b)]['Window_BattleLog_displayActionResults'][_0x59a95d(0x9a4)](this,_0x2f4669,_0x4f23e8);},VisuMZ['BattleCore'][_0x58cf34(0x1e2)]=Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x2de)],Window_BattleLog['prototype'][_0x58cf34(0x2de)]=function(_0xd65daf){const _0x5d14b1=_0x58cf34;if(!VisuMZ[_0x5d14b1(0xa6b)][_0x5d14b1(0xb05)][_0x5d14b1(0xaca)]['ShowFailure'])return;VisuMZ[_0x5d14b1(0xa6b)][_0x5d14b1(0x1e2)][_0x5d14b1(0x9a4)](this,_0xd65daf);},VisuMZ['BattleCore'][_0x58cf34(0x2ca)]=Window_BattleLog[_0x58cf34(0x8ef)]['displayCritical'],Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x3b5)]=function(_0x170657){const _0x5f208f=_0x58cf34;if(!VisuMZ[_0x5f208f(0xa6b)]['Settings'][_0x5f208f(0xaca)]['ShowCritical'])return;VisuMZ[_0x5f208f(0xa6b)][_0x5f208f(0x2ca)]['call'](this,_0x170657);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xc89)]=Window_BattleLog[_0x58cf34(0x8ef)]['displayMiss'],Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xa4d)]=function(_0xd37856){const _0xdeb002=_0x58cf34;!VisuMZ['BattleCore'][_0xdeb002(0xb05)][_0xdeb002(0xaca)][_0xdeb002(0x9ba)]?this[_0xdeb002(0x6db)](_0xdeb002(0xaef),_0xd37856):VisuMZ[_0xdeb002(0xa6b)][_0xdeb002(0xc89)][_0xdeb002(0x9a4)](this,_0xd37856);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x341)]=Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xa7f)],Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xa7f)]=function(_0x346298){const _0x420e32=_0x58cf34;!VisuMZ[_0x420e32(0xa6b)][_0x420e32(0xb05)][_0x420e32(0xaca)]['ShowMissEvasion']?_0x346298['result']()['physical']?this[_0x420e32(0x6db)](_0x420e32(0x398),_0x346298):this[_0x420e32(0x6db)]('performMagicEvasion',_0x346298):VisuMZ[_0x420e32(0xa6b)][_0x420e32(0x341)][_0x420e32(0x9a4)](this,_0x346298);},Window_BattleLog['prototype'][_0x58cf34(0xb27)]=function(_0x552d94){const _0x40aa76=_0x58cf34;_0x552d94[_0x40aa76(0x9d9)]()[_0x40aa76(0x481)]&&(_0x552d94[_0x40aa76(0xa81)]=0x0,_0x552d94[_0x40aa76(0x9d9)]()[_0x40aa76(0x956)]>0x0&&!_0x552d94[_0x40aa76(0x9d9)]()['drain']&&(_0x552d94[_0x40aa76(0xa81)]=_0x552d94[_0x40aa76(0x9d9)]()[_0x40aa76(0x956)],this[_0x40aa76(0x6db)](_0x40aa76(0xc70),_0x552d94)),_0x552d94[_0x40aa76(0x9d9)]()[_0x40aa76(0x956)]<0x0&&this[_0x40aa76(0x6db)]('performRecovery',_0x552d94),VisuMZ['BattleCore'][_0x40aa76(0xb05)][_0x40aa76(0xaca)][_0x40aa76(0x705)]&&this[_0x40aa76(0x6db)](_0x40aa76(0x747),this[_0x40aa76(0x61d)](_0x552d94)));},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x30e)]=Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x416)],Window_BattleLog[_0x58cf34(0x8ef)]['displayMpDamage']=function(_0x240f07){const _0x412c0d=_0x58cf34;if(!VisuMZ[_0x412c0d(0xa6b)]['Settings'][_0x412c0d(0xaca)][_0x412c0d(0x533)])return;VisuMZ[_0x412c0d(0xa6b)]['Window_BattleLog_displayMpDamage']['call'](this,_0x240f07);},VisuMZ[_0x58cf34(0xa6b)]['Window_BattleLog_displayTpDamage']=Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x9a5)],Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x9a5)]=function(_0x391ce0){const _0x311716=_0x58cf34;if(!VisuMZ[_0x311716(0xa6b)]['Settings'][_0x311716(0xaca)][_0x311716(0x53e)])return;VisuMZ[_0x311716(0xa6b)]['Window_BattleLog_displayTpDamage'][_0x311716(0x9a4)](this,_0x391ce0);},Window_BattleLog['prototype'][_0x58cf34(0xa54)]=function(_0xe8fd31){const _0x5f491b=_0x58cf34;_0xe8fd31[_0x5f491b(0x9d9)]()[_0x5f491b(0x826)]()&&(this['push'](_0x5f491b(0x5eb)),this[_0x5f491b(0xc12)](_0xe8fd31),this[_0x5f491b(0xbac)](_0xe8fd31),this[_0x5f491b(0x6db)](_0x5f491b(0x4dc)));},Window_BattleLog['prototype']['displayAddedStates']=function(_0x444bc4){const _0x1ea9bd=_0x58cf34,_0x1b96ad=_0x444bc4[_0x1ea9bd(0x9d9)](),_0x2c998e=_0x1b96ad[_0x1ea9bd(0xa4e)]();for(const _0x5a3663 of _0x2c998e){const _0xba7dc4=_0x444bc4[_0x1ea9bd(0x40c)]()?_0x5a3663[_0x1ea9bd(0x3b7)]:_0x5a3663[_0x1ea9bd(0xc68)];_0xba7dc4&&VisuMZ[_0x1ea9bd(0xa6b)]['Settings'][_0x1ea9bd(0xaca)][_0x1ea9bd(0x4d6)]&&(this[_0x1ea9bd(0x6db)]('popBaseLine'),this[_0x1ea9bd(0x6db)]('pushBaseLine'),this['push']('addText',_0xba7dc4[_0x1ea9bd(0x1d3)](_0x444bc4[_0x1ea9bd(0xc22)]())),this[_0x1ea9bd(0x6db)](_0x1ea9bd(0xa15))),_0x5a3663['id']===_0x444bc4[_0x1ea9bd(0xcbd)]()&&this[_0x1ea9bd(0x6db)]('performCollapse',_0x444bc4);}},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x7cc)]=function(_0x1da14c){const _0x212465=_0x58cf34;if(!VisuMZ[_0x212465(0xa6b)][_0x212465(0xb05)][_0x212465(0xaca)][_0x212465(0x32e)])return;const _0x162c92=_0x1da14c[_0x212465(0x9d9)](),_0x489a73=_0x162c92['removedStateObjects']();for(const _0x2086b8 of _0x489a73){_0x2086b8[_0x212465(0x3e8)]&&(this['push'](_0x212465(0x599)),this[_0x212465(0x6db)](_0x212465(0x5eb)),this[_0x212465(0x6db)](_0x212465(0x747),_0x2086b8[_0x212465(0x3e8)][_0x212465(0x1d3)](_0x1da14c[_0x212465(0xc22)]())),this[_0x212465(0x6db)](_0x212465(0xa15)));}},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xbac)]=function(_0x2e1c42){const _0x28bd62=_0x58cf34,_0x1c38d5=VisuMZ[_0x28bd62(0xa6b)]['Settings']['BattleLog'],_0x1f8e87=_0x2e1c42['result']();if(_0x1c38d5['ShowAddedBuff'])this['displayBuffs'](_0x2e1c42,_0x1f8e87[_0x28bd62(0x946)],TextManager[_0x28bd62(0x887)]);if(_0x1c38d5[_0x28bd62(0xb91)])this[_0x28bd62(0x90a)](_0x2e1c42,_0x1f8e87[_0x28bd62(0xad6)],TextManager[_0x28bd62(0x4c1)]);if(_0x1c38d5['ShowRemovedBuff'])this['displayBuffs'](_0x2e1c42,_0x1f8e87[_0x28bd62(0xa11)],TextManager[_0x28bd62(0x432)]);},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x90a)]=function(_0x564d60,_0x3ca03c,_0x1573d7){const _0x9388a=_0x58cf34;for(const _0xc850c5 of _0x3ca03c){const _0x488548=_0x1573d7[_0x9388a(0x1d3)](_0x564d60['name'](),TextManager[_0x9388a(0x941)](_0xc850c5));this[_0x9388a(0x6db)](_0x9388a(0x599)),this[_0x9388a(0x6db)](_0x9388a(0x5eb)),this['push']('addText',_0x488548),this[_0x9388a(0x6db)](_0x9388a(0xa15));}},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb0b)]=Window_BattleLog['prototype'][_0x58cf34(0xcdf)],Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xcdf)]=function(){const _0x497d16=_0x58cf34;VisuMZ[_0x497d16(0xa6b)][_0x497d16(0xb0b)][_0x497d16(0x9a4)](this),this[_0x497d16(0x36d)]();},VisuMZ[_0x58cf34(0xa6b)]['Window_BattleLog_pushBaseLine']=Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x5eb)],Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x5eb)]=function(){const _0x3febd5=_0x58cf34;VisuMZ['BattleCore'][_0x3febd5(0x9ab)]['call'](this),this['callNextMethod']();},VisuMZ[_0x58cf34(0xa6b)]['Window_BattleLog_popBaseLine']=Window_BattleLog[_0x58cf34(0x8ef)]['popBaseLine'],Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x599)]=function(){const _0x2aa80d=_0x58cf34;VisuMZ[_0x2aa80d(0xa6b)]['Window_BattleLog_popBaseLine'][_0x2aa80d(0x9a4)](this),this[_0x2aa80d(0x590)](),this['callNextMethod']();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x49e)]=Window_BattleLog['prototype'][_0x58cf34(0x562)],Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x562)]=function(_0x441f2d){const _0x23fab8=_0x58cf34;VisuMZ['BattleCore'][_0x23fab8(0x49e)][_0x23fab8(0x9a4)](this,_0x441f2d),this['callNextMethod']();},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x4dc)]=function(){const _0x1467dc=_0x58cf34;let _0x3caa51=0x0;this[_0x1467dc(0x33c)]['length']>0x0&&(_0x3caa51=this[_0x1467dc(0x33c)][this[_0x1467dc(0x33c)][_0x1467dc(0x3eb)]-0x1]),this[_0x1467dc(0xcd5)]['length']>_0x3caa51?this[_0x1467dc(0xa15)]():this[_0x1467dc(0x36d)]();},VisuMZ[_0x58cf34(0xa6b)]['Window_BattleLog_performActionStart']=Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xb8b)],Window_BattleLog[_0x58cf34(0x8ef)]['performActionStart']=function(_0x6292e2,_0xb2e7ae){const _0x132831=_0x58cf34;VisuMZ[_0x132831(0xa6b)][_0x132831(0x8ec)][_0x132831(0x9a4)](this,_0x6292e2,_0xb2e7ae),this[_0x132831(0x36d)]();},VisuMZ[_0x58cf34(0xa6b)]['Window_BattleLog_performAction']=Window_BattleLog['prototype'][_0x58cf34(0xad8)],Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xad8)]=function(_0x4d5325,_0x2a939b){const _0x1998b1=_0x58cf34;VisuMZ[_0x1998b1(0xa6b)][_0x1998b1(0x21b)]['call'](this,_0x4d5325,_0x2a939b),this[_0x1998b1(0x36d)]();},VisuMZ[_0x58cf34(0xa6b)]['Window_BattleLog_performActionEnd']=Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x261)],Window_BattleLog['prototype'][_0x58cf34(0x261)]=function(_0x21b4e6){const _0x48c2f3=_0x58cf34;VisuMZ[_0x48c2f3(0xa6b)]['Window_BattleLog_performActionEnd'][_0x48c2f3(0x9a4)](this,_0x21b4e6);for(const _0x350163 of BattleManager[_0x48c2f3(0xa58)]()){if(!_0x350163)continue;if(_0x350163[_0x48c2f3(0xc87)]())continue;_0x350163[_0x48c2f3(0xa87)]();}this[_0x48c2f3(0x36d)]();},VisuMZ['BattleCore'][_0x58cf34(0x67a)]=Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xc70)],Window_BattleLog['prototype']['performDamage']=function(_0x4c3968){const _0x411848=_0x58cf34;VisuMZ['BattleCore'][_0x411848(0x67a)][_0x411848(0x9a4)](this,_0x4c3968),this[_0x411848(0x36d)]();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x52e)]=Window_BattleLog[_0x58cf34(0x8ef)]['performMiss'],Window_BattleLog['prototype'][_0x58cf34(0xaef)]=function(_0x22e066){const _0x568924=_0x58cf34;VisuMZ[_0x568924(0xa6b)][_0x568924(0x52e)]['call'](this,_0x22e066),this['callNextMethod']();},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0x311)]=Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x8e0)],Window_BattleLog['prototype']['performRecovery']=function(_0x195b46){const _0x120730=_0x58cf34;VisuMZ[_0x120730(0xa6b)]['Window_BattleLog_performRecovery']['call'](this,_0x195b46),this[_0x120730(0x36d)]();},VisuMZ['BattleCore'][_0x58cf34(0x5dc)]=Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x398)],Window_BattleLog[_0x58cf34(0x8ef)]['performEvasion']=function(_0x2b48d3){const _0x17a8b8=_0x58cf34;VisuMZ['BattleCore'][_0x17a8b8(0x5dc)][_0x17a8b8(0x9a4)](this,_0x2b48d3),this['callNextMethod']();},VisuMZ[_0x58cf34(0xa6b)]['Window_BattleLog_performMagicEvasion']=Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x73f)],Window_BattleLog['prototype']['performMagicEvasion']=function(_0x1aa505){const _0x596076=_0x58cf34;VisuMZ[_0x596076(0xa6b)][_0x596076(0x357)][_0x596076(0x9a4)](this,_0x1aa505),this[_0x596076(0x36d)]();},VisuMZ[_0x58cf34(0xa6b)]['Window_BattleLog_performCounter']=Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xa10)],Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xa10)]=function(_0xfdafde){const _0x348302=_0x58cf34;VisuMZ[_0x348302(0xa6b)][_0x348302(0x2db)][_0x348302(0x9a4)](this,_0xfdafde),this[_0x348302(0x36d)]();},VisuMZ['BattleCore'][_0x58cf34(0xc02)]=Window_BattleLog['prototype'][_0x58cf34(0x8ae)],Window_BattleLog[_0x58cf34(0x8ef)]['performReflection']=function(_0x4fe438){const _0x4bfb3d=_0x58cf34;VisuMZ[_0x4bfb3d(0xa6b)]['Window_BattleLog_performReflection'][_0x4bfb3d(0x9a4)](this,_0x4fe438),this['callNextMethod']();},VisuMZ['BattleCore'][_0x58cf34(0x6ea)]=Window_BattleLog['prototype'][_0x58cf34(0x646)],Window_BattleLog[_0x58cf34(0x8ef)]['performSubstitute']=function(_0x4aa5b4,_0xc4db23){const _0x35ad9f=_0x58cf34;VisuMZ['BattleCore'][_0x35ad9f(0x6ea)][_0x35ad9f(0x9a4)](this,_0x4aa5b4,_0xc4db23),this[_0x35ad9f(0x36d)]();},VisuMZ[_0x58cf34(0xa6b)]['Window_BattleLog_performCollapse']=Window_BattleLog['prototype'][_0x58cf34(0xccc)],Window_BattleLog[_0x58cf34(0x8ef)]['performCollapse']=function(_0xb162c8){const _0x5e8382=_0x58cf34;VisuMZ[_0x5e8382(0xa6b)]['Window_BattleLog_performCollapse']['call'](this,_0xb162c8),this['callNextMethod']();},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x52a)]=function(_0x2eb215,_0x3c21d1){const _0x3a9d0f=_0x58cf34;_0x2eb215[_0x3a9d0f(0x52a)](_0x3c21d1),this['callNextMethod']();},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x386)]=function(_0x5a9ac5,_0xb3805f){const _0x3fc7b2=_0x58cf34,_0x2dfe21=_0x5a9ac5[_0x3fc7b2(0xadf)]();_0x2dfe21<=0x0?SoundManager['playEnemyAttack']():this[_0x3fc7b2(0x4a8)](_0xb3805f,_0x2dfe21);},Window_BattleLog['prototype'][_0x58cf34(0x8dd)]=function(_0x5d843e,_0x287392,_0x4e9ea6){const _0x37b31a=_0x58cf34,_0xa4ff05=[_0x5d843e][_0x37b31a(0xb59)](_0x287392);for(const _0x55fa1b of _0xa4ff05){if(!_0x55fa1b)continue;_0x55fa1b[_0x37b31a(0xb42)](_0x4e9ea6);}this['callNextMethod']();},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0xcd7)]=function(_0x3fd16c){const _0xfe1655=_0x58cf34;this[_0xfe1655(0x784)]=_0x3fd16c;},Window_BattleLog['prototype']['requestMotion']=function(_0x5ce6fa,_0x5893d5){const _0x149449=_0x58cf34;for(const _0xd74c39 of _0x5ce6fa){if(!_0xd74c39)continue;_0xd74c39['requestMotion'](_0x5893d5);}this[_0x149449(0x36d)]();},Window_BattleLog['prototype'][_0x58cf34(0x979)]=function(_0xacfe87,_0x29edb0,_0x20dbb4,_0x134cff,_0x2484d3,_0xabe08b){const _0x1c5d37=_0x58cf34;_0xacfe87[_0x1c5d37(0x749)](_0x29edb0,_0x20dbb4,_0x134cff,_0x2484d3,_0xabe08b,-0x1),this[_0x1c5d37(0x36d)]();},Window_BattleLog[_0x58cf34(0x8ef)]['performMoveToTargets']=function(_0x32ae13,_0x1ebb48,_0x2fa651,_0x3432d7,_0x48829a,_0x549439,_0x537282){const _0x5e64b2=_0x58cf34,_0x3cce86=Math['min'](..._0x1ebb48['map'](_0x5ae226=>_0x5ae226[_0x5e64b2(0x399)]()[_0x5e64b2(0xc19)]-_0x5ae226['battler']()[_0x5e64b2(0x654)]()/0x2)),_0x2669e7=Math[_0x5e64b2(0x238)](..._0x1ebb48[_0x5e64b2(0x5a0)](_0xb560af=>_0xb560af[_0x5e64b2(0x399)]()[_0x5e64b2(0xc19)]+_0xb560af[_0x5e64b2(0x399)]()[_0x5e64b2(0x654)]()/0x2)),_0x19bd5f=Math[_0x5e64b2(0xa8f)](..._0x1ebb48[_0x5e64b2(0x5a0)](_0x54445f=>_0x54445f[_0x5e64b2(0x399)]()['_baseY']-_0x54445f['battler']()[_0x5e64b2(0x420)]())),_0x567bc7=Math['max'](..._0x1ebb48[_0x5e64b2(0x5a0)](_0x5a2386=>_0x5a2386[_0x5e64b2(0x399)]()[_0x5e64b2(0xa73)])),_0x2f46e8=_0x1ebb48[_0x5e64b2(0x8b3)](_0x183e40=>_0x183e40[_0x5e64b2(0x40c)]())[_0x5e64b2(0x3eb)],_0x12e261=_0x1ebb48[_0x5e64b2(0x8b3)](_0x44b873=>_0x44b873[_0x5e64b2(0x2d8)]())[_0x5e64b2(0x3eb)];let _0x168ebc=0x0,_0x20a393=0x0;if(_0x2fa651['match'](/front/i))_0x168ebc=_0x2f46e8>=_0x12e261?_0x3cce86:_0x2669e7;else{if(_0x2fa651[_0x5e64b2(0xcbb)](/middle/i))_0x168ebc=(_0x3cce86+_0x2669e7)/0x2,_0x537282=-0x1;else _0x2fa651[_0x5e64b2(0xcbb)](/back/i)&&(_0x168ebc=_0x2f46e8>=_0x12e261?_0x2669e7:_0x3cce86);}if(_0x2fa651['match'](/head/i))_0x20a393=_0x19bd5f;else{if(_0x2fa651['match'](/center/i)){_0x20a393=(_0x19bd5f+_0x567bc7)/0x2;if(_0x32ae13['battler']())_0x20a393+=_0x32ae13[_0x5e64b2(0x399)]()[_0x5e64b2(0x725)]/0x2;}else _0x2fa651['match'](/base/i)&&(_0x20a393=_0x567bc7);}_0x32ae13[_0x5e64b2(0x749)](_0x168ebc,_0x20a393,_0x3432d7,_0x48829a,_0x549439,_0x537282),this['callNextMethod']();},Window_BattleLog[_0x58cf34(0x8ef)][_0x58cf34(0x5e1)]=function(_0x4c7e86,_0x2b85d9,_0x5f0270){const _0x4d6831=_0x58cf34;for(const _0x1afc2f of _0x4c7e86){if(!_0x1afc2f)continue;_0x1afc2f[_0x4d6831(0x344)](_0x2b85d9,_0x5f0270);}this[_0x4d6831(0x36d)]();};function Window_BattleMultiTarget(){const _0x5f05ff=_0x58cf34;this[_0x5f05ff(0xb4e)](...arguments);}Window_BattleMultiTarget[_0x58cf34(0x8ef)]=Object[_0x58cf34(0x5fa)](Window_Command[_0x58cf34(0x8ef)]),Window_BattleMultiTarget[_0x58cf34(0x8ef)]['constructor']=Window_BattleMultiTarget,VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x62c)]=VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x62c)]||{},Window_BattleMultiTarget[_0x58cf34(0x2d0)]=VisuMZ['BattleCore']['Settings'][_0x58cf34(0x62c)][_0x58cf34(0x42f)]??0x118,Window_BattleMultiTarget[_0x58cf34(0xbfb)]=VisuMZ[_0x58cf34(0xa6b)]['Settings'][_0x58cf34(0x62c)][_0x58cf34(0xa2c)]??0x2,Window_BattleMultiTarget[_0x58cf34(0x6c6)]=VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)]['MultiTarget'][_0x58cf34(0x9cd)]??!![],Window_BattleMultiTarget[_0x58cf34(0x53b)]=VisuMZ['BattleCore'][_0x58cf34(0xb05)][_0x58cf34(0x62c)]['AllActorsText']??_0x58cf34(0x493),Window_BattleMultiTarget['ALL_ENEMIES']=VisuMZ['BattleCore']['Settings'][_0x58cf34(0x62c)][_0x58cf34(0x95c)]??_0x58cf34(0x25e),Window_BattleMultiTarget[_0x58cf34(0xc0b)]=VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x62c)][_0x58cf34(0x52b)]??0x0,Window_BattleMultiTarget[_0x58cf34(0x382)]=VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)]['MultiTarget'][_0x58cf34(0x76d)]??0x0,Window_BattleMultiTarget[_0x58cf34(0x9c0)]=VisuMZ['BattleCore'][_0x58cf34(0xb05)]['MultiTarget']['EnemyOffsetX']??0x0,Window_BattleMultiTarget[_0x58cf34(0x1fa)]=VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)]['MultiTarget'][_0x58cf34(0x8e2)]??0x0,Window_BattleMultiTarget[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)]=function(_0x325824,_0x5ebc60){const _0x3d3650=_0x58cf34;this[_0x3d3650(0xbd9)]=_0x5ebc60,Window_Command[_0x3d3650(0x8ef)][_0x3d3650(0xb4e)]['call'](this,_0x325824),this['setBackgroundType'](Window_BattleMultiTarget[_0x3d3650(0xbfb)]),this[_0x3d3650(0x489)](),this['hide'](),this[_0x3d3650(0x9a3)]();},Window_BattleMultiTarget[_0x58cf34(0x8ef)][_0x58cf34(0x860)]=function(){return this['_forActor'];},Window_BattleMultiTarget[_0x58cf34(0x8ef)][_0x58cf34(0x677)]=function(){const _0x37facd=_0x58cf34;let _0x59362e=this[_0x37facd(0x860)]()?Window_BattleMultiTarget[_0x37facd(0x53b)]:Window_BattleMultiTarget['ALL_ENEMIES'];if(Imported[_0x37facd(0xaa1)]&&Window_BattleMultiTarget[_0x37facd(0x6c6)]){this[_0x37facd(0x2ea)]=this[_0x37facd(0x860)]()?'pagedown':_0x37facd(0xbaa),this[_0x37facd(0xbe1)]=TextManager[_0x37facd(0xc17)](this['_buttonKey']);const _0x53a331=VisuMZ[_0x37facd(0x6c2)][_0x37facd(0xb05)][_0x37facd(0x7ae)][_0x37facd(0x454)];_0x59362e=_0x53a331[_0x37facd(0x1d3)](this[_0x37facd(0xbe1)],_0x59362e);}this[_0x37facd(0x9c2)](_0x59362e,'selectAll');},Window_BattleMultiTarget[_0x58cf34(0x8ef)][_0x58cf34(0x286)]=function(_0x570b83){const _0x43ba2e=_0x58cf34,_0x4d19d4=this[_0x43ba2e(0x83d)](_0x570b83);this[_0x43ba2e(0x204)](),this[_0x43ba2e(0x79d)](this[_0x43ba2e(0xa9a)](_0x570b83));const _0x22a629=this['commandName'](_0x570b83),_0x104f11=this[_0x43ba2e(0xc2a)](_0x22a629)[_0x43ba2e(0xc78)],_0x120c91=_0x4d19d4['x']+Math[_0x43ba2e(0x951)]((_0x4d19d4[_0x43ba2e(0xc78)]-_0x104f11)/0x2);this['drawTextEx'](_0x22a629,_0x120c91,_0x4d19d4['y'],_0x4d19d4[_0x43ba2e(0xc78)]);},Window_BattleMultiTarget[_0x58cf34(0x8ef)][_0x58cf34(0x6a2)]=function(){const _0x4da611=_0x58cf34;Window_Command[_0x4da611(0x8ef)][_0x4da611(0x6a2)][_0x4da611(0x9a4)](this),this['updateVisibility'](),this[_0x4da611(0x8a7)]();},Window_BattleMultiTarget[_0x58cf34(0x8ef)]['updateVisibility']=function(){const _0x4b7438=_0x58cf34;this[_0x4b7438(0x1e4)]=this['visibilityState']();},Window_BattleMultiTarget[_0x58cf34(0x8ef)]['visibilityState']=function(){const _0x181e9d=_0x58cf34,_0x1b631d=BattleManager['inputtingAction'](),_0x14d6b3=_0x1b631d&&_0x1b631d[_0x181e9d(0x324)]();if(!_0x14d6b3)return![];const _0x1994b7=SceneManager['_scene'];if(this[_0x181e9d(0x860)]()){if(_0x1994b7[_0x181e9d(0x79b)]['active']&&_0x1994b7[_0x181e9d(0x79b)][_0x181e9d(0x2f6)][_0x181e9d(0x629)])return!![];if(_0x1994b7[_0x181e9d(0xa6e)]['active']&&_0x1994b7[_0x181e9d(0xa6e)][_0x181e9d(0x2f6)]['pagedown'])return!![];}else{if(_0x1994b7['_enemyWindow']['active']&&_0x1994b7[_0x181e9d(0xa6e)]['_handlers'][_0x181e9d(0xbaa)])return!![];}return![];},Window_BattleMultiTarget[_0x58cf34(0x8ef)][_0x58cf34(0x8a7)]=function(){const _0x4ca6cb=_0x58cf34;if(!Imported[_0x4ca6cb(0xaa1)])return;this[_0x4ca6cb(0xbe1)]!==TextManager[_0x4ca6cb(0xc17)](this[_0x4ca6cb(0x2ea)])&&this[_0x4ca6cb(0x7ff)]();},Window_BattleMultiTarget[_0x58cf34(0x8ef)][_0x58cf34(0x59e)]=function(){const _0xad9bf8=_0x58cf34;if(this[_0xad9bf8(0x1e4)]&&TouchInput[_0xad9bf8(0x2b5)]()){const _0x306a9c=this[_0xad9bf8(0xa51)]();if(_0x306a9c>=0x0){const _0x4d7d52=this[_0xad9bf8(0x860)]()?_0xad9bf8(0x629):_0xad9bf8(0xbaa);Input[_0xad9bf8(0xb8d)](_0x4d7d52);}}};function Window_DamageCounter(){this['initialize'](...arguments);}Window_DamageCounter['prototype']=Object[_0x58cf34(0x5fa)](Window_Base[_0x58cf34(0x8ef)]),Window_DamageCounter[_0x58cf34(0x8ef)][_0x58cf34(0x408)]=Window_DamageCounter,Window_DamageCounter[_0x58cf34(0x6b5)]={'enabled':VisuMZ['BattleCore'][_0x58cf34(0xb05)]['ComboWindow'][_0x58cf34(0x33f)]??!![],'customFontFace':VisuMZ[_0x58cf34(0xa6b)]['Settings'][_0x58cf34(0x7ba)][_0x58cf34(0x700)]??'','textAlign':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x7ba)][_0x58cf34(0x4c5)]??_0x58cf34(0xa93),'hitsDmgFmt':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x7ba)][_0x58cf34(0x2bd)]??_0x58cf34(0x4b8),'hitsHealFmt':VisuMZ['BattleCore'][_0x58cf34(0xb05)][_0x58cf34(0x7ba)][_0x58cf34(0x6b3)]??_0x58cf34(0x72b),'totalDmgFmt':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x7ba)][_0x58cf34(0xa0f)]??_0x58cf34(0xb86),'totalHealFmt':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x7ba)][_0x58cf34(0x21a)]??'\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','fadeShiftX':VisuMZ[_0x58cf34(0xa6b)]['Settings']['ComboWindow'][_0x58cf34(0x298)]??-0x2,'fadeShiftY':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x7ba)][_0x58cf34(0x314)]??0x0,'positionOffsetX':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x7ba)][_0x58cf34(0x37a)]??0x0,'positionOffsetY':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)]['ComboWindow'][_0x58cf34(0x5e7)]??0x0,'updateDuration':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x7ba)]['updateDuration']??0x14,'minimumStayDuration':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x7ba)][_0x58cf34(0x51a)]??0x28,'minimumHits':VisuMZ['BattleCore'][_0x58cf34(0xb05)][_0x58cf34(0x7ba)][_0x58cf34(0x726)]??0x1,'opacitySpeed':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x7ba)][_0x58cf34(0x9b0)]??0x10},Window_DamageCounter['prototype'][_0x58cf34(0xb4e)]=function(_0x469c1c){const _0xaa1f83=_0x58cf34;this[_0xaa1f83(0x782)]=0x0,Window_Base[_0xaa1f83(0x8ef)][_0xaa1f83(0xb4e)]['call'](this,_0x469c1c),this[_0xaa1f83(0x205)]=_0x469c1c['x'],this[_0xaa1f83(0x711)]=_0x469c1c['y'],this[_0xaa1f83(0xbb6)](),this[_0xaa1f83(0x658)](0x2);},Window_DamageCounter[_0x58cf34(0x8ef)][_0x58cf34(0xbb6)]=function(){const _0x387594=_0x58cf34;this[_0x387594(0xc1a)]=0x0,this[_0x387594(0x9e0)]=0x0,this[_0x387594(0xaa7)]=0x0,this[_0x387594(0x7b7)]=0x0,this[_0x387594(0x35a)]=0x0;},Window_DamageCounter[_0x58cf34(0x8ef)][_0x58cf34(0x9d7)]=function(){const _0x2b5627=_0x58cf34;Window_Base[_0x2b5627(0x8ef)][_0x2b5627(0x9d7)][_0x2b5627(0x9a4)](this);const _0x2e1e4c=Window_DamageCounter['SETTINGS'];_0x2e1e4c[_0x2b5627(0x4ab)]?this['contents'][_0x2b5627(0x95d)]=_0x2e1e4c[_0x2b5627(0x4ab)]:this[_0x2b5627(0x852)][_0x2b5627(0x95d)]=$gameSystem[_0x2b5627(0x5a3)]();};function _0x3613(){const _0x4b0644=['isForRandom','ActSeq_Grid_AnimationIDAtNode','ActSeq_Mechanics_ActionEffect','_commandNameWindow','setTargetBattlerKey','drawItemBackground','cancelHpLifeSteal','WaitCount1','createEnemies','performAttackSlot','getNextSubject','removeBuff','pageup','CommonEventID','displayChangedBuffs','isFlipped','CalcActionSpeedJS','_battleBalloonSprites','onTurnEnd','createHpGaugeSprite','_shakeFlinchDuration','ActSeq_Inject_AnimationPauseResume','updateRefresh','Sprite_Actor_setActorHome','resetCounter','Game_Action_needsSelection','ActSeq_Grid_PullToTargetNode','endAction','makeTargetSelectionMoreVisible','updateStateSprite','onActorOk','isDisplayEmergedEnemies','itemEffectAddAttackState','addBattleGridMoveCommand','updateWaitMode','Game_Interpreter_command283','sortEnemies','getHalfActionsPTB','isAnyProjectilePresent','portraitFlipVert','svActor','actionsFmt','TextColor','commandRemember','ActSeq_Mechanics_EmulateSkillCost','HelpAutoBattle','Shadow2','ArPenFlat','parameters','isSubjectValidForAnyoneSelect','OffsetAdjust','damageText','RequiresDefeat','WaitForOpacity','_backAttachmentSprite','onBattleStartBattleCore','enemyMpGaugeRate','ElementStatusCore','_injectAnimationSprite','_forActor','isSceneChanging','addBattlerStates','save','_forcedBattleLayout','1902922ROApLw','%1\x20Aspect','addExtendedTroopMembers','_buttonText','code','VisuMZ_3_ActSeqImpact','StatusWindowSkinHide','battleCommandIcon','getCommonEventIdWithName','Scene_Battle_createAllWindows','changeCtbChargeTime','isSkewing','_enemy','loadWindowskin','startWeaponAnimation','BattleManager_endAction','ARRAYNUM','logActionList','canAlterActionCostPTB','reverse','removeActor','VisuMZ_2_BattleSystemPTB','setLetter','StateIconOffsetX','cancelButtonText','ParseWeaponNotetags','Window_PartyCommand_initialize','snapForBackground','createTargetsJS','BG_TYPE','windowAreaHeight','expRate','_forcedHomeY','isSpriteVS8dir','messageSpeed','process_VisuMZ_BattleCore_CreateRegExp','Window_BattleLog_performReflection','FollowTurn','passiveText','ActSeq_BattleLog_WaitForNewLine','worldTransform','battlerSprites','makeActionOrders','emulateAction','Param','ACTOR_OFFSET_X','encounterList','Game_Battler_clearDamagePopup','all\x20actors','CommandWidth','ActSeq_BattleLog_WaitForBattleLog','Game_Actor_makeActionList','displayChangedStates','Parse_Notetags_HelpDescription','debuffHelpFmt','getDragonbones','PreApplyJS','getInputButtonString','overworldBattleback1Name','_baseX','_updateDuration','filters','setupActionSet','charged','portraitFilename','evaded','enemy','forceAction','name','DefaultSoftCap','ActSeq_Mechanics_OnceParallel','isETB','ActSeq_Set_SetupAction','Scene_Battle_itemWindowRect','Radius','abnormal','textSizeEx','command301_PreBattleEvent','ActSeq_Animation_WaitForAnimation','currentMaxValue','_lastActor','ActSeq_Movement_HomeMoveToTarget','ActSeq_Mechanics_BoostPointsStoreData','targetActionSet','ActionSkillMsg2','AnimationID','battleProjectiles','BattleManager_makeActionOrders','placeStateIcon','PostApplyJS','SceneManager_push','updateOpacity','_totalValue','ActionEndUpdate','Turns','AllowCollapse','isVisualHpGaugeDisplayed','_createDamageContainer','Sprite_Battler_isMoving','isSideView','VisuMZ_2_DragonbonesUnion','battleAnimation','PreEndBattleJS','Game_BattlerBase_allIconsIBS','opacity','ActSeq_BattleLog_AddText','displayReflectionPlayBack','onGrowEnd','Sprite_Actor_update','windowskin','_statesWindow','BattleManager_initMembers','base','inputtingAction','PreEndActionJS','gainStoredBoostPoints','HitFlat','turn','inHomePosition','addBattleCoreAutoBattleStartupCommand','ActSeq_Mechanics_Immortal','targetSpritePosition','ActSeq_Target_RandTarget','setActionState','applyTargetFilters','_borderPortraitSprite','ActSeq_Animation_ActionAnimation','drawItemImagePortraitStyle','IconStypeNorm','maxTp','setHelpWindowItem','playReflection','createInnerPortrait','getBattlerFromKey','battlerKey','collapse','getNextSubjectFromPool','in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.','message2','isAnyoneInjectAniPrepping','applyVariance','startBattle','needsSelectionBattleCore','equips','PostStartBattleJS','_enemyWindowMode','performDamage','randomTargets','fight','MANUAL','TpbGaugeOffsetY','isCancelled','StatusWindowAttachmentFrontOffsetX','ActSeq_Target_PrevTarget','width','onActorCancel','okButtonText','ANGER','context','onBattleEnd','isBattleRefreshRequested','isBypassDamageCap','HalfActions','gainMp','_states','processHandling','Game_Troop_expTotal','Sprite_Gauge_smoothness','attackAnimationIdSlot','isDead','requestBattleBalloon','Window_BattleLog_displayMiss','BattleManager_setup','_baseTexture','BattleGridSystem','clearGlobalVariables','BreakShields','getChildIndex','isJumping','cameraDuration','_battler','visualCutinPortraitType','removeImmortal','ActSeqProjectiles','getConfigValue','addAutoBattleCommand','_eventId','updateAttachedSprites','updateFrame','_ptbActionCost','HITTYPE_PHYSICAL','_attackAnimationId','drawItemActorSprite','Strength','anchorX','ActSeq_Animation_AttackAnimation2','setTroopPage','_visualHpGauge_JustDied','needsSelection','\x5cC[0]','swing','startPartyCommandSelection','extraPositionScaledY','CriticalHitRate','Game_Action_setItem','_shakeFlinchPower','ActSeq_Impact_TimeStop','isSkill','StepDuration','setupWeaponAnimation','100%','Game_Battler_startTpbTurn','currentExt','ActSeq_Zoom_Reset','ActSeq_Impact_MotionTrailCreate','exit','MAXHP','applyDamageCaps','getItemDamageAmountTextBattleCore','_homeEasing','_flinched','match','itemHit','deathStateId','front\x20center','negativeLifeSteal','performAttack','ActSeq_Element_ForceElements','updateCallMenu','collapseType','AdjustRect','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','WaitCount','_actor','BattleManager_checkSubstitute','initBattlePortrait','turnCount','isForOpponent','performCollapse','partyCommandWindowRect','isNonSubmenuCancel','indexOf','isAnyoneMoving','drawItemImageXPStyle','terminate','LIGHT\x20BULB','bitmapWidth','_lines','???','waitCount','GUARD','itemEffectGainTp','\x5cI[%1]\x5cC[%3]%2','updateShadowScale','createAnimationContainer','BattleManager_endAction_ComboWindow','Rate','clear','_fauxAnimationSprites','thrust','svActorVertCells','ActSeq_Movement_WaitForJump','Scene_Battle_partyCommandWindowRect','helpAreaHeight','Debuffs','Defeat','ForceExploited','BattleManager_isTpbMainPhase','checkCacheKey','_battlerKeyCache','BattleManager_startBattle','_immortal','battleZoom','PreRegenerateJS','SvMotionIdleMass-%1-%2','boxHeight','_updateTargetValue','forceSelect','isSpinning','applyBattleCoreJS','log','MeleeDistance','filterArea','format','_requestRefresh','effect','_createCursorSprite','Scene_Battle_isTimeActiveIBS','isFastForward','isActiveTpb','extraPositionX','pointY','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','ActSeq_Mechanics_EtbAction','ActionCenteredName','Sprite_Enemy_update','ActSeq_Movement_MoveToPoint','globalAlpha','Window_BattleLog_displayFailure','MAXMP','visible','addBuff','canAttack','ConvertParams','bgType','_updateCursorArea','trueRandomTarget','next\x20target','startGrow','partyCommandWindowRectBorderStyle','isAutoBattleCommandEnabled','EnableSoftCap','Wave','LastSelected','alive\x20friends\x20not\x20target','dying','_actions','traitObjects','hue','setCursorRect','debuffValueFmt','FlinchDistanceX','ENEMY_OFFSET_Y','process_VisuMZ_BattleCore_PluginParams','ActSeq_Mechanics_StbExploit','displayStartMessages','ActSeq_Camera_FocusPoint','addTextToCombatLog','ARRAYEVAL','commandEscape','battleCorePreBattleCommonEvent','VariableHeal','resetTextColor','_targetX','Game_BattlerBase_meetsUsableItemConditions','_canLose','process_VisuMZ_BattleCore_Notetags','Scene_Battle_startActorCommandSelection','SILENCE','getLastPluginCommandInterpreter','-----','revertTpbCachedActor','alive\x20opponents\x20not\x20target','playOnceParallelInterpreter','battleCamera','Scene_Options_maxCommands','WaitForAnimation','closeBattleActorWindow','_currentAngle','CreateCommonEventKeys','targetsForFriends','timeScale','BattleManager_endBattle','canUse','totalHealFmt','Window_BattleLog_performAction','_frame','Scene_Battle_windowAreaHeight','ActSeq_Cutin_EndVisualCutinEffectAll','_callSceneOptions','contentsBack','lastFilename','processVictory','Scene_Battle_initialize','drawItemImageListStyle','ChargeRate','ActorCmd','ActionCount','JS\x20%1END\x20BATTLE','updateSkew','mainSpriteScaleY','setupHpGaugeSprite','hpDamageFmt','changeInputWindow','noSimilarSTypes','pageOffsetX','startTpbTurn','Setting','ActSeq_Movement_Jump','_windowLayer','updateStateIconSprite','Spriteset_Battle_update','updateShadowBattleCore','Game_Action_itemEffectAddAttackState','max','position','Scene_Battle_onActorOk','displayReflection','ActSeq_Animation_ItemAnimation','isForAll','setAttack','MotionType','parallaxScrollXinvertEnemy','LIGHTBULB','CopyCombatLog','value2','StartName','applyGuard','default','finalizeScale','increaseHits','processPostBattleCommonEvents','pha','jsAccuracy','CastCertain','addCustomCommands','speed','MpGaugeOffsetX','positionOffsetX','lineRect','ActSeq_Grid_ClearPassiveStatesFromNode','AsTarget','paintOpacity','charging','Targets2','createPageButtons','isValid','maxCols','loadPicture','right','PartyCmd','pageButtonPosition','All\x20Enemies','adjustPosition','linkSprite','performActionEnd','HelpSkillType','prev\x20target','BindCommonEventKeysForGroup','hasAspectData','_forcedBattlers','TP_Rate','createBattleUIOffsetY','createBattleUIOffsetX','_battleCoreBattleResumeAfter','-%1\x20MP','_cacheTextWidth','HpGauge','updateHpGaugePosition','drawStates','ActSeq_Movement_BattleStep','updateCommandNameWindow','BattleLayout','animationId','Game_Map_battleback1Name','recoverAll','svAnchorX','onStaticEnemyBitmapLoad','_flashDuration','activate','parallaxScrollY','currentDisplayedValue','Window_BattleActor_show','CheckMapBattleEventValid','SmoothImage','ConfigManager_makeData','addWindow','ActSeq_Horror_Clear','_autoBattleWindow','Shadow','ActSeq_Mechanics_EmulateGuardEffect','getReturnWindow','drawItem','weatherType','setHorrorEffectSettings','_surprise','_dimmerSprite','playSystemSound','ActSeq_Impact_ColorBreak','ANTI_TINT_UI','subject','magicSkills','550395MFnXfQ','ColorManager_mpColor','options','buffValueFmt','makeStateHelpText','createHelpWindow','ActSeq_Mechanics_CtbOrder','attackTimesAdd','fadeShiftX','power','applyGlobal','frontviewSpriteY','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','Game_Action_updateLastTarget','Sprite_Actor_moveToStartPosition','registerDefeatedEnemy','LUK','_tempEquipCheck','freezeFrame','command301','processEscape','updatePosition','Game_Action_apply','callUpdateHelp','ActSeq_Movement_WaitForFloat','cameraOffsetDuration','Scene_Battle_updateBattleProcess','drawItemStatus','traitSet','contentsOpacity','getLastHpDamage','CreateActionSequenceTargets','addFightCommand','unshift','createHelpWindowBattleCore','removeOnceParallelInterpreter','ActSeq_Grid_AddTriggerToNode','isClicked','basicGaugesY','isTpb','createContents','onBattleStart','startInBattleStatus','ActSeq_Projectile_Picture','_animationCount','hitsDmgFmt','ActSeq_Movement_Scale','isBTB','startMotion','alterActionCostPTB','textBaseline','slice','Game_BattlerBase_initMembers','ArRedFlat','gaugeRate','isAnyoneSpinning','spell','_opacityWholeDuration','Window_BattleLog_displayCritical','MUSIC-NOTE','refreshBattlerMotions','_stateIconSprite','ActSeq_Angle_Reset','playOnceParallelTroopPage','WIDTH','BARE\x20HANDS','allIcons','callOkHandler','isActing','horzCells','StatusWindow_DrawJS','\x5cI[%2]\x5cC[16]%1\x5cC[0]','isEnemy','makeDamageValue','hasBeenDefeatedBefore','Window_BattleLog_performCounter','StatusWindowAttachmentFrontOffsetY','getSpecificBattlerKeyTarget','displayFailure','_hpGaugeSprite','battleSkew','HelpItem','arPenFlat','makeBuffName','Game_Action_executeHpDamage','evalDamageFormulaBattleCore','StatusWindowAttachmentBack','selectAllEnemies','isAnyoneSkewing','_linkedSprite','_buttonKey','unchanged','Mechanics','numRepeats','chant','processBattleCoreJS','isAnyBattleBalloonPlaying','skills','clearBattleCoreAspects','Game_Battler_onBattleEnd','getBattlePortrait','ext','_handlers','Formula','AggroControlSystem','removeBuffsAuto','createKeyJS','_itemWindow','CmdTextAutoBattle','actor','svShadow','getParamBuffAndStateRate','isSkipPartyCommandWindow','ActSeq_BattleVoice_PlayCommonLine','_preBattleCommonEvent','scope','declareGlobalVariables','Pre','TpbGaugeOffsetX','ActSeq_Mechanics_EmulateSkillEffect','parallaxHue','Skills','BattleManager_startAction','ARRAYJSON','spinBattler','requestAnimation','Window_BattleLog_displayMpDamage','_actorCommandWindow','casting','Window_BattleLog_performRecovery','ComboWindow_DrawJS','portraitIndex','fadeShiftY','PointJS','VisuMZ_1_MessageCore','setupBattleCoreAspects','center','PrioritySortActive','setBattleAngle','setBattleCameraOffset','PostDamageAsUserJS','_targetGrowY','addSkillTypeCommand','actor%1-portrait','battleBalloon','pause','BattleDefeatJS','updateBossCollapse','canSingleOrMultipleSelect','Game_Action_setSubject','attackSkillId','Decreases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','isAlive','_enemyIDs','RegExp','ActSeq_Mechanics_BoostPointsChange','drawBuffs','executeDamage','ShowRemovedState','temporaryVisibile','_executedValue','_colorType','partyCommandWindowRectDefaultStyle','ActSeq_Animation_ShowAnimationJS','isBattleCoreTargetScope','SkillsStatesCore','switchToWeaponType','return\x200','makeBattleCommand','_back2Sprite','PopupShiftX','VisuMZ_2_BattleGridSystem','_baseLineStack','playOkSound','FlashDuration','Enable','resizeWindowXPStyle','Window_BattleLog_displayEvasion','addAnimationSpriteToContainer','processAnimationRequests','jumpBattler','enemyShowParametersIfBattleTest','setupBattleback','requestRefresh','VisualCutinEffect','AnchorY','mpDamage','CommandAddAutoBattle','addSingleSkillCommands','BattleSystemBTB','ActSeq_Grid_PushFromTargetNode','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','priority','Game_Battler_performDamage','enemyTpGaugeRate','isAnyoneGrowing','selectNextCommand','pageOffsetY','BattleManager_cancelActorInput','Window_BattleLog_performMagicEvasion','enemyStatus','_padding','_targetDamage','checkSceneBattleTransitionable','Scene_Battle_skillWindowRect','Immortal','drawItemActorSvBattler','_multipliers','addOnceParallelInterpreter','FrontViewSelect','ActSeq_Cutin_AddVisualCutinEffect','battleStatusSprite','ParseEnemyNotetags','_damages','setItem','isActionSelectionValid','FaceAway','updateShakeFlinch','slices','Scene_Battle_update','action','callNextMethod','startOpacity','Scene_Battle_createEnemyWindow','updateEffectContainers','%1EndActionJS','createEnemyNames','meetsUsableItemConditions','createDamageContainer','includes','_angleEasing','isOpponent','ActionAnimation','isBattlerTargeted','PosOffsetX','alive\x20enemies\x20not\x20target','createDamageSprite','Item-%1-%2','battleOpacity','VoiceLine','Amp','_motionCount','ACTOR_OFFSET_Y','apply','isMeleeMultiTargetAction','damageContainer','showEnemyAttackAnimation','clearMotion','drawDebuffs','Window_BattleActor_hide','VisuMZ_3_StateTooltips','cancelTargetSelectionVisibility','hitRate','enabled','frontview_ui','View\x20battle\x20member\x20status.','Game_Action_isForOpponent','JS\x20%1START\x20TURN','WaitForScale','_enemyID','updateEventMain','_damagePopupArray','_active','Sprite_Battler_setBattler','performEvasion','battler','setActiveWeaponSlot','isGuardLifeSteal','DefaultStyle','statusWindowRectDefaultStyle','moveToStartPositionBattleCore','battleCommands','createWeather','commandAutoBattle','PopupShiftY','pop','getColor','LifeStealRegExp','paySkillCost','_tpbState','registerCommand','getAttackMotion','cancel','VisuMZ_1_MainMenuCore','addChild','createLowerLayer','originalName','selectSymbol','custom','PreStartActionJS','HpGaugeOffsetX','_opacityEasing','_opacityDuration','displayCritical','BattleManager_processVictory','message1','NameAlwaysHidden','ShowPopup','STYPES','CmdIconEscape','COMBATLOG','isCancelLifeSteal','_showWeapon','getNextDamagePopup','isForRandomBattleCore','ActSeq_Motion_RefreshMotion','description','battleSys','itemEffectAddNormalState','isForOneBattleCore','ActSeq_Impact_TimeScale','Scene_Battle_startEnemySelection','removeAnimationFromContainer','drawActorStateTurns','WaitForSpin','DistanceX','aspect','isPartyCommandWindowDisabled','NewPopupBottom','XPActorDefaultHeight','ConvertCount','fillRect','createMultiTargetWindow','isSceneBattle','resizeWindowBorderStyle','setupBattlebackBattleCore','isBattleSys','magicReflection','glitch','characterIndex','ExtraSettings','restore','addGuardCommand','isCertainHit','SkewY','Reveal','CmdIconItem','revealNewWeaknesses','_animationContainer','Sprite_Enemy_initVisibility','Buffs','allowRandomSpeed','BattleAI','_growY','message4','ActSeq_BattleLog_PushBaseLine','setHalfActionsPTB','length','IconStypeMagic','FvAniCenterAll','repositionCancelButtonBorderStyle','ClearBattleLog','ActionSequence','createAttachmentSprites','ActSeq_Mechanics_HpMpTp','_preemptive','removeStatesAuto','DefaultHardCap','damageFlat','ActSeq_BattleLog_UI','changeCtbCastTime','isSideButtonLayout','_activeWeaponSlot','applyItem','windowPadding','ActSeq_Grid_AddTriggerToNodeJS','dead\x20friends','_iconIndex','actorCommandCancelTPB','BattleStartEvent','makeDeepCopy','shift','statusText','flashDuration','_forceAction','-%1','constructor','updateLastTarget','ActSeq_Set_FinishAction','executeMpDamage','isActor','MaxMP','NameOffsetY','EscapeSuccessJS','svBattlerName','\x5cC[16]%1\x5cC[0]','AGI','JS\x20%1END\x20TURN','alive\x20enemies\x20not\x20user','PostStartTurnJS','displayMpDamage','updatePositionBattleCore','softDamageCapRate','buffColor','createTroopNote','PreStartTurnJS','process_VisuMZ_BattleCore_Failsafes','VisuMZ_4_CombatLog','regenerateAll','updateMain','mainSpriteHeight','applyForcedGameTroopSettingsBattleCore','Scene_ItemBase_applyItem','Window_BattleStatus_drawItemImage','Game_Battler_forceAction','abort','_distortionSprite','_tempActor','Game_Battler_performActionStart','MotionAni','ActSeq_Movement_FaceJsPoint','Sprite_Battler_setHome','VisuMZ_2_BattleSystemFTB','setupOversaturateImpactFilter','makeSpeed','WindowWidth','actorCommandSingleSkill','commandNameWindowCenter','buffRemove','updateMotionCount','damagePopupOffsetY','addDamageSprite','showHelpWindow','_customDamageFormula','Game_Enemy_transform','_growWholeDuration','setActorHome','_homeX','buffHelpFmt','CombatLogIcon','Window_BattleLog_displayActionResults','WaitForCamera','itemLifeStealRate','AsUser','Exploited','battleMove','updateCollapse','portrait','ActSeq_Mechanics_StbRemoveExcessActions','makeBuffHelpText','mpColor','_escapeRatio','damageRate','adjustWeaponSpriteOffset','applyAngleChange','getBattlerKeyTargetReplacement','makeAutoBattleActions','Sprite_Damage_createChildSprite','initVisibility','updateBattlebackBitmap','VisuMZ_3_ActiveChainSkills','chantStyle','TextFmt','BattleManager_invokeCounterAttack','drawActorIcons','onSkewEnd','frameCount','addNewState','adjustPosition_ScaleToFit','damageStyle','command357','VarianceFormulaJS','_weaponImageId','skew','tone','SLEEP','_skewDuration','_tpbSceneChangeCacheActor','invokeAction','onAngleEnd','StateIconOffsetY','isPhysical','formula','endVisualCutin','2306956vxyLSG','ActSeq_Mechanics_CustomDmgFormula','animationNextDelay','blockWidth','canGuardBattleCore','damagePopupPosition','placeActorName','autoBattleUseSkills','updateStateSpriteBattleCore','_regionBattleback2','addImmortal','isForAliveFriendBattleCore','textAlignment','ActSeq_Animation_BalloonIconRange','_regionBattleback1','adjustPosition_ScaleUp','waitForMovement','BindCommonEventKeysForObj','_character','DistanceAdjust','EscapeFailureJS','getAttackMotionSlot','%1Damage%2JS','hpAffected','placeGauge','retreat','origin','applyBattleCoreCriticalHitRateJS','onDatabaseLoaded','waitForJump','VisuMZ_2_HorrorEffects','deactivate','onBattleEndBattleCore','Enemy','floatBattler','ChangeOrderBy','clearBattlerMotionTrailData','hide','invokeCounterAttack','isIncludedInEnemyWindow','isForDeadFriend','All\x20Allies','repeatTargets','Sprite_AnimationMV_updatePosition','motionIdle','selectNextActor','949918zwtPfQ','503142DiteEa','_battleCoreForcedElements','Sprite_Actor_updateShadow','ActSeq_Mechanics_DamagePopup','evalDamageFormula','Window_BattleLog_popupDamage','expTotal','ActionItemMsg','Game_Battler_regenerateAll','destroy','createSeparateDamagePopups','state','setFrame','clearTargetBattlerKey','isAppeared','showNormalAnimation','EscapeFail','hasStaticSvBattler','customFontFace','gainTp','ActSeq_Grid_RemoveTriggerFromNode','VisuMZ_2_BattleSystemATB','frameDelay','Game_Action_executeHpDamage_ComboWindow','isDTB','isBattleMember','alignBattleCoreDamageSprite','process_VisuMZ_BattleCore_DamageStyles','_duration','setupBattleCore','_flashColor','\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','_homeWholeDuration','disarmLifeSteal','createStateIconSprite','Window_BattleEnemy_initialize','ParseStateNotetags','destroyDamageSprite','ARRAYFUNC','isDeathStateAffected','debuffAdd','_makeFontNameText','Width','DTB','TextAlign','mainSprite','_createColorFilter','ActSeqImpact','compareBattlerSprites','ShowEnemyGauge','drawSingleSkillCost','auto','ActSeq_Grid_AddPassiveStatesToNode','initBattleCore','requestMotionRefresh','smoothSelect','_updateFilterArea','updateBattlebackBitmap1','useDigitGrouping','startShakeFlinch','itemPadding','ShowAddedState','stateRate','_actionBattlers','DEF','isMoving','getSkillIdWithName','waitForNewLine','StatusGraphic','QUESTION','_offsetY','isForFriendBattleCore','cutinEnter','_bypass_applyBattleCoreHitRateJS','Game_Interpreter_PluginCommand','svbattler','pageButtonY','clearActiveWeaponSet','Balloon','BattleManager_updatePhase','states','jsAccuracyAsTarget','StateID','setLastBattleSkill','ActSeq_Animation_ShowAnimation','faceHeight','displayType','Game_Action_isForOne','_statusWindow','NameOffsetX','canMove','DefaultDamageStyle','updateHelp','VoiceLineType','State-%1-%2','changeBattlerOpacity','becomeSTBExploited','turnsFmt','Slot','isMagical','Post','overworldBattleback2Name','ActionStart','setSvBattlerSprite','setBattlerMotionTrailData','applyEasing','drawDarkRect','parent','statusWindowRectBorderStyle','ActSeq_Grid_TeleportToNode','Game_Action_isForDeadFriend','_blendColor','sideview_ui','StartTurnWait','LOVE','optDisplayTp','Game_Action_itemTargetCandidates','addStateTurns','_enemySprites','ActSeq_Horror_NoiseRemove','atbInterrupt','top','critical','isPlaying','loadCharacter','Scene_QuickLoad','logWindowRect','getStateDisplay','enemyShowLevel','minimumStayDuration','Elements','PARTY','refreshActorPortrait','USER-DEFINED\x202','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','checkExtendTroopCompatibility','SWEAT','_targetSkewY','statusDescription','MotionIdle','ActSeq_Impact_ShockwaveEachTargets','isForAliveFriend','scale','VisuMZ_2_BattleSystemCTB','PortraitScale','performCastAnimation','ActorOffsetX','isBattleFlipped','zoomDuration','Window_BattleLog_performMiss','DamageFlat','JS\x20%1START\x20BATTLE','_stateTurns','ActSeq_Inject_WaitForInjectAni','ShowMpDmg','endAnimation','battleCoreTpbMainPhase','_endBattle','HelpStatus','DistanceY','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','ActSeq_Mechanics_WaitForEffect','ALL_ACTORS','VisuMZ_3_FrontviewBattleUI','pattern','ShowTpDmg','flipVisualCutinHorz','hardDamageCap','statusWindowRect','alive\x20friends\x20not\x20user','valueColor','WaitForJump','updateHomeMove','onEnemyOk','startEnemySelection','_wtypeIDs','makeActionList','\x5cC[6](Actions\x20%2%1\x5cC[6])\x5cC[0]','CastAnimation','playEnemyDamage','isForAnyone','Index','createJS','ActSeq_Animation_SkillAnimation','_angleWholeDuration','isDuringNonLoopingMotion','startTurn','Window_BattleActor_processTouch','getBattleMembers','parallaxScrollX','_targetFloatHeight','NameFontSize','currentAction','ActSeq_Impact_Oversaturate','Sprite_Enemy_createStateIconSprite','_logWindow','ActSeq_Movement_Spin','isTurnBased','Game_Troop_setup','createAnimationSprite','StartTurnMsg','popupDamage','Scene_Map_updateCallMenu','WaitComplete','aliveMembers','drawParamData','drawBackgroundRect','isOnCurrentMap','_onceParallelInterpreters','_targetOffsetY','targetObjects','_targetHomeY','setEventCallback','drawActorLevel','TpbActiveChangeEnabled','createUIContainer','Window_Options_addGeneralOptions','rec','Game_Actor_setup','dead\x20enemies','createRateJS','_underAnimationContainer','statesWindowRect','eraseState','portraitType','StateOverlayOffsetX','guardMpLifeSteal','_commonEventIDs','isImmortal','isDying','command236','ActSeq_Movement_WaitForSpin','delay','FocusX','applyBattleCoreHitRateJS','setValue','updateBattleProcess','_item','ActSeq_Motion_ClearFreezeFrame','changeBattlebacks','Increases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','EscapeSuccess','createInnerSprite','removeState','applySoftDamageCap','battleUIOffsetX','JS\x20%1START\x20ACTION','processRefresh','_battleBalloonQueue','onOpacityEnd','tpbActorSwitchConditionsMet','PrioritySortActors','stateMotionIndex','GuardFormulaJS','startFloat','isItemCommandEnabled','popBaseLine','maxCommands','isSelected','animationBaseDelay','ActSeq_Animation_ChangeBattlePortrait','processTouch','bottom','map','freezeTime','waitForAnimation','numberFontFace','alterChange','addBattleCoreAutoBattleStyleCommand','isAutoBattle','Class-%1-%2','PreDamageJS','skillWindowRect','ActSeq_Cutin_WaitForEntrance','Scene_Party','vertCells','growBattler','_spriteset','updateTargetValue','normalIcon','startInput','CounterPlayback','setHandler','damagePopupOffsetX','SkillID','loadBattleback2','Scene_Battle_createActorCommandWindow','processCancel','toLowerCase','Sprite_SvEnemy','die','ActSeq_Motion_WaitMotionFrame','isUnderAnimation','maxBattleMembers','Game_Action_isForAll','getAttackWeaponAnimationId','DamageType%1','updateCounter','BattleManager_startTurn','addActor','Enemy-%1-%2','hitText','getDualWieldTimes','regenerateAllBattleCore','\x5cI[%1]%2','command283','loadSvActor','Sprite_Battler_updatePosition','DamageDisplay','VisuMZ_1_ElementStatusCore','Sprite_Enemy_updateStateSprite','validTargets','Height','EasingType','VisuMZ_3_ActSeqCamera','FaceDirection','AutoBattleOK','WEAPON\x20SWAP','swapEnemyIDs','Window_BattleEnemy_hide','ShowFacesListStyle','ActSeq_Camera_Reset','removeHorrorEffect','Window_BattleLog_performEvasion','clearResult','centerFrontViewSprite','JS\x20BATTLE\x20DEFEAT','_stypeIDs','performJump','ActSeq_Weapon_SetActiveWeapon','Scene_Battle_createAllWindowsIBS','splice','createBorderStylePortraitSprite','enemyId','PosOffsetY','_floatEasing','clearForcedGameTroopSettingsBattleCore','PostEndTurnJS','pushBaseLine','normalColor','_phase','canGuard','ActSeq_Impact_Desaturate','_statusType','Destination','sortDamageSprites','PopupDuration','updateShadowPosition','Normal','displaySubstitute','JS\x20%1DAMAGE\x20%2','ActSeq_Movement_Float','gainHp','create','OffsetY','_action','FUNC','isFrameVisible','isMeleeSingleTargetAction','_growEasing','PopupOffsetX','setBlendColor','repeats','addState','_inBattleStatusWindow','_reflectionTarget','_damageCounterWindow','_battleLayoutStyle','_animationSprites','setupMotion','_drawTextOutline','isCharging','loadBattleback1','onBattleStartOnceParallels','MUSIC\x20NOTE','_buffTurns','_skillWindow','move','random','Angle','maxWidth','Sprite_Actor_updateBitmap','redraw','Scene_Battle_logWindowRect','ShowSubstitute','_skewX','performActionMotions','_enemyNameContainer','makeHpDamageText','_mainSprite','remove','_deathStateApplied','ActSeq_Mechanics_StateTurnsChangeTo','moveToStartPosition','battleMembers','TargetLocation','_hideAllIcons','prepare','startSkew','performFlinch','pagedown','mainSpriteScaleX','spriteId','MultiTarget','Window_SkillList_maxCols','alive\x20battlers','VisuMZ_1_SkillsStatesCore','addNormalStatus','battleJump','openBattleActorWindow','anchorY','startMove','Parse_Notetags_TraitObjects','_lastEnemy','ParseArmorNotetags','ConvertActionSequenceTarget','EnableDamageCap','hpHealingFmt','_emptyBitmap','traits','2090680CKrXFx','isBorderStylePortraitShown','_targetHomeX','statusTextAutoBattleStyle','CastPhysical','setBattleCameraPoint','startActorCommandSelection','all\x20enemies','doesPageHaveOnceParallelStart','performSubstitute','ActSeq_Set_WholeActionSet','BTB','process_VisuMZ_BattleCore_TraitObject_Notetags','setupShockwaveImpactFilter','BattleManager_processDefeat','PostEndBattleJS','battleSpin','process_VisuMZ_BattleCore_PreBattleCommonEvent','clearBattleRefreshRequest','gaugeX','USER-DEFINED\x204','showPortraits','Game_BattlerBase_canAttack','mainSpriteWidth','Game_Temp_requestBalloon','setBalloonPose','createMiss','setBackgroundType','iconWidth','battleDisplayText','createBattleFieldContainer','hitFlat','ActSeq_Motion_MotionType','startAction','flashColor','Duration','cancelActorInput','_updateCursorFilterArea','drawTurnsRemaining','_dragonbonesSpriteContainer','UNTITLED','evade','nameY','usePremadeActionSequence','normal','updateForceAction','damageOffsetY','refreshCursor','process_VisuMZ_BattleCore_Action_Notetags','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','getMenuImage','makeUniqueNames','none','battleInjectPrep','extraHeight','Sprite_Battler_updateMain','canAttackBattleCore','buff','makeCommandList','setBattlerFacePoint','makeTargets','Window_BattleLog_performDamage','NameDamageVisibility','blt','ActSeq_Grid_ActionAnimationAtNode','ActSeq_Projectile_Animation','isSkillItemWindowsMiddle','setClickHandler','removeAnimation','_skewY','stbGainInstant','updateCancel','drawActorGraphic','addBattlerBuffsDebuffs','_lineHeight','characterName','ActSeq_Grid_RemovePassiveStatesFromNode','Game_Battler_onTurnEnd','isBusy','performTpbActiveCheckSwitch','show','Scene_Battle_onEnemyOk','normalText','ActSeq_Horror_NoiseCreate','InBattleStatus','isRightInputMode','Damage','CalcEscapeRaiseJS','loadBitmap','Sprite_Weapon_loadBitmap','_forcedHomeX','#ffffff','compatibilityVisible','skillItemWindowRectMiddle','autoRemovalTiming','isBattlerFlipped','split','ActSeq_Grid_AnimationJsAtNode','Game_Battler_performMiss','VisuMZ_3_BattleVoices','isActiveTpbReady','update','isGuard','_actorSprites','ShowWeapon','ActSeq_DB_DragonbonesTimeScale','PostRegenerateJS','VisuMZ_2_BattleSystemOTB','_commonEventQueue','setupIconTextPopup','processDefeat','isHidden','selectPreviousCommand','prepareCustomActionSequence','paramValueByName','loadFaceImages','Scene_Battle_selectPreviousCommand','updateGrow','hitsHealFmt','_colorFilter','SETTINGS','ActionSkillMsg1','setVisibleUI','autoBattleStyle','isItem','isEffecting','setBattleSkew','preparePartyRefresh','Game_Party_removeActor','Game_Map_setupBattleback','StyleOFF','graphicType','_shadowScaleY','CoreEngine','pauseInjectAnimation','CmdTextAlign','active','SHOW_BUTTON','innerWidth','#%1','canUseItemCommand','Game_BattlerBase_eraseState','_effectsContainer','paramBuffRate','drawTextEx','applyGlobalCommonEventNotetags','ParseActorNotetags','_performActionEnd','textColor','flipVisualCutinVert','_growX','Sprite_Enemy_setHue','Game_Action_setGuard','Scene_Battle_updateCancelButton','HelpEscape','setHue','createCancelButton','OffsetX','push','CastMagical','drawItemStatusListStyle','Game_Battler_makeSpeed','createActionSequenceProjectile','addShowHpGaugeCommand','setup','updatePointAnimations','ZZZ','replace','commandSymbol','Game_Battler_onBattleStart','damageCounterWindowRect','VisuMZ_4_IconBalloons','setupFont','Window_BattleLog_performSubstitute','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','some','isAnyoneJumping','battleInjectAni','shadow','launchBattle','_subject','battleEffect','escape','_targetOffsetX','toUpperCase','RevertAngle','_skewEasing','updateStatusWindowPosition','removeCurrentAction','setupBattleCoreData','_frontAttachmentSprite','createBattleBalloon','clearFreezeMotionForWeapons','setupDamagePopup','AttachStateOffsetY','CustomFontFace','updateStart','dataId','setupCriticalEffect','_targetIndex','ShowHpDmg','updateVisibility','portraitFlipHorz','VisuMZ_2_BattleSystemBTB','_borderPortraitTargetX','Game_Action_applyGlobal','getDefeatedEnemies','\x5cHEXCOLOR<%1>','icon','createAutoBattleWindow','guardLifeSteal','updateWeather','_targetY','forceEscapeSprite','_updateColorFilter','ActSeq_BattleLog_DisplayAction','Window_BattleLog_update','disperseDamage','CTB','_svBattlerSprite','onEscapeFailure','stepBack','dead\x20opponents','ActSeq_Animation_BalloonIcon','CommandAddStatus','FocusY','BattleManager_inputtingAction','FvAniCenterScreen','pageButtons','displayCurrentState','actionEffect','ActSeq_Target_CurrentIndex','height','minimumHits','onSelectAction','JumpToLabel','isCurrentItemEnabled','drawActorFace','\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','Sprite_Enemy_updateCollapse','isAutoBattleCommandAdded','<CUSTOM\x20ACTION\x20SEQUENCE>','Interrupt','_cursorSprite','Parse_Notetags_Action','isBreakStunned','PortraitScaleBorderStyle','STR','makeSuccess','FlinchDistanceY','WaitForAngle','battlelog','Targets1','needsInputWindowChange','ActSeq_Horror_GlitchCreate','checkTpbInputClose','Letter','Scene_Battle_needsInputWindowChangeIBS','performMagicEvasion','Skill-%1-%2','Game_Interpreter_updateWaitMode','updateBattleBalloons','updateNameTempVisibility','displayedParams','Opacity','Sprite_Battler_initMembers','addText','ActSeq_Animation_ChangeBattlePortrait_JS','moveBattlerToPoint','previousActor','gainCurrentActionsFTB','guardSkillId','weaponImageId','applyData','EVAL','MpGaugeOffsetY','isBigCharacter','commandName','makeActions','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','select','CheckActSeqProjectileVersion','parseForcedGameTroopSettingsBattleCore','weatherPower','setBattleZoom','transform','EFFECT_COMMON_EVENT','SwitchCritical','refreshRequest','_offsetX','reserveCommonEvent','NUM','resetNameTempVisibility','executeHpDamage','isDamagePopupRequested','DamageStyles','pages','VariableDmg','isOptionsCommandEnabled','USER-DEFINED\x205','canAddSkillCommand','itemHeight','lifeSteaItem','skewBattler','ActorOffsetY','makeActionListAutoAttack','applyCritical','excludeListing','OverallFormulaJS','value','_skewWholeDuration','createString','svBattlerAnchorY','%1RegenerateJS','updateBorderSprite','ActSeq_ChangeSkew','_allTargets','finishActionSet','meetsSelectFrontviewActorConditions','startHomeMove','_appeared','Game_BattlerBase_isStateResist','createShadowSprite','requestMotion','startActorSelection','_visibleDuration','_borderPortraitDuration','_waitCount','_growDuration','forceWeaponAnimation','setActiveWeaponSet','itemEffectRecoverHp','updatePadding','front\x20base','_additionalSprites','waitForEffect','smooth','alterType','_cache','MotionSpeed','Game_BattlerBase_addNewState','createPartyCommandWindowBattleCore','walk','visibilityState','ActSeq_Mechanics_RemoveBuffDebuff','ActSeq_Cutin_EndVisualCutinEffectType','setupTextPopup','drawGauge','nameColor','isFloating','_actorWindow','_targetGrowX','changePaintOpacity','rate','inBattleStatusWindowRect','dragonbonesData','SkipPartyCmd','VisuMZ_2_BattleSystemSTB','autoSelectLastSelected','StatusWindowSkinFilename','ActSeq_Movement_MoveToTarget','silentHomeMove','ActSeq_Impact_ShockwaveCenterTargets','ActSeq_Movement_HomeMoveToJsPoint','HelpOptions','_buffs','AttachStateOffsetX','MOTIONS','autoMeleeSingleTargetActionSet','ButtonAssist','ActSeq_Animation_PlayAtCoordinate','getBattlerKeyTargets','lineHeight','calcWindowHeight','isBuffAffected','members','useItem','ActSeq_Target_NextTarget','_targetHits','_svBattlerData','criticalDmgFlat','ComboWindow','Sprite_Actor_setBattler','_nameTempVisibleDuration','tpbCommandFight','_displayBattleCoreTransitionErrorMsg','_battleField','%1Apply%2JS','Name','Direction','ActSeq_Movement_HomeMoveBy','guardHpLifeSteal','itemTargetCandidates','PerformAction','weaponTypes','initMembers','addChildToUiContainer','DefeatEvent','counterAttack','displayRemovedStates','Game_Action_isForAliveFriend','offsetX','drawSkillCost','removeDamageSprite','icons','version','isBattleTest','_autoBattle','_selectionEffectCount','createMainSprite','USER-DEFINED\x201','_text','refreshMotion','hpRate','missed','_indent','autoSelect','PreEndTurnJS','updateCancelButton','%1EndBattleJS','current\x20target','_lastPluginCommandInterpreter','autoSelectPriority','isBorderPortraitSpriteVisible','portraitHue','Linear','VisuMZ_3_VisualCutinEffect','lifeStealRate','actorCommandAutoBattle','ScaleDown','MaxHP','addChildAt','inputting','Sprite_Battler_startMove','startJump','getBattlePortraitOffsetX','changeAtbChargeTime','ActSeq_Animation_GuardAnimation','battleCommandName','undecided','_createCursorArea','occasion','_shadowSprite','startIcon','ActSeq_Movement_FacePoint','createStateSprite','_bypassCanCounterCheck','_targetOpacity','ActSeq_Mechanics_EmulateItemEffect','NameAlwaysSelectOnly','refresh','svBattlerData','shouldDisperseDamage','battleSpriteSkew','getAspectData','battleVoices','ShakeFlinchDuration','isAlwaysVisible','processExtendTroopMembers','STRUCT','ShowHide','forceMotion','addGeneralOptions','hitType','faceWidth','buffIconIndex','isTpbCharged','drawComboText','maxItems','ApplyImmortal','getDamageStyle','isDisarmLifeSteal','_targetSkewX','angleDuration','_homeDuration','visualHpGauge','adjustFlippedBattlefield','createEnemyNameContainer','MessageWait','ActSeq_Skew_WaitForSkew','damageOffsetX','updateScale','_methods','Game_Battler_clearMotion','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','removeBattleBalloon','user','setStateTooltipBattler','includeState','isStatusAffected','NOTE','BattleManager_onEscapeFailure','ShowPortraitsBorderStyle','repositionEnemiesByResolution','CmdIconOptions','resetBreakShield','wholeActionSet','1mEsZYe','CmdIconAutoBattle','processActorCommandCancelTPB','WaitForMovement','_namesCount','_motionType','alive\x20enemies','XPActorCommandLines','innerHeight','updateAngleCalculations','setupMotionBlurImpactFilter','_battlerName','Game_Action_setAttack','nextActiveWeaponSlot','type','itemLineRect','list','ATTACK','setFullActionsPTB','note','PostDamage%1JS','_floatWholeDuration','updateAttachmentSprites','isPlaytest','join','Scene_Battle_createPartyCommandWindowIBS','makeTargetsBattleCore','updateTargetPosition','updateBattlerContainer','iconHeight','initMembersBattleCore','_lastRegenFrameCount','rowSpacing','ActSeq_Mechanics_Multipliers','PostStartActionJS','Spriteset_Battle_createLowerLayer','contents','_floatDuration','showAnimation','currentClass','_commonEventKey','+%1','onMoveEnd','clearNameTempVisibility','drawItemImage','AutoBattleRect','abs','AS\x20TARGET','_back1Sprite','JS\x20%1APPLY\x20%2','forActor','canInput','_battleCoreNoElement','_effectType','ActSeq_Mechanics_BreakShieldReset','isMagicSkill','measureTextWidth','HP_Flat','ActiveTpbOptionsMessage','Scene_Map_initializeAfter','_updateClientArea','ActSeq_Mechanics_TextPopup','HITTYPE_CERTAIN','Scene_Battle_selectNextCommand','CreateCutinSettings','Game_Action_testApply','removeChildFromUiContainer','Targets','nextActor','attack','updateOnceParallelInterpreters','pointX','VisuMZ_3_ActSeqProjectiles','ActSeq_BattleLog_Refresh','Game_Actor_equips','VisuMZ_4_BreakShields','_currentActor','addEscapeCommand','BattleManager_abort','ActSeq_Inject_AnimationEnd','singleSkill','isAlwaysHidden','Scene_Battle_createActorCommandWindowIBS','preemptive','ActSeq_Impact_ZoomBlurTargetCenter','getEnemyIdWithName','checkBattleEnd','PreStartBattleJS','battleGrow','buffAdd','setReturnWindow','turns','playCancel','motionType','VisuMZ_3_BoostAction','updateFlip','effects','WaitForZoom','AutoBattleMsg','stypeId','ActSeq_Animation_BalloonAnimation','battleUIOffsetY','svAnchorY','debuffColor','StatusWindowAttachmentFront','ShowCurrentState','ActSeq_Zoom_Scale','iconIndex','TpGaugeOffsetY','powerDownColor','partyCommandWindowRectXPStyle','waitForFloat','drawActorStateData','autoBattleWindowRect','AnchorX','▼%1','AllowRandomSpeed','isCTB','_lastAction','SkillItemBorderCols','isAnimationPlaying','updateKeyboardKeys','ActSeq_Horror_TVRemove','sleep','SvMotionIdleSolo-%1-%2','_enemies','svActorHorzCells','PreDamageAsUserJS','performReflection','setBattlePortrait','ActSeq_Angle_WaitForAngle','setBattler','emulateActionEffect','filter','_angleRevertOnFinish','setBattlerFlip','isPreviousSceneBattleTransitionable','Status\x20is\x20currently\x20normal.','drawItemActorFace','isEscapeCommandEnabled','selectNextCommandTpb','_doubleTouch','setBattlerBattleCore','float','Scene_Battle_stop','battleCameraData','VisuMZ_2_WeaponSwapSystem','placeTimeGauge','\x5cC[%1]','STB','enemyHpGaugeRate','_armorPenetration','_endingBattle','ActSeq_Impact_Negative','_flipScaleX','DigitGroupingDamageSprites','_shadowScaleX','randomInt','_forcing','Game_Map_battleback2Name','Scene_Battle_updateStatusWindowPosition','Game_Action_executeDamage','Game_Action_isForRandom','endInBattleStatus','surprise','COBWEB','DamageStyleList','PRE-','ActSeq_Camera_Offset','makeTargetsBattleCoreJS','friendsUnit','ActSeq_Horror_GlitchRemove','_partyCommandWindow','VisuMZ_3_WeaknessDisplay','BattleManager_onEncounter','applyImmortal','States','onDisabledPartyCommandSelection','performRecovery','wtypeId','EnemyOffsetY','alive\x20actors\x20not\x20user','buffNameFmt','BattleManager_selectNextCommand','applyResultSwitches','_uiContainer','Game_System_initialize','addOptionsCommand','powerUpColor','Sprite_Battleback_adjustPosition','Window_BattleLog_performActionStart','ShowReflect','WaitForNewLine','prototype','autoBattle','Game_Battler_performEvasion','helpWindowRectBorderStyle','isShownOnBattlePortrait','isPartyTpbInputtable','isGrowing','_skillIDs','endBattle','+%1\x20MP','isQueueOptionsMenu','ActSeq_Cutin_WaitForExit','drawText','SceneManager_isSceneChanging','ParseItemNotetags','scrollTo','turnOrderChangeOTB','processBorderActor','drawItemStyleIconText','_createEffectsContainer','displayCounter','onJumpEnd','isLearnedSkill','processBattleBalloonRequests','opponentsUnit','gainFullActionsPTB','AutoBattleBgType','displayBuffs','GetActionSequenceSpecialTarget','criticalHitFlat','noise','updateStyleOpacity','getBattlePortraitOffsetY','isAtbChargingState','Game_Action_evalDamageFormula','isAffectedByBreakShield','GetParamIcon','invokeMagicReflection','getStypeIdWithName','createBattleFieldBattleCore','battleback2Name','createDigits','updatePhase','createActorCommandWindowBattleCore','drawBattlerData','battleStatusWindowAnimationContainer','drawActorClass','Scale','Sprite_Actor_updateFrame','setBattleCameraTargets','setEnemyWindowMode','_targets','battleAngle','isMVAnimation','dimColor1','jsScaleToFit','isCancelTriggered','CommandVisible','addChildToBack','gainBravePoints','needsActorInputCancel','_jumpDuration','battlerShadowScaleY','round','\x20to\x20%1\x20midbattle.','parseLocalizedText','Sprite_Battler_update','close','ShowActorGauge','addDebuff','SvBattlerSolo-%1-%2','actionSplicePoint','moveBattlerHomeToPoint','setCommonEvent','isATB','_cancelButton','isPreviousScene','AddHpGaugeOption','updateBitmap','updateCustomActionSequence','isForAnyoneFocusOpponents','WaitCount2','param','checkAutoCustomActionSequenceNotetagEffect','onEncounterBattleCore','normalHelp','isOpenAndActive','addedBuffs','_enemySprite','ShakeFlinch','_drawTextBody','changeWeather','prepareBorderActor','addAutoBattleCommands','ActSeq_Camera_WaitForCamera','setHelpWindow','index','process_VisuMZ_BattleCore_BaseTroops','floor','createCommandVisibleJS','AS\x20USER','adjustPosition_ScaleDown','ActSeq_Horror_TVCreate','hpDamage','increaseTotal','AutoBattleCancel','Scene_Battle_startActorSelection','Scene_Boot_onDatabaseLoaded','battlerShadowScaleX','AllEnemiesText','fontFace','Game_Interpreter_command301','resetResultSwitches','onEscapeSuccess','Sprite_Battler_damageOffsetY','allowCollapse','Sprite_Actor_initMembers','text','ActSeq_Impact_MotionBlurScreen','battleCoreResumeLaunchBattle','mmp','ALL\x20SKILLS','cutinExit','AutoBattle','CriticalHitMultiplier','ActSeq_Animation_AttackAnimation','ActSeq_Weapon_ClearActiveWeapon','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','PreApplyAsUserJS','value1','DigitGrouping','makeTargetSprites','clearOnceParallelInterpreters','processOk','dead','createActorCommandWindow','EndBattlePopups','_defeatedEnemies','performMoveToPoint','Spriteset_Battle_updateActors','coreEngineRepositionEnemies','isForNotUser','getHardDamageCap','Game_Action_makeDamageValueDisperse','ActSeq_Movement_MoveToJsPoint','Mirror','weapons','_jumpHeight','ActSeq_Impact_MotionTrailRemove','itemRect','MAT','extendTroopMembers','SyncBuffExpire','DualWield','trim','drawActorName','attackMotions','statesMaxWidth','commandFight','alive\x20actors','_jumpWholeDuration','getBattlePortraitFilename','CriticalColor','WaitForEffect','createMultiTargetWindows','createCommandNameWindow','stepFlinch','autoBattleAtStart','ExtDisplayedParams','BravePoints','_cursorArea','textAlign','AutoAddState','ActionEffect','WtypeId','HITTYPE_MAGICAL','canBattlerMove','Game_Action_isForFriend','clearAllVisualCutins','checkShowHideBattleNotetags','deselect','call','displayTpDamage','StyleON','addStatusCommand','USER-DEFINED\x203','comboWindowOffsetY','VisuMZ_3_SideviewBattleUI','Window_BattleLog_pushBaseLine','ActSeq_Mechanics_SwapWeapon','boxWidth','finishActorInput','maxLines','opacitySpeed','isInputting','callOptions','positionOffsetY','ActSeq_Grid_MoveTargetsInDirection','_freezeMotionData','StepDistanceY','symbol','refreshStatusWindow','isFightCommandEnabled','ShowMissEvasion','command3011','currentValue','ScaleToFit','open','battleFloat','ENEMY_OFFSET_X','addCombatLogCommand','addCommand','addPartyCommand','Spriteset_Battle_createBattleField','ActSeq_Zoom_WaitForZoom','isForOne','Sprite_Battler_damageOffsetX','ShowPortraits','changeTurnOrderByCTB','disarmMpLifeSteal','endIcon','anchor','ShowButton','enemyHiddenParameter','AniDuration','createChildSprite','disarmHpLifeSteal','setLastPluginCommandInterpreter','commandNameWindowDrawBackground','_weaponSprite','head','setWaitMode','resetFontSettings','PopupPosition','result','Sprite_Actor_createStateSprite','applyHardDamageCap','gainHalfActionsPTB','AspectColor','isFriendly','battleLayoutStyle','_totalHits','updateStaticSvBattlerFrames','ActSeq_Weapon_NextActiveWeapon','BattleManager_checkBattleEnd','_damageContainer','commandStyle','offsetY','ActSeq_Impact_MotionBlurTarget','Scene_Battle_commandEscape','removeChild','NameAlwaysVisible','ActSeq_Mechanics_BreakShieldChange','selectAllActors','ActSeq_Camera_FocusTarget','stateColor','FilenameJS','jsScaleDown','addItemCommand','arRedFlat','isGuardWaiting','_stateSprite','PreDamage%1JS','softDamageCap','WaitForSkew','isBattlerGrounded','NextTurn','children','helpWindowRect','criticalDmgRate','loadOtherActorImages','resize','canEscape','createDamageCounterWindow','process_VisuMZ_BattleCore_jsFunctions','ActSeq_ChangeAngle','_battleCoreBattleStartEvent','BattleManager_onEscapeSuccess','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','WeaponTypeID','getItemDamageAmountLabelOriginal','setMoveEasingType','setHome','stop','createInBattleStatusWindow','PopupOffsetY','ResetOffset','BattleVictoryJS','totalDmgFmt','performCounter','removedBuffs','WaitForProjectile','isTpbReady','isOptionsCommandAdded','wait','FvAniEachTarget','%1StartBattleJS','isForFriend','shouldHideBattleEndPopups','start','negativeHpLifeSteal','QoL','updateLink','ActSeq_BattleLog_PopBaseLine','isDebuffAffected','StatusWindow_RectJS','border','PostEndActionJS','svBattlerAnchorX','isSpriteVisible','dead\x20battlers','negativeMpLifeSteal','BattleManager_startInput','actorCommandWindowRect','BattleCmdList','ActSeq_Movement_WaitForMovement','displayActionResults','BgType','ActSeq_Movement_WaitForSkew','isDrain','GetActionSequenceSpecialTargetWithFlags','lastBattleSkill','ArPenRate','_helpWindow','addBattlerAspect','isCustomBattleScope','clearActiveWeaponSlot','mpHealingFmt','jsOneForOne','updateBattlebackBitmap2','clearDamagePopup','Scene_Battle_startPartyCommandSelection','Game_Party_addActor','ActSeq_DB_DragonbonesMotionAni','ActSeq_Grid_TraverseToNode','Game_BattlerBase_canGuard','alive\x20battlers\x20not\x20target','isAnyoneFloating','bitmap','skill','reduce','pow','mhp','itemEffectRecoverMp','bitmapHeight','Scene_Battle_helpWindowRect','attachSpritesToDistortionSprite','AutoMeleeAoE','Game_Action_setSkill','isAnyoneChangingOpacity','displayMiss','addedStateObjects','ConfigManager_applyData','Sprite_StateIcon_updateFrame','hitIndex','drawingAreaWidth','clearRect','displayAffectedStatus','setText','find','_speed','allBattleMembers','isOpen','status','ActSeq_Element_AddElements','getItemDamageAmountLabelBattleCore','ActSeq_Movement_MoveBy','HP_Rate','getWtypeIdWithName','clearBattleCoreData','StatusWindowAttachmentBackOffsetX','isSTB','colSpacing','_targetBattlerKey','isChangingOpacity','onHomeMoveEnd','sort','enemyShowParametersAlways','_motion','Scene_Battle_start','BattleCore','playCursor','updateEffectsContainer','_enemyWindow','missile','_colorTone','FlinchDuration','sliceMax','_baseY','refreshDimmerBitmap','MDF','battlerSmoothImage','_animation','setCustomDamageFormula','_partyWindow','stepForward','inBattle','createAllWindows','Scene_Battle_commandFight','commandOptions','displayEvasion','padding','_lastHpDamage','_makeCursorAlpha','parallaxScrollYinvertEnemy','arPenRate','Game_Action_makeTargets','POST-','performActionEndMembers','duration','setupChild','displayItemMessage','sliceMin','Scene_Battle_createHelpWindow','Game_Action_clear','HpGaugeOffsetY','min','all\x20targets','updateShadow','ShuffleArray','left','_angleDuration','ParseSkillNotetags','CheckSkillCommandShowSwitches','addSkillCommands','onEncounter','ActSeq_Movement_HomeReset','isCommandEnabled','animationShouldMirror','BattleLogRectJS','Override','setupDesaturateImpactFilter','MaxLines','jsScaleUp','VisuMZ_0_CoreEngine','ItemID','playBattleVoice','\x5cC[5](Turns\x20%2%1\x5cC[5])\x5cC[0]','clamp','animation','_totalDamage','_waitMode','moveBattlerDistance','_pagedownButton','parse','updateActors','_list','ActSeq_Mechanics_RemoveState','Game_Temp_initialize','<CENTER>%1','jsAccuracyAsUser','StateOverlayOffsetY','HomePosJS','_inputting','ForceRandom','_returnWindow','CheckVisibleSkillNotetags','AspectIcon','isStateAffected','Scene_Map_launchBattle','BackColor','updateBorderStyle','redrawForGaugeRate','initElementStatusCore','loop','processRandomizedData','fontSize','Window_ActorCommand_initialize','isNextSceneBattleTransitionable','isNegativeLifeSteal','targetDistortionSpritePosition','createEnemySprite','Scene_Battle_terminate','ShowCounter','dead\x20actors','BattleLog','AddOption','Text','damage','loadSystem','guard','Game_Action_numRepeats','Game_Temp_requestAnimation','_executeHpDamage','Sprite_Animation_targetSpritePosition','cancelLifeSteal','command119','addedDebuffs','command339','performAction','isNameTemporarilyVisible','PostDamageJS','faceRect','BattlebackScale','svBattlerShadowVisible','ActSeq_Mechanics_StbExtraAction','attackAnimationId1','ActSeq_Mechanics_PtbAlterCost','hasSvBattler','DisplayAction','actionBattleCoreJS','ActSeq_Mechanics_StateTurnsChangeBy','changeTextColor','addAttackCommand','_targetAngle','createPartyCommandWindow','updateShadowVisibility','ActSeq_Mechanics_AnalyzeWeakness','processAbort','currentSymbol','createStatesWindow','checkShowHideSkillNotetags','performMiss','NameAttachStateIcon','Users','bind','performShakeFlinch','getSkillTypes','updateDuration','Scene_Battle_createAllWindows_ComboWindow','ActSeq_Element_Clear','Sprite_Enemy_setBattler','isAttack','ParseClassNotetags','_branch','ceil','debuffNameFmt','findSymbolExt','processForcedAction','actorId','isAnimationShownOnBattlePortrait','AutoMeleeSolo','addSingleSkillCommand','Sprite_Enemy_updateBossCollapse','Settings','_tempBattler','obj','setStateTurns','Exploiter','_battlerContainer','Window_BattleLog_clear','itemWindowRect','isTimeActive','processDrawEnemyBattler','ActSeq_Movement_WaitForScale','Actions','isUndecided','ActSeq_Mechanics_AddBuffDebuff','_performDamageMotion','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','testApply','Scene_Battle_createCancelButton','extraPositionY','performWeaponAnimation','ActionEnd','_pageupButton','ShakeFlinchPower','retrieveBattleBalloon','Scene_Map_initialize','drawItemStatusXPStyle','Game_Action_executeMpDamage','numTargets','makeStateName','isStateResist','ActSeq_Movement_FaceTarget','_createClientArea','makeTurnsText','freezeMotion','displayHpDamage','onFloatEnd','Window_BattleEnemy_show','_target','okTargetSelectionVisibility','textWidth','font','balloonId','Game_Interpreter_terminate','CriticalHitFlat','updatePageButtonVisibility','setSkill','deadMembers','ActSeq_Impact_ZoomBlurPoint','setSubject','MIN_SAFE_INTEGER','SwitchMissEvade','MotionFrameWait','displayAction','drawItemStyleIcon','battleback1Name','NameLegacy','Actor','Window_BattleLog_refresh','Parse_Notetags_Targets','isPTB','_motionSpeed','setImmortal','processTurn','startDamagePopup','VisuMZ_2_PartySystem','ParseAllNotetags','addLoadListener','performMoveToTargets','battlerName','VisuMZ_2_AggroControlSystem','PostDamageAsTargetJS','MUSIC','StatusWindow_BgType','initialize','isTpbMainPhase','SvWeaponSolo-%1-%2','FlashColor','Frame','process_VisuMZ_BattleCore_CommonEventKeys','ShowCounterWait','motionSpeed','2944145jaPNoD','isTickBased','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','concat','_pattern','ActSeq_Mechanics_CtbSpeed','CriticalDuration','Scene_Battle_onEnemyCancel','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','isForAnyoneFocusFriends','skillTypes','TimeScale','Window_BattleLog_displayCurrentState','visualCutinPortraitFilename','onRegeneratePlayStateAnimation','itemCri','commandNameWindowDrawText','CheckVisibleBattleNotetags','VisuMZ_2_BattleSystemETB','createBattleField','startSpin','createEnemyWindow','checkSubstitute','ActSeq_Grid_AnimationTypeAtNode','commandStyleCheck','uiMenuStyle','BattleSystemCTB','WaitForExit','_weather','_homeY','_floatHeight','ScaleY','frameVisible','battlerHue','adjustPosition_1for1','_inBattleStatusMode','isForOpponentBattleCore','setupRgbSplitImpactFilter','isConfused','setupBlueRedInvertImpactFilter','iconText','Filename','CurrentTurn','EXCLAMATION','BattleManager_processAbort','performLifeSteal','itemTextAlign','_scene','\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','_tpbNeedsPartyCommand','updateFloat','multiTargetWindowRect','item','performActionStart','gradientFillRect','virtualClick','Window_Options_statusText','substitute','getFullActionsPTB','ShowAddedDebuff','CmdIconStatus','enemyShowParametersIfDefeated','clearFreezeMotion','applyFreezeMotionFrames','toString','ATK','_battlePortrait','Game_Enemy_setup','loadEnemy','isCustomActionSequence','Scene_Battle_onActorCancel','_aspectData'];_0x3613=function(){return _0x4b0644;};return _0x3613();}var $comboWindowReset=function(){const _0x4143de=_0x58cf34;if(!SceneManager['isSceneBattle']())return;const _0x14edf0=SceneManager[_0x4143de(0xb85)]['_damageCounterWindow'];if(_0x14edf0)_0x14edf0['resetCounter']();};Window_DamageCounter[_0x58cf34(0x8ef)][_0x58cf34(0x248)]=function(_0x2eb4cb){const _0x14ba3b=_0x58cf34;this[_0x14ba3b(0x7b7)]+=Math[_0x14ba3b(0x92e)](_0x2eb4cb);const _0x30d65e=Window_DamageCounter['SETTINGS'];this[_0x14ba3b(0xc1a)]=_0x30d65e[_0x14ba3b(0xaf5)],this[_0x14ba3b(0x7b7)]>=_0x30d65e['minimumHits']&&(this[_0x14ba3b(0x782)]=_0x30d65e['minimumStayDuration']);};var $comboWindowIncreaseHits=function(_0x326c15){const _0x34050a=_0x58cf34;if(!SceneManager['isSceneBattle']())return;const _0x36f4da=SceneManager['_scene'][_0x34050a(0x607)];if(_0x36f4da)_0x36f4da[_0x34050a(0x248)](_0x326c15);};Window_DamageCounter[_0x58cf34(0x8ef)]['increaseTotal']=function(_0x275fd1){const _0x1eb22f=_0x58cf34;this[_0x1eb22f(0x35a)]+=Math['round'](_0x275fd1);const _0x33d910=Window_DamageCounter['SETTINGS'];this[_0x1eb22f(0xc1a)]=_0x33d910[_0x1eb22f(0xaf5)],this[_0x1eb22f(0x7b7)]>=_0x33d910[_0x1eb22f(0x726)]&&(this[_0x1eb22f(0x782)]=_0x33d910[_0x1eb22f(0x51a)]);};var $comboWindowIncreaseDamage=function(_0x2d5ffe){const _0x23dd41=_0x58cf34;if(!SceneManager[_0x23dd41(0x3d3)]())return;const _0x43032e=SceneManager['_scene'][_0x23dd41(0x607)];if(_0x43032e)_0x43032e['increaseTotal'](_0x2d5ffe);},$comboWindowIncreaseHealing=function(_0x12b854){const _0x204d81=_0x58cf34;if(!SceneManager[_0x204d81(0x3d3)]())return;const _0x128014=SceneManager[_0x204d81(0xb85)][_0x204d81(0x607)];if(_0x128014)_0x128014[_0x204d81(0x957)](-_0x12b854);};VisuMZ[_0x58cf34(0xa6b)]['Scene_Battle_createAllWindows_ComboWindow']=Scene_Battle[_0x58cf34(0x8ef)]['createAllWindows'],Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0xa7c)]=function(){const _0x4528ed=_0x58cf34;this[_0x4528ed(0xa00)](),VisuMZ[_0x4528ed(0xa6b)][_0x4528ed(0xaf6)]['call'](this);},Scene_Battle['prototype'][_0x58cf34(0xa00)]=function(){const _0x4c9740=_0x58cf34;if(!Window_DamageCounter[_0x4c9740(0x6b5)][_0x4c9740(0x38d)])return;const _0x45eb7b=this[_0x4c9740(0x6e7)](),_0x501317=new Window_DamageCounter(_0x45eb7b);this['addWindow'](_0x501317),this['_damageCounterWindow']=_0x501317;},Scene_Battle[_0x58cf34(0x8ef)][_0x58cf34(0x6e7)]=function(){const _0x2e8226=_0x58cf34;if(VisuMZ[_0x2e8226(0xa6b)][_0x2e8226(0xb05)][_0x2e8226(0x7ba)]['ComboWindow_RectJS'])return VisuMZ[_0x2e8226(0xa6b)][_0x2e8226(0xb05)][_0x2e8226(0x7ba)]['ComboWindow_RectJS'][_0x2e8226(0x9a4)](this);const _0x29fc61=Math[_0x2e8226(0xafc)](Graphics[_0x2e8226(0xc78)]/0x4),_0x1ac0d8=this[_0x2e8226(0x7b2)](0x2,!![]),_0x4ad0d7=0x0+this['comboWindowOffsetX'](),_0x3a45e0=Math['round'](Graphics[_0x2e8226(0x1cb)]*0x1/0x3)+this[_0x2e8226(0x9a9)]();return new Rectangle(_0x4ad0d7,_0x3a45e0,_0x29fc61,_0x1ac0d8);},Scene_Battle['prototype']['comboWindowOffsetX']=function(){const _0x1d6e4f=_0x58cf34;return Window_DamageCounter[_0x1d6e4f(0x6b5)][_0x1d6e4f(0x250)];},Scene_Battle['prototype']['comboWindowOffsetY']=function(){const _0x3286b1=_0x58cf34;return Window_DamageCounter[_0x3286b1(0x6b5)][_0x3286b1(0x9b3)];},Window_DamageCounter[_0x58cf34(0x8ef)][_0x58cf34(0x6a2)]=function(){const _0x397313=_0x58cf34;Window_Base[_0x397313(0x8ef)][_0x397313(0x6a2)][_0x397313(0x9a4)](this),this[_0x397313(0x5c2)](),this[_0x397313(0xc39)]();},Window_DamageCounter[_0x58cf34(0x8ef)][_0x58cf34(0x5c2)]=function(){const _0x4081da=_0x58cf34;if(this['_updateDuration']<=0x0)return;const _0x4a1b61=this[_0x4081da(0xc1a)];this[_0x4081da(0x9e0)]=this[_0x4081da(0x7b7)],this[_0x4081da(0xaa7)]=(this[_0x4081da(0xaa7)]*(_0x4a1b61-0x1)+this[_0x4081da(0x35a)])/_0x4a1b61,this[_0x4081da(0xc1a)]--,this[_0x4081da(0xc1a)]<=0x0&&(this[_0x4081da(0x9e0)]=this[_0x4081da(0x7b7)],this[_0x4081da(0xaa7)]=this[_0x4081da(0x35a)]),this[_0x4081da(0x7ff)]();},Window_DamageCounter[_0x58cf34(0x8ef)][_0x58cf34(0xc39)]=function(){const _0x21e460=_0x58cf34,_0x3f4995=Window_DamageCounter[_0x21e460(0x6b5)],_0x55ef00=this['visibilityState'](),_0xe77ab3=_0x3f4995[_0x21e460(0x9b0)]||0x1;if(_0x55ef00&&this[_0x21e460(0x2ad)]<0xff)this['contentsOpacity']+=_0xe77ab3;else!_0x55ef00&&this[_0x21e460(0x2ad)]>0x0&&(this['contentsOpacity']-=_0xe77ab3,this['x']+=_0x3f4995['fadeShiftX']||0x0,this['y']+=_0x3f4995[_0x21e460(0x314)]||0x0);},Window_DamageCounter[_0x58cf34(0x8ef)][_0x58cf34(0x794)]=function(){const _0x3d8fe6=_0x58cf34,_0x540fdc=Window_DamageCounter[_0x3d8fe6(0x6b5)];if(this[_0x3d8fe6(0x7b7)]>=_0x540fdc[_0x3d8fe6(0x726)])return!![];if(this['_visibleDuration']-->0x0)return!![];return![];},VisuMZ['BattleCore'][_0x58cf34(0x4b0)]=Game_Action[_0x58cf34(0x8ef)][_0x58cf34(0x762)],Game_Action['prototype'][_0x58cf34(0x762)]=function(_0x371472,_0x37f7e5){const _0x3b04b3=_0x58cf34;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x37f7e5),VisuMZ['BattleCore'][_0x3b04b3(0x4b0)][_0x3b04b3(0x9a4)](this,_0x371472,_0x37f7e5);},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xcdd)]=BattleManager[_0x58cf34(0xbb9)],BattleManager[_0x58cf34(0xbb9)]=function(){const _0x5acdca=_0x58cf34;$comboWindowReset(),VisuMZ['BattleCore'][_0x5acdca(0xcdd)][_0x5acdca(0x9a4)](this);},Window_DamageCounter[_0x58cf34(0x8ef)][_0x58cf34(0x7ff)]=function(){const _0x296c76=_0x58cf34;this[_0x296c76(0x852)]['clear'](),this[_0x296c76(0x810)](),this['x']=this[_0x296c76(0x205)],this['y']=this[_0x296c76(0x711)];},Window_DamageCounter[_0x58cf34(0x8ef)]['textAlignment']=function(){const _0x4a7b71=_0x58cf34,_0x106309=Window_DamageCounter['SETTINGS'];return _0x106309[_0x4a7b71(0x99a)]||'left';},Window_DamageCounter[_0x58cf34(0x8ef)][_0x58cf34(0x5c6)]=function(){const _0x4f3bbd=_0x58cf34,_0x24f00e=Window_DamageCounter[_0x4f3bbd(0x6b5)];let _0x4ab415=this[_0x4f3bbd(0xaa7)]>=0x0?_0x24f00e[_0x4f3bbd(0x2bd)]:_0x24f00e['hitsHealFmt'];return _0x4ab415[_0x4f3bbd(0x1d3)](Math[_0x4f3bbd(0x85c)](Math[_0x4f3bbd(0xafc)](this[_0x4f3bbd(0x9e0)])));},Window_DamageCounter['prototype'][_0x58cf34(0xbd1)]=function(){const _0x527d41=_0x58cf34,_0x21ec29=Window_DamageCounter[_0x527d41(0x6b5)];let _0x2c0352=this['_totalDamage']>=0x0?_0x21ec29[_0x527d41(0xa0f)]:_0x21ec29[_0x527d41(0x21a)];return _0x2c0352[_0x527d41(0x1d3)](Math['abs'](Math['round'](this[_0x527d41(0xaa7)])));},Window_DamageCounter[_0x58cf34(0x8ef)][_0x58cf34(0x810)]=function(){const _0x2fca44=_0x58cf34;if(VisuMZ['BattleCore'][_0x2fca44(0xb05)]['ComboWindow']['ComboWindow_DrawJS'])return VisuMZ[_0x2fca44(0xa6b)][_0x2fca44(0xb05)][_0x2fca44(0x7ba)][_0x2fca44(0x312)][_0x2fca44(0x9a4)](this);let _0x1f1f1=0x0,_0x116203=0x0;const _0x1be546=this['hitText'](),_0x282b34=this[_0x2fca44(0xc2a)](_0x1be546);if(this[_0x2fca44(0x476)]()===_0x2fca44(0x25b))_0x1f1f1=this[_0x2fca44(0x6c7)]-this['itemPadding']()-_0x282b34['width'];else this[_0x2fca44(0x476)]()===_0x2fca44(0x318)?_0x1f1f1=Math[_0x2fca44(0x951)]((this[_0x2fca44(0x6c7)]-_0x282b34[_0x2fca44(0xc78)])/0x2):_0x1f1f1=this['itemPadding']();this[_0x2fca44(0x6cd)](_0x1be546,_0x1f1f1,_0x116203),_0x116203+=Math[_0x2fca44(0xafc)](this[_0x2fca44(0x7b1)]()*0x2/0x3);const _0x49dd39=this['damageText'](),_0x233c3f=this[_0x2fca44(0xc2a)](_0x49dd39);if(this[_0x2fca44(0x476)]()===_0x2fca44(0x25b))_0x1f1f1=this['innerWidth']-this[_0x2fca44(0x4d5)]()-_0x233c3f[_0x2fca44(0xc78)];else this[_0x2fca44(0x476)]()===_0x2fca44(0x318)?_0x1f1f1=Math[_0x2fca44(0x951)]((this[_0x2fca44(0x6c7)]-_0x233c3f[_0x2fca44(0xc78)])/0x2):_0x1f1f1=this[_0x2fca44(0x4d5)]();this[_0x2fca44(0x6cd)](_0x49dd39,_0x1f1f1,_0x116203);};function Window_InBattleStatus(){this['initialize'](...arguments);}Window_InBattleStatus['prototype']=Object[_0x58cf34(0x5fa)](Window_StatusBase[_0x58cf34(0x8ef)]),Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x408)]=Window_InBattleStatus,Window_InBattleStatus[_0x58cf34(0x6b5)]={'bgType':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x691)][_0x58cf34(0xb4d)]??0x0,'statusGraphic':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x691)][_0x58cf34(0x4dd)]??'face','statusHelpDesc':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)]['InBattleStatus'][_0x58cf34(0x537)]??_0x58cf34(0x38f),'pageButtons':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)]['InBattleStatus'][_0x58cf34(0x721)]??!![],'pageButtonPosition':VisuMZ[_0x58cf34(0xa6b)]['Settings'][_0x58cf34(0x691)][_0x58cf34(0x25d)]??'left','pageOffsetX':VisuMZ['BattleCore']['Settings'][_0x58cf34(0x691)][_0x58cf34(0x22f)]??0x0,'pageOffsetY':VisuMZ['BattleCore'][_0x58cf34(0xb05)][_0x58cf34(0x691)][_0x58cf34(0x355)]??0x0,'buffValueFmt':VisuMZ['BattleCore'][_0x58cf34(0xb05)][_0x58cf34(0x691)][_0x58cf34(0x293)]??'▲%1','debuffValueFmt':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x691)][_0x58cf34(0x1f8)]??_0x58cf34(0x8a1),'enemyStatus':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x691)][_0x58cf34(0x358)]??!![],'enemyShowLevel':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x691)][_0x58cf34(0x519)]??!![],'enemyHpGaugeRate':!![],'enemyMpGaugeRate':!![],'enemyTpGaugeRate':!![],'enemyHiddenParameter':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x691)][_0x58cf34(0x9ce)]??_0x58cf34(0xcd6),'enemyShowParametersAlways':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)]['InBattleStatus'][_0x58cf34(0xa68)]??![],'enemyShowParametersIfBattleTest':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)]['InBattleStatus']['enemyShowParametersIfBattleTest']??!![],'enemyShowParametersIfDefeated':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x691)][_0x58cf34(0xb93)]??!![]},Window_InBattleStatus[_0x58cf34(0x8ef)]['initialize']=function(_0x400781){const _0x43f732=_0x58cf34;Window_StatusBase[_0x43f732(0x8ef)]['initialize'][_0x43f732(0x9a4)](this,_0x400781),this[_0x43f732(0x658)](Window_InBattleStatus[_0x43f732(0x6b5)][_0x43f732(0x1e8)]),this[_0x43f732(0xac6)](),this[_0x43f732(0xaed)](),this[_0x43f732(0x257)]();},Window_InBattleStatus['prototype'][_0x58cf34(0x8b1)]=function(_0x81fb45){const _0xec379=_0x58cf34;this[_0xec379(0xc92)]=_0x81fb45,this[_0xec379(0x7ff)](),this[_0xec379(0xc4c)]&&this['_statesWindow'][_0xec379(0x8b1)](_0x81fb45);},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x9be)]=function(){const _0x3bcec3=_0x58cf34;Window_StatusBase[_0x3bcec3(0x8ef)][_0x3bcec3(0x9be)][_0x3bcec3(0x9a4)](this);if(this[_0x3bcec3(0xc4c)])this[_0x3bcec3(0xc4c)][_0x3bcec3(0x9be)]();this['updatePageButtonVisibility'](),Imported[_0x3bcec3(0x38a)]&&SceneManager[_0x3bcec3(0x824)](null);},Window_InBattleStatus['prototype'][_0x58cf34(0x932)]=function(){const _0x57b44c=_0x58cf34;Window_StatusBase['prototype'][_0x57b44c(0x932)]['call'](this);if(this[_0x57b44c(0xc4c)])this[_0x57b44c(0xc4c)]['close']();},Window_InBattleStatus[_0x58cf34(0x8ef)]['setReturnWindow']=function(_0x53f34f){const _0x271a2e=_0x58cf34;this[_0x271a2e(0xab6)]=_0x53f34f;},Window_InBattleStatus[_0x58cf34(0x8ef)]['getReturnWindow']=function(){const _0x96d46d=_0x58cf34;return this[_0x96d46d(0xab6)]||SceneManager[_0x96d46d(0xb85)][_0x96d46d(0xa79)];},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x6b0)]=function(){const _0x54a04e=_0x58cf34;Window_StatusBase[_0x54a04e(0x8ef)][_0x54a04e(0x6b0)][_0x54a04e(0x9a4)](this),this['loadOtherActorImages']();},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x9fd)]=function(){const _0x1e3e36=_0x58cf34;for(const _0x342278 of $gameParty[_0x1e3e36(0x7b4)]()){if(!_0x342278)continue;_0x342278[_0x1e3e36(0x688)]()&&ImageManager[_0x1e3e36(0x515)](_0x342278[_0x1e3e36(0x688)]()),_0x342278['battlerName']()&&ImageManager[_0x1e3e36(0x5cb)](_0x342278[_0x1e3e36(0xb49)]()),_0x342278[_0x1e3e36(0x66f)]&&ImageManager[_0x1e3e36(0x25a)](_0x342278['getMenuImage']());}},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0xac6)]=function(){const _0x33e7f9=_0x58cf34;this['_enemySprite']=new Sprite(),this[_0x33e7f9(0x947)][_0x33e7f9(0x9cc)]['x']=0.5,this[_0x33e7f9(0x947)][_0x33e7f9(0x9cc)]['y']=0x1,this[_0x33e7f9(0x3ac)](this['_enemySprite']);},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0xaed)]=function(){const _0x589cad=_0x58cf34,_0x3c5f62=this['statesWindowRect'](),_0x1cf36f=new Window_InBattleStatusStates(_0x3c5f62);this[_0x589cad(0x3ac)](_0x1cf36f),_0x1cf36f[_0x589cad(0x94e)](SceneManager[_0x589cad(0xb85)][_0x589cad(0xa32)]),this[_0x589cad(0xc4c)]=_0x1cf36f;},Window_InBattleStatus['prototype'][_0x58cf34(0x577)]=function(){const _0x3914cc=_0x58cf34,_0x39fb42=Window_InBattleStatusStates[_0x3914cc(0x6b5)][_0x3914cc(0x615)],_0x45db09=Math['min'](_0x39fb42,Math[_0x3914cc(0x951)](this[_0x3914cc(0xc78)]/0x2)),_0x1b307d=Graphics['boxWidth']>0x44c?this[_0x3914cc(0x725)]:this[_0x3914cc(0x7b1)]()*0x4+this['padding']*0x2,_0x4bf404=this[_0x3914cc(0xc78)]-_0x45db09,_0x353686=this[_0x3914cc(0x725)]-_0x1b307d;return new Rectangle(_0x4bf404,_0x353686,_0x45db09,_0x1b307d);},Window_InBattleStatus[_0x58cf34(0x8ef)]['createPageButtons']=function(){const _0x441853=_0x58cf34;if(!ConfigManager['touchUI'])return;if(!Window_InBattleStatus['SETTINGS'][_0x441853(0x721)])return;this[_0x441853(0xb1a)]=new Sprite_Button('pageup'),this['_pageupButton']['x']=this['pageButtonX']()+Window_InBattleStatus[_0x441853(0x6b5)]['pageOffsetX'],this[_0x441853(0xb1a)]['y']=this[_0x441853(0x4e5)]()+Window_InBattleStatus[_0x441853(0x6b5)]['pageOffsetY'];const _0x4035d6=this[_0x441853(0xb1a)]['x']+this[_0x441853(0xb1a)]['width'];this['_pagedownButton']=new Sprite_Button(_0x441853(0x629)),this['_pagedownButton']['x']=_0x4035d6+0x4,this[_0x441853(0xaaa)]['y']=this[_0x441853(0xb1a)]['y'],this[_0x441853(0x3ac)](this[_0x441853(0xb1a)]),this[_0x441853(0x3ac)](this[_0x441853(0xaaa)]),this[_0x441853(0xb1a)][_0x441853(0x680)](this['previousActor'][_0x441853(0xaf2)](this)),this[_0x441853(0xaaa)][_0x441853(0x680)](this[_0x441853(0x872)][_0x441853(0xaf2)](this));},Window_InBattleStatus[_0x58cf34(0x8ef)]['pageButtonX']=function(){const _0x5edc2b=_0x58cf34;if(Graphics[_0x5edc2b(0x9ad)]>0x44c&&Graphics[_0x5edc2b(0x1cb)]>0x2bc){if(Window_InBattleStatus[_0x5edc2b(0x6b5)][_0x5edc2b(0x25d)]===_0x5edc2b(0xa93)){let _0x2550fe=Math[_0x5edc2b(0xafc)]((-this['x']-0x64)/0x2);if(_0x2550fe>=-0x64)_0x2550fe=this[_0x5edc2b(0xa80)];return _0x2550fe;}else{const _0x5f3191=Graphics[_0x5edc2b(0x9ad)]-this['x']-this['width'];let _0x1387d=Math[_0x5edc2b(0x951)]((_0x5f3191-0x64)/0x2)+this[_0x5edc2b(0xc78)];return _0x1387d;}}else return this[_0x5edc2b(0xc78)]-0x64-this[_0x5edc2b(0xa80)]/0x2;},Window_InBattleStatus[_0x58cf34(0x8ef)]['pageButtonY']=function(){const _0x241745=_0x58cf34;return Graphics[_0x241745(0x9ad)]>0x44c&&Graphics[_0x241745(0x1cb)]>0x2bc?this[_0x241745(0x725)]-0x30-this[_0x241745(0xa80)]:0x30+this[_0x241745(0xa80)];},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x74a)]=function(){const _0xbe1b34=_0x58cf34;let _0x2a9da8=this['getBattleMembers']();if(_0x2a9da8[_0xbe1b34(0x3eb)]<=0x1&&!Window_InBattleStatus['SETTINGS'][_0xbe1b34(0x358)])return;let _0xa2f3f5=_0x2a9da8[_0xbe1b34(0xccf)](this['_battler']);_0xa2f3f5--;_0xa2f3f5<0x0&&(Window_InBattleStatus['SETTINGS'][_0xbe1b34(0x358)]&&(_0x2a9da8=this[_0xbe1b34(0x555)](!![])),_0xa2f3f5=_0x2a9da8[_0xbe1b34(0x3eb)]-0x1);const _0x2f984c=_0x2a9da8[_0xa2f3f5];this[_0xbe1b34(0x8b1)](_0x2f984c),SoundManager[_0xbe1b34(0xa6c)]();},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x872)]=function(){const _0x443a15=_0x58cf34;let _0xb72b0e=this[_0x443a15(0x555)]();if(_0xb72b0e[_0x443a15(0x3eb)]<=0x1&&!Window_InBattleStatus[_0x443a15(0x6b5)][_0x443a15(0x358)])return;let _0x3172c7=_0xb72b0e[_0x443a15(0xccf)](this[_0x443a15(0xc92)]);_0x3172c7++;_0x3172c7>=_0xb72b0e[_0x443a15(0x3eb)]&&(Window_InBattleStatus[_0x443a15(0x6b5)][_0x443a15(0x358)]&&(_0xb72b0e=this[_0x443a15(0x555)](!![])),_0x3172c7=0x0);const _0x573f4d=_0xb72b0e[_0x3172c7];this[_0x443a15(0x8b1)](_0x573f4d),SoundManager[_0x443a15(0xa6c)]();},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x555)]=function(_0x30474b){const _0x428c6b=_0x58cf34;let _0x3d9a4b=[];const _0x242a5f=_0x30474b?this[_0x428c6b(0xc92)][_0x428c6b(0x907)]():this[_0x428c6b(0xc92)][_0x428c6b(0x8d8)]();return _0x242a5f===$gameParty?_0x3d9a4b=$gameParty[_0x428c6b(0x623)]():_0x3d9a4b=$gameTroop[_0x428c6b(0x565)](),_0x3d9a4b['remove'](null);},Window_InBattleStatus['prototype']['update']=function(){const _0x3769eb=_0x58cf34;Window_Base[_0x3769eb(0x8ef)][_0x3769eb(0x6a2)][_0x3769eb(0x9a4)](this),this[_0x3769eb(0xc83)]();},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0xc83)]=function(){const _0xe2e817=_0x58cf34;if(this['isOpenAndActive']()){if(this[_0xe2e817(0x927)]())return this[_0xe2e817(0x5b8)]();if(Input['isRepeated'](_0xe2e817(0x25b)))return this[_0xe2e817(0x872)]();if(Input['isRepeated'](_0xe2e817(0xa93)))return this[_0xe2e817(0x74a)]();}},SoundManager['playCursor']=function(){const _0x2cf153=_0x58cf34;this[_0x2cf153(0x28b)](0x0);},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x945)]=function(){const _0x571dc5=_0x58cf34;return this[_0x571dc5(0xa59)]()&&this[_0x571dc5(0x1e4)];},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x927)]=function(){const _0x1eaafd=_0x58cf34;if(Input['isTriggered']('cancel'))return!![];if(TouchInput[_0x1eaafd(0xc75)]())return!![];return![];},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x5b8)]=function(){const _0x36eb54=_0x58cf34;SoundManager[_0x36eb54(0x88a)](),this[_0x36eb54(0x489)](),this[_0x36eb54(0xc4c)]&&(this['_statesWindow']['deselect'](),this[_0x36eb54(0xc4c)][_0x36eb54(0x489)]()),SceneManager[_0x36eb54(0xb85)]['endInBattleStatus']();},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0xb31)]=function(){const _0x5b5a73=_0x58cf34;if(!this['_pageupButton'])return;if(!this[_0x5b5a73(0xaaa)])return;const _0x4ed46b=$gameParty[_0x5b5a73(0x623)]()['length']>0x0||Window_InBattleStatus[_0x5b5a73(0x6b5)]['enemyStatus'];this['_pageupButton']['visible']=_0x4ed46b,this[_0x5b5a73(0xaaa)]['visible']=_0x4ed46b;},Window_InBattleStatus['prototype']['refresh']=function(){const _0x45c5c0=_0x58cf34;Window_StatusBase[_0x45c5c0(0x8ef)]['refresh'][_0x45c5c0(0x9a4)](this);if(this[_0x45c5c0(0x947)])this[_0x45c5c0(0x947)][_0x45c5c0(0x48f)]();this[_0x45c5c0(0x852)][_0x45c5c0(0xcdf)](),this[_0x45c5c0(0x220)][_0x45c5c0(0xcdf)]();if(!this[_0x45c5c0(0xc92)])return;this[_0x45c5c0(0x91b)]();},Window_InBattleStatus[_0x58cf34(0x8ef)]['drawBattlerData']=function(){const _0x29fe8e=_0x58cf34;if(VisuMZ[_0x29fe8e(0xa6b)][_0x29fe8e(0xb05)][_0x29fe8e(0x691)]['StatusWindow_DrawJS'])return VisuMZ[_0x29fe8e(0xa6b)][_0x29fe8e(0xb05)][_0x29fe8e(0x691)][_0x29fe8e(0x2d6)]['call'](this);{const _0x2a3964=this[_0x29fe8e(0xa63)]()/0x2,_0x2ab657=ImageManager['faceHeight'],_0x4dd291=_0x2ab657/0x2-this[_0x29fe8e(0x7b1)]()*1.5;this['drawActorGraphic'](this[_0x29fe8e(0xc92)],_0x2a3964+0x1,0x0,ImageManager[_0x29fe8e(0x80d)],_0x2ab657),this['drawActorSimpleStatus'](this[_0x29fe8e(0xc92)],_0x2a3964+0xb4,_0x4dd291);}{let _0x26981c=this[_0x29fe8e(0xa52)](),_0x341260=0x0,_0x185247=Math['ceil'](this[_0x29fe8e(0xa52)]()/0x2),_0x15e074=0x0;const _0x35f0eb=this[_0x29fe8e(0x744)]();let _0x5c3a87=_0x341260;const _0x4a5d91=this[_0x29fe8e(0x836)]-ImageManager[_0x29fe8e(0x4ee)],_0x49abfe=Math[_0x29fe8e(0xafc)](_0x35f0eb[_0x29fe8e(0x3eb)]/0x2)*this[_0x29fe8e(0x7b1)]();let _0x8891bc=Math[_0x29fe8e(0xafc)]((_0x4a5d91-_0x49abfe)/0x2)+ImageManager[_0x29fe8e(0x4ee)],_0x4b42d0=Math[_0x29fe8e(0x951)](_0x26981c/0x2);this[_0x29fe8e(0xc4c)]['y']!==0x0&&(this[_0x29fe8e(0xc4c)]['y']=_0x8891bc);for(const _0x14f3f3 of _0x35f0eb){this[_0x29fe8e(0x503)](_0x5c3a87,_0x8891bc,_0x4b42d0,this[_0x29fe8e(0x7b1)]()),this['drawParamData'](_0x14f3f3,_0x5c3a87,_0x8891bc,_0x4b42d0),_0x15e074++,_0x15e074%0x2===0x0?(_0x5c3a87=_0x341260,_0x8891bc+=this['lineHeight']()):_0x5c3a87=_0x185247;}}},Window_InBattleStatus['prototype'][_0x58cf34(0x6c0)]=function(){const _0x1c29c1=_0x58cf34;return VisuMZ[_0x1c29c1(0xa6b)][_0x1c29c1(0xb05)][_0x1c29c1(0x691)][_0x1c29c1(0x4dd)];},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x685)]=function(_0x46fb6a,_0x20ceed,_0x1801e0,_0xc0da5,_0x43aabc){const _0x5aa468=_0x58cf34;if(_0x46fb6a[_0x5aa468(0x40c)]())switch(this[_0x5aa468(0x6c0)]()){case _0x5aa468(0x671):break;case'sprite':this[_0x5aa468(0xc9e)](_0x46fb6a,_0x20ceed,_0x1801e0+0x1,_0xc0da5,_0x43aabc-0x2);break;case _0x5aa468(0x4e4):this[_0x5aa468(0x35e)](_0x46fb6a,_0x20ceed,_0x1801e0+0x1,_0xc0da5,_0x43aabc-0x2);break;default:this['drawItemActorFace'](_0x46fb6a,_0x20ceed,_0x1801e0,_0xc0da5,_0x43aabc);break;}else this['drawEnemyBattler'](_0x46fb6a,_0x20ceed,_0x1801e0,_0xc0da5,_0x43aabc);},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x8b8)]=function(_0x4588e9,_0x5f54ad,_0x5076f7,_0x3a8178,_0x4daee9){const _0x3630f8=_0x58cf34;_0x3a8178=_0x3a8178||ImageManager['faceWidth'],_0x4daee9=_0x4daee9||ImageManager['faceHeight'];const _0xd50624=ImageManager['faceWidth'],_0x39bc8d=_0x4daee9-0x2,_0x16005d=_0x5f54ad+Math[_0x3630f8(0x951)]((_0x3a8178-_0xd50624)/0x2);this[_0x3630f8(0x408)]===Window_MenuStatus&&this['changePaintOpacity'](_0x4588e9[_0x3630f8(0x4b2)]()),this['drawActorFace'](_0x4588e9,_0x16005d,_0x5076f7,_0xd50624,_0x39bc8d),this[_0x3630f8(0x79d)](!![]);},Window_InBattleStatus[_0x58cf34(0x8ef)]['drawItemActorSprite']=function(_0x12f001,_0x3e5bd0,_0xed98bc,_0xdec53e,_0x5bac7b){const _0x35c295=_0x58cf34;_0xdec53e=_0xdec53e||ImageManager[_0x35c295(0x80d)],_0x5bac7b=_0x5bac7b||ImageManager[_0x35c295(0x4ee)];const _0x3d0f22=_0x12f001[_0x35c295(0x688)](),_0x4b8d25=_0x12f001[_0x35c295(0x3d9)](),_0x5a9b49=ImageManager[_0x35c295(0x515)](_0x3d0f22),_0x52f895=ImageManager[_0x35c295(0x751)](_0x3d0f22),_0x200f7e=_0x5a9b49[_0x35c295(0xc78)]/(_0x52f895?0x3:0xc),_0x1312e0=_0x5a9b49['height']/(_0x52f895?0x4:0x8),_0x3fe6d3=_0xdec53e,_0x2d0dae=_0x5bac7b-0x2,_0x27569e=_0x3e5bd0+Math[_0x35c295(0x951)](_0x3fe6d3/0x2),_0x219dc5=_0xed98bc+Math[_0x35c295(0xafc)]((_0x5bac7b+_0x1312e0)/0x2);this[_0x35c295(0x408)]===Window_MenuStatus&&this[_0x35c295(0x79d)](_0x12f001[_0x35c295(0x4b2)]());const _0x3be7ed=Math[_0x35c295(0xa8f)](_0xdec53e,_0x200f7e),_0x86f768=Math['min'](_0x5bac7b,_0x1312e0),_0x21e396=Math['floor'](_0x3e5bd0+Math[_0x35c295(0x238)](_0xdec53e-_0x200f7e,0x0)/0x2),_0x593f8e=Math[_0x35c295(0x951)](_0xed98bc+Math[_0x35c295(0x238)](_0x5bac7b-_0x1312e0,0x0)/0x2),_0x5e5413=_0x52f895?0x0:_0x4b8d25,_0x573bf5=(_0x5e5413%0x4*0x3+0x1)*_0x200f7e,_0x84053c=Math[_0x35c295(0x951)](_0x5e5413/0x4)*0x4*_0x1312e0;this[_0x35c295(0x852)][_0x35c295(0x67c)](_0x5a9b49,_0x573bf5,_0x84053c,_0x3be7ed,_0x86f768,_0x21e396,_0x593f8e),this[_0x35c295(0x79d)](!![]);},Window_InBattleStatus['prototype'][_0x58cf34(0x35e)]=function(_0x5f08aa,_0x3be22e,_0x5ec3e5,_0x3ae03a,_0x41cc7e,_0x233748){const _0x3bcdc9=_0x58cf34;_0x3ae03a=_0x3ae03a||ImageManager[_0x3bcdc9(0x80d)],_0x41cc7e=_0x41cc7e||ImageManager[_0x3bcdc9(0x4ee)];const _0x200dd3=ImageManager[_0x3bcdc9(0x5cb)](_0x233748?_0x5f08aa[_0x3bcdc9(0x410)]():_0x5f08aa['battlerName']()),_0x3c97ba=_0x200dd3[_0x3bcdc9(0xc78)]/ImageManager[_0x3bcdc9(0x8ac)],_0xc781ac=_0x200dd3[_0x3bcdc9(0x725)]/ImageManager['svActorVertCells'],_0x24abe4=_0x3ae03a,_0x52162b=_0x41cc7e-0x2,_0x1d4673=_0x3be22e+Math[_0x3bcdc9(0x951)](_0x24abe4/0x2),_0x1c28c2=_0x5ec3e5+Math[_0x3bcdc9(0xafc)]((_0x41cc7e+_0xc781ac)/0x2);this[_0x3bcdc9(0x408)]===Window_MenuStatus&&this[_0x3bcdc9(0x79d)](_0x5f08aa[_0x3bcdc9(0x4b2)]());const _0x1fab76=_0x5f08aa['hasStaticSvBattler']&&_0x5f08aa[_0x3bcdc9(0x4aa)](),_0x28566d=0x0,_0x685356=0x0,_0x4287ef=_0x1fab76?_0x200dd3[_0x3bcdc9(0xc78)]:_0x3c97ba,_0x4b38cc=_0x1fab76?_0x200dd3[_0x3bcdc9(0x725)]:_0xc781ac,_0x4739e6=Math[_0x3bcdc9(0xa8f)](0x1,_0x3ae03a/_0x4287ef,_0x41cc7e/_0x4b38cc),_0x32b040=_0x4739e6*_0x4287ef,_0x3102d4=_0x4739e6*_0x4b38cc,_0x5d21c0=Math[_0x3bcdc9(0x951)](_0x3be22e+Math[_0x3bcdc9(0x238)](_0x3ae03a-_0x32b040,0x0)/0x2),_0x1abd99=Math[_0x3bcdc9(0x951)](_0x5ec3e5+Math['max'](_0x41cc7e-_0x3102d4,0x0)/0x2);this['contents'][_0x3bcdc9(0x67c)](_0x200dd3,_0x28566d,_0x685356,_0x4287ef,_0x4b38cc,_0x5d21c0,_0x1abd99,_0x32b040,_0x3102d4),this[_0x3bcdc9(0x79d)](!![]);},Window_InBattleStatus[_0x58cf34(0x8ef)]['drawEnemyBattler']=function(_0x6e7e6d,_0x29be18,_0xb25bd7,_0x14a6cc,_0x10dbb1){const _0xd13593=_0x58cf34;if(_0x6e7e6d[_0xd13593(0xae1)]()){this['drawItemActorSvBattler'](_0x6e7e6d,_0x29be18,_0xb25bd7+0x1,_0x14a6cc,_0x10dbb1-0x2,!![]);return;}const _0x166896=_0x6e7e6d[_0xd13593(0xb49)](),_0xf99667=$gameSystem[_0xd13593(0xc41)]()?ImageManager['loadSvEnemy'](_0x166896):ImageManager[_0xd13593(0xb9a)](_0x166896);_0xf99667[_0xd13593(0xb47)](this[_0xd13593(0xb0e)]['bind'](this,_0x6e7e6d,_0xf99667,_0x29be18,_0xb25bd7,_0x14a6cc,_0x10dbb1));},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0xb0e)]=function(_0x365edd,_0x1cc5b5,_0x2a386f,_0x487fe3,_0x122bec,_0x4b27e2){const _0x3e3e14=_0x58cf34;if(this[_0x3e3e14(0xc92)]!==_0x365edd)return;this['_enemySprite'][_0x3e3e14(0x68d)](),this[_0x3e3e14(0x947)][_0x3e3e14(0xa41)]=new Bitmap(_0x122bec,_0x4b27e2);const _0x441acd=_0x122bec,_0x1492a1=_0x4b27e2,_0x2e781b=Math[_0x3e3e14(0xa8f)](_0x441acd,_0x1492a1),_0x131fc2=this[_0x3e3e14(0x947)]['bitmap'],_0x5c2313=Math['min'](0x1,_0x2e781b/_0x1cc5b5[_0x3e3e14(0xc78)],_0x2e781b/_0x1cc5b5[_0x3e3e14(0x725)]),_0x5e1499=_0x1cc5b5[_0x3e3e14(0xc78)]*_0x5c2313,_0x243361=_0x1cc5b5[_0x3e3e14(0x725)]*_0x5c2313,_0x4b3208=Math[_0x3e3e14(0x92e)]((_0x441acd-_0x5e1499)/0x2),_0x1fd308=Math[_0x3e3e14(0x92e)]((_0x1492a1-_0x243361)/0x2);_0x131fc2[_0x3e3e14(0x67c)](_0x1cc5b5,0x0,0x0,_0x1cc5b5[_0x3e3e14(0xc78)],_0x1cc5b5[_0x3e3e14(0x725)],_0x4b3208,_0x1fd308,_0x5e1499,_0x243361),this['_enemySprite']['anchor']['x']=0.5,this[_0x3e3e14(0x947)][_0x3e3e14(0x9cc)]['y']=0x1,this[_0x3e3e14(0x947)]['x']=_0x2a386f+_0x122bec/0x2+this[_0x3e3e14(0xa80)],this[_0x3e3e14(0x947)]['y']=_0x487fe3+_0x4b27e2+this[_0x3e3e14(0xa80)],this[_0x3e3e14(0x947)][_0x3e3e14(0x6d8)](this[_0x3e3e14(0xc92)][_0x3e3e14(0xb77)]());},Window_InBattleStatus[_0x58cf34(0x8ef)]['drawActorName']=function(_0x149371,_0x52db87,_0x48805,_0x3a5484){const _0x40c538=_0x58cf34;if(_0x149371[_0x40c538(0x2d8)]())_0x3a5484=this[_0x40c538(0x6c7)]-_0x52db87;Window_StatusBase[_0x40c538(0x8ef)][_0x40c538(0x98a)]['call'](this,_0x149371,_0x52db87,_0x48805,_0x3a5484);},Window_InBattleStatus['prototype'][_0x58cf34(0x91d)]=function(_0x211def,_0x47aaf8,_0x261f19,_0x2c7195){const _0x19149e=_0x58cf34;if(!_0x211def[_0x19149e(0x40c)]())return;Window_StatusBase['prototype']['drawActorClass'][_0x19149e(0x9a4)](this,_0x211def,_0x47aaf8,_0x261f19,_0x2c7195);},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x56e)]=function(_0x927b7a,_0x44b689,_0x3b2666){const _0x56088f=_0x58cf34;if(_0x927b7a[_0x56088f(0x2d8)]()&&!Window_InBattleStatus[_0x56088f(0x6b5)][_0x56088f(0x519)])return;Window_StatusBase['prototype'][_0x56088f(0x56e)][_0x56088f(0x9a4)](this,_0x927b7a,_0x44b689,_0x3b2666);},Window_InBattleStatus[_0x58cf34(0x8ef)]['drawActorIcons']=function(_0x31901d,_0x5053d2,_0x4708b8,_0x5dd3b3){const _0x89ea1c=_0x58cf34;_0x31901d[_0x89ea1c(0x625)]=!![],Window_StatusBase[_0x89ea1c(0x8ef)][_0x89ea1c(0x456)]['call'](this,_0x31901d,_0x5053d2,_0x4708b8,_0x5dd3b3),_0x31901d[_0x89ea1c(0x625)]=undefined;},VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xc45)]=Game_BattlerBase[_0x58cf34(0x8ef)][_0x58cf34(0x2d2)],Game_BattlerBase['prototype'][_0x58cf34(0x2d2)]=function(){const _0x322ec8=_0x58cf34;if(this[_0x322ec8(0x625)])return[];return VisuMZ[_0x322ec8(0xa6b)]['Game_BattlerBase_allIconsIBS'][_0x322ec8(0x9a4)](this);},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x482)]=function(_0x5c5ce8,_0x5d0e19,_0x69d5bd,_0x3e1e6d){const _0x50eb49=_0x58cf34,_0x32ef04='actor%1-gauge-%2'[_0x50eb49(0x1d3)](_0x5c5ce8[_0x50eb49(0xc64)](),_0x5d0e19);let _0x5d5eae=![];if(_0x5c5ce8['isEnemy']()){const _0x366671=Window_InBattleStatus[_0x50eb49(0x6b5)];if(_0x5d0e19==='hp'&&_0x366671[_0x50eb49(0x8c4)])_0x5d5eae=!![];if(_0x5d0e19==='mp'&&_0x366671[_0x50eb49(0xbd6)])_0x5d5eae=!![];if(_0x5d0e19==='tp'&&_0x366671[_0x50eb49(0x352)])_0x5d5eae=!![];}const _0x32b29c=this[_0x50eb49(0x58b)](_0x32ef04,_0x5d5eae?Sprite_GaugeRate:Sprite_Gauge);_0x32b29c[_0x50eb49(0x6e1)](_0x5c5ce8,_0x5d0e19),_0x32b29c['move'](_0x69d5bd,_0x3e1e6d),_0x32b29c[_0x50eb49(0x68d)]();},Window_InBattleStatus['prototype'][_0x58cf34(0xa52)]=function(){const _0x1babf9=_0x58cf34,_0x25d097=this['_statesWindow']?this['_statesWindow'][_0x1babf9(0xc78)]:0x0;return this[_0x1babf9(0x6c7)]-_0x25d097+this[_0x1babf9(0xa80)]*0x2;},Window_InBattleStatus['prototype']['displayedParams']=function(){const _0xb137cb=_0x58cf34;return Imported[_0xb137cb(0xaa1)]?VisuMZ[_0xb137cb(0x6c2)][_0xb137cb(0xb05)][_0xb137cb(0xc0a)][_0xb137cb(0x997)]:[_0xb137cb(0x7eb),_0xb137cb(0x40d),_0xb137cb(0xb97),'DEF',_0xb137cb(0x985),_0xb137cb(0xa75),_0xb137cb(0x412),_0xb137cb(0x2a0)];},Window_InBattleStatus[_0x58cf34(0x8ef)][_0x58cf34(0x566)]=function(_0x22d539,_0x24c16b,_0x59ce4a,_0x570635){const _0x3e6873=_0x58cf34,_0x33dbb3=Window_InBattleStatus[_0x3e6873(0x6b5)],_0x330827=Imported[_0x3e6873(0xaa1)];this[_0x3e6873(0x9d7)]();let _0x2bb697='',_0x5e2a12=0x0,_0x5b1494=[_0x3e6873(0xcb6),'MAXMP',_0x3e6873(0xb97),_0x3e6873(0x4d9),'MAT',_0x3e6873(0xa75),_0x3e6873(0x412),'LUK']['indexOf'](String(_0x22d539)[_0x3e6873(0x6f5)]()['trim']());if(_0x330827)_0x2bb697=TextManager['paramName'](_0x22d539),_0x5e2a12=VisuMZ[_0x3e6873(0x913)](_0x22d539);else{if(_0x5b1494>=0x0&&_0x5b1494<0x8)_0x2bb697=TextManager[_0x3e6873(0x941)](_0x5b1494);}if(_0x5b1494>=0x0&&_0x5b1494<0x8){const _0x2c9cfb=this[_0x3e6873(0xc92)]['_buffs'][_0x5b1494];this[_0x3e6873(0xc92)][_0x3e6873(0x80e)](_0x2c9cfb,_0x5b1494)!==0x0&&(_0x5e2a12=this[_0x3e6873(0xc92)]['buffIconIndex'](_0x2c9cfb,_0x5b1494));}if(_0x2bb697){let _0x57752c=_0x3e6873(0x2d7)[_0x3e6873(0x1d3)](_0x2bb697,_0x5e2a12);_0x570635<=0xd4&&(_0x57752c=_0x3e6873(0x411)[_0x3e6873(0x1d3)](_0x2bb697));const _0x154ed9=_0x570635<=0xd4?'\x20':'\x20\x20';this[_0x3e6873(0x6cd)](_0x154ed9+_0x57752c,_0x24c16b,_0x59ce4a);}this[_0x3e6873(0x204)]();let _0x12944d='';_0x330827?_0x12944d=this[_0x3e6873(0xc92)][_0x3e6873(0x6af)](_0x22d539,!![]):_0x12944d=String(this[_0x3e6873(0xc92)][_0x3e6873(0x941)](_0x5b1494));if(this['_battler'][_0x3e6873(0x2d8)]()){let _0x3b5296=!![];if(_0x33dbb3[_0x3e6873(0xa68)])_0x3b5296=![];if(_0x33dbb3[_0x3e6873(0x345)]&&BattleManager['isBattleTest']())_0x3b5296=![];if(_0x33dbb3[_0x3e6873(0xb93)]&&$gameSystem[_0x3e6873(0x70b)]()[_0x3e6873(0x375)](this[_0x3e6873(0xc92)][_0x3e6873(0x5e6)]()))_0x3b5296=![];_0x3b5296&&(_0x12944d=_0x33dbb3[_0x3e6873(0x9ce)]);}if(_0x5b1494>=0x0&&_0x5b1494<0x8){if(this[_0x3e6873(0xc92)][_0x3e6873(0x2ff)](_0x5b1494)>0x1)_0x12944d=_0x33dbb3[_0x3e6873(0x293)][_0x3e6873(0x1d3)](_0x12944d),Imported[_0x3e6873(0x62f)]?this[_0x3e6873(0xae5)](ColorManager['buffColor']()):this[_0x3e6873(0xae5)](ColorManager[_0x3e6873(0x8ea)]());else this[_0x3e6873(0xc92)]['getParamBuffAndStateRate'](_0x5b1494)<0x1&&(_0x12944d=_0x33dbb3[_0x3e6873(0x1f8)]['format'](_0x12944d),Imported[_0x3e6873(0x62f)]?this[_0x3e6873(0xae5)](ColorManager[_0x3e6873(0x895)]()):this[_0x3e6873(0xae5)](ColorManager[_0x3e6873(0x89b)]()));}if(String(_0x12944d)){const _0x620a42=_0x570635<=0xd4?'\x20':'\x20\x20';this[_0x3e6873(0x8fb)](_0x12944d+_0x620a42,_0x24c16b,_0x59ce4a,_0x570635,_0x3e6873(0x25b));}},Window_InBattleStatus[_0x58cf34(0x8ef)]['drawDarkRect']=function(_0x53a71e,_0x317dd7,_0x3f0265,_0x483b49){const _0x316000=_0x58cf34;_0x483b49=_0x483b49||this[_0x316000(0x7b1)](),this[_0x316000(0x220)][_0x316000(0x254)]=0xa0;const _0x2d733d=ColorManager['gaugeBackColor']();this[_0x316000(0x220)][_0x316000(0x3d1)](_0x53a71e+0x1,_0x317dd7+0x1,_0x3f0265-0x2,_0x483b49-0x2,_0x2d733d),this[_0x316000(0x220)][_0x316000(0x254)]=0xff;},Game_BattlerBase['prototype'][_0x58cf34(0x2ff)]=function(_0x1f2bfa){const _0x331576=_0x58cf34;let _0x45570d=0x1;_0x45570d*=this[_0x331576(0x6cc)](_0x1f2bfa);for(const _0x495c06 of this['states']()){if(!_0x495c06)continue;for(const _0x1085a7 of _0x495c06[_0x331576(0x63c)]){if(!_0x1085a7)continue;if(_0x1085a7['code']!==Game_BattlerBase['TRAIT_PARAM'])continue;if(_0x1085a7['dataId']!==_0x1f2bfa)continue;_0x45570d*=_0x1085a7[_0x331576(0x772)];}}return _0x45570d;};function Window_InBattleStatusStates(){const _0x4b65fd=_0x58cf34;this[_0x4b65fd(0xb4e)](...arguments);}Window_InBattleStatusStates[_0x58cf34(0x8ef)]=Object[_0x58cf34(0x5fa)](Window_Command[_0x58cf34(0x8ef)]),Window_InBattleStatusStates[_0x58cf34(0x8ef)][_0x58cf34(0x408)]=Window_InBattleStatusStates,Window_InBattleStatusStates[_0x58cf34(0x6b5)]={'maxWidth':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x691)][_0x58cf34(0x98c)]??0x180,'drawStates':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x691)]['drawStates']??!![],'drawBuffs':VisuMZ[_0x58cf34(0xa6b)]['Settings']['InBattleStatus']['drawBuffs']??!![],'drawDebuffs':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x691)][_0x58cf34(0x388)]??!![],'normalIcon':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x691)]['normalIcon']??0x54,'normalText':VisuMZ[_0x58cf34(0xa6b)]['Settings'][_0x58cf34(0x691)][_0x58cf34(0x68f)]??_0x58cf34(0x5f5),'normalHelp':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x691)]['normalHelp']??_0x58cf34(0x8b7),'stateHelpFmt':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x691)]['stateHelpFmt']??'%1\x20%2','buffNameFmt':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x691)][_0x58cf34(0x8e4)]??'%1▲','buffHelpFmt':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)]['InBattleStatus']['buffHelpFmt']??_0x58cf34(0x589),'debuffNameFmt':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x691)][_0x58cf34(0xafd)]??'%1▼','debuffHelpFmt':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x691)][_0x58cf34(0xc14)]??_0x58cf34(0x327),'actionsFmt':VisuMZ['BattleCore'][_0x58cf34(0xb05)]['InBattleStatus'][_0x58cf34(0xbc7)]??_0x58cf34(0x54a),'turnsFmt':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)]['InBattleStatus']['TurnsFmt']??_0x58cf34(0xaa4),'passiveText':VisuMZ[_0x58cf34(0xa6b)][_0x58cf34(0xb05)][_0x58cf34(0x691)][_0x58cf34(0xc04)]??'\x5cC[4](Passive)'},Window_InBattleStatusStates[_0x58cf34(0x8ef)][_0x58cf34(0xb4e)]=function(_0x33385a){const _0x31a01b=_0x58cf34;this[_0x31a01b(0xc92)]=null,Window_Command[_0x31a01b(0x8ef)][_0x31a01b(0xb4e)][_0x31a01b(0x9a4)](this,_0x33385a),this[_0x31a01b(0x489)](),this['deselect'](),this[_0x31a01b(0x658)](0x2);},Window_InBattleStatusStates[_0x58cf34(0x8ef)][_0x58cf34(0x8b1)]=function(_0x6043ed){const _0x619d27=_0x58cf34;this[_0x619d27(0xc92)]=_0x6043ed||null,this[_0x619d27(0x7ff)](),this[_0x619d27(0x4d0)](0x0),this[_0x619d27(0x8fe)](0x0,0x0),this['activate']();},Window_InBattleStatusStates[_0x58cf34(0x8ef)][_0x58cf34(0x33d)]=function(){},Window_InBattleStatusStates['prototype'][_0x58cf34(0x677)]=function(){const _0x1309f9=_0x58cf34;if(!this[_0x1309f9(0xc92)])return;this[_0x1309f9(0xa33)](),this[_0x1309f9(0xbdb)](),this['addBattlerBuffsDebuffs'](),this[_0x1309f9(0x630)]();},Window_InBattleStatusStates[_0x58cf34(0x8ef)]['addBattlerAspect']=function(){const _0xd890f9=_0x58cf34;if(!this[_0xd890f9(0xc92)][_0xd890f9(0x2d8)]())return;if(!this['_battler'][_0xd890f9(0x265)]())return;const _0x2a6213=this['_battler'][_0xd890f9(0x803)]()[_0xd890f9(0xc22)],_0x1f3103=this['_battler'][_0xd890f9(0x803)]()[_0xd890f9(0x899)],_0x3d9bdb=this[_0xd890f9(0xc92)][_0xd890f9(0x803)]()[_0xd890f9(0x799)];let _0x4fcc97='';_0x3d9bdb[_0xd890f9(0xcbb)](/#(.*?)/gi)&&Imported[_0xd890f9(0x316)]?_0x4fcc97='\x5cI[%1]\x5cHEXCOLOR<%3>%2'[_0xd890f9(0x1d3)](_0x1f3103,_0x2a6213,_0x3d9bdb):_0x4fcc97=_0xd890f9(0xcda)[_0xd890f9(0x1d3)](_0x1f3103,_0x2a6213,_0x3d9bdb),this[_0xd890f9(0x9c2)](_0x4fcc97,_0xd890f9(0x3cc),!![]);},Window_InBattleStatusStates[_0x58cf34(0x8ef)][_0x58cf34(0xbdb)]=function(){const _0x2c62a1=_0x58cf34;if(!Window_InBattleStatusStates[_0x2c62a1(0x6b5)][_0x2c62a1(0x26f)])return;for(const _0xaeb48e of this['_battler'][_0x2c62a1(0x4e9)]()){if(!this['includeState'](_0xaeb48e))continue;const _0x3c75dc=this[_0x2c62a1(0xb21)](_0xaeb48e);this[_0x2c62a1(0x9c2)](_0x3c75dc,_0x2c62a1(0x4a4),!![],_0xaeb48e['id']);}},Window_InBattleStatusStates[_0x58cf34(0x8ef)][_0x58cf34(0x825)]=function(_0x3baea6){const _0xcb4559=_0x58cf34;if(!_0x3baea6)return![];if(_0x3baea6[_0xcb4559(0xc22)]['trim']()==='')return![];if(_0x3baea6[_0xcb4559(0xc22)][_0xcb4559(0x375)](_0xcb4559(0x20c)))return![];if(_0x3baea6[_0xcb4559(0x899)]<=0x0)return![];if(_0x3baea6[_0xcb4559(0x770)])return![];return!![];},Window_InBattleStatusStates['prototype'][_0x58cf34(0xb21)]=function(_0x105115){const _0x7c0fe3=_0x58cf34;let _0x508cfc=_0x105115[_0x7c0fe3(0x899)],_0x2b648a=_0x105115[_0x7c0fe3(0xc22)],_0x139b81='0';return Imported[_0x7c0fe3(0x62f)]&&Imported[_0x7c0fe3(0x316)]&&(_0x139b81=String(ColorManager[_0x7c0fe3(0x9ee)](_0x105115))),_0x139b81[_0x7c0fe3(0xcbb)](/#(.*?)/gi)?'\x5cI[%1]\x5cHEXCOLOR<%3>%2'[_0x7c0fe3(0x1d3)](_0x508cfc,_0x2b648a,_0x139b81):_0x7c0fe3(0xcda)['format'](_0x508cfc,_0x2b648a,_0x139b81);},Window_InBattleStatusStates[_0x58cf34(0x8ef)][_0x58cf34(0x686)]=function(){const _0x37da9d=_0x58cf34;for(let _0x4365ae=0x0;_0x4365ae<0x8;_0x4365ae++){const _0x3eade4=this['makeBuffName'](_0x4365ae);if(!_0x3eade4)continue;this['addCommand'](_0x3eade4,_0x37da9d(0x676),!![],_0x4365ae);}},Window_InBattleStatusStates[_0x58cf34(0x8ef)][_0x58cf34(0x2e3)]=function(_0x1139d1){const _0x18e09d=_0x58cf34;if(!this[_0x18e09d(0xc92)][_0x18e09d(0x7b3)](_0x1139d1)&&!this[_0x18e09d(0xc92)][_0x18e09d(0xa1f)](_0x1139d1))return'';const _0x122529=Window_InBattleStatusStates[_0x18e09d(0x6b5)];if(this[_0x18e09d(0xc92)]['isBuffAffected'](_0x1139d1)&&!_0x122529[_0x18e09d(0x32c)])return'';if(this[_0x18e09d(0xc92)][_0x18e09d(0xa1f)](_0x1139d1)&&!_0x122529['drawDebuffs'])return'';const _0x1815ee=this[_0x18e09d(0xc92)][_0x18e09d(0x7aa)][_0x1139d1];let _0x49c632=this[_0x18e09d(0xc92)][_0x18e09d(0x80e)](_0x1815ee,_0x1139d1),_0x15b62b=TextManager[_0x18e09d(0x941)](_0x1139d1);_0x1815ee>0x0?_0x15b62b=_0x122529['buffNameFmt']['format'](_0x15b62b):_0x15b62b=_0x122529[_0x18e09d(0xafd)][_0x18e09d(0x1d3)](_0x15b62b);let _0x3db64f=0x0;return Imported[_0x18e09d(0x62f)]&&(_0x3db64f=_0x1815ee>0x0?ColorManager[_0x18e09d(0x419)]():ColorManager[_0x18e09d(0x895)]()),String(_0x3db64f)[_0x18e09d(0xcbb)](/#(.*?)/gi)?'\x5cI[%1]\x5cHEXCOLOR<%3>%2'[_0x18e09d(0x1d3)](_0x49c632,_0x15b62b,_0x3db64f):'\x5cI[%1]\x5cC[%3]%2'[_0x18e09d(0x1d3)](_0x49c632,_0x15b62b,_0x3db64f);},Window_InBattleStatusStates[_0x58cf34(0x8ef)][_0x58cf34(0x630)]=function(){const _0x350599=_0x58cf34;if(this[_0x350599(0xaad)][_0x350599(0x3eb)]>0x0)return;const _0x1d6df1=Window_InBattleStatusStates[_0x350599(0x6b5)],_0x296be1=_0x1d6df1[_0x350599(0x5b0)],_0x427219=_0x1d6df1[_0x350599(0x68f)],_0x270df3=_0x350599(0x5c9)[_0x350599(0x1d3)](_0x296be1,_0x427219);this[_0x350599(0x9c2)](_0x270df3,_0x350599(0x669));},Window_InBattleStatusStates[_0x58cf34(0x8ef)][_0x58cf34(0x286)]=function(_0x7abe81){const _0x1c9ee9=_0x58cf34,_0x5d532d=this['itemLineRect'](_0x7abe81);this['changePaintOpacity'](0xff),this[_0x1c9ee9(0x6cd)](this[_0x1c9ee9(0x752)](_0x7abe81),_0x5d532d['x'],_0x5d532d['y']),this[_0x1c9ee9(0x663)](_0x7abe81,_0x5d532d);},Window_InBattleStatusStates[_0x58cf34(0x8ef)][_0x58cf34(0x663)]=function(_0x2a2eb1,_0xd469b4){const _0x2250b4=_0x58cf34;if(!Imported[_0x2250b4(0x62f)])return;const _0x22468d=this[_0x2250b4(0x6e5)](_0x2a2eb1),_0xba3766=_0xd469b4['x']+0x2;if(_0x22468d==='state'){const _0x3583f9=$dataStates[this[_0x2250b4(0xaad)][_0x2a2eb1][_0x2250b4(0x2f5)]||0x0];this[_0x2250b4(0x3c9)](this['_battler'],_0x3583f9,_0xba3766,_0xd469b4['y']),this[_0x2250b4(0x89e)](this['_battler'],_0x3583f9,_0xba3766,_0xd469b4['y']);}else{if(_0x22468d===_0x2250b4(0x676)){const _0x56ff25=this['_list'][_0x2a2eb1][_0x2250b4(0x2f5)];this['drawActorBuffTurns'](this['_battler'],_0x56ff25,_0xba3766,_0xd469b4['y']),this['drawActorBuffRates'](this[_0x2250b4(0xc92)],_0x56ff25,_0xba3766,_0xd469b4['y']);}}},Window_InBattleStatusStates[_0x58cf34(0x8ef)][_0x58cf34(0x4f5)]=function(){const _0x532b2b=_0x58cf34,_0x3abc79=this[_0x532b2b(0xaec)]();let _0x4d47ee='';if(_0x3abc79===_0x532b2b(0x3cc))_0x4d47ee=this[_0x532b2b(0xc92)][_0x532b2b(0x803)]()[_0x532b2b(0x3c2)];else{if(_0x3abc79===_0x532b2b(0x4a4))_0x4d47ee=this[_0x532b2b(0x294)]();else{if(_0x3abc79===_0x532b2b(0x676))_0x4d47ee=this[_0x532b2b(0x447)]();else _0x3abc79==='normal'&&(_0x4d47ee=Window_InBattleStatusStates[_0x532b2b(0x6b5)][_0x532b2b(0x944)]);}}_0x4d47ee?this[_0x532b2b(0xa32)][_0x532b2b(0xa55)](_0x4d47ee):this[_0x532b2b(0xa32)][_0x532b2b(0xcdf)]();},Window_InBattleStatusStates[_0x58cf34(0x8ef)][_0x58cf34(0x294)]=function(){const _0x34adf1=_0x58cf34,_0x337e5c=Window_InBattleStatusStates['SETTINGS'],_0x302d8f=this['currentExt']();let _0x1a11cf='';const _0x2350eb=$dataStates[_0x302d8f]||null;if(_0x2350eb){const _0x48a782=_0x337e5c['stateHelpFmt'];let _0x1f4964=_0x2350eb['statusDescription']||_0x2350eb[_0x34adf1(0x3c2)]||'';Imported[_0x34adf1(0x62f)]&&(_0x1f4964=_0x1f4964[_0x34adf1(0x1d3)](this['_battler'][_0x34adf1(0x518)](_0x302d8f)));let _0x50557d='passive';if(this['_battler']['isStateAffected'](_0x302d8f)){if(_0x2350eb[_0x34adf1(0x69b)]===0x0)_0x50557d='none';if(_0x2350eb['autoRemovalTiming']===0x1)_0x50557d='actions';if(_0x2350eb[_0x34adf1(0x69b)]===0x2)_0x50557d=_0x34adf1(0x889);}const _0x5ba1d5=this[_0x34adf1(0xc92)][_0x34adf1(0x531)][_0x302d8f]||0x0;let _0x3458fb=_0x34adf1(0xca5);Imported[_0x34adf1(0x62f)]&&Imported[_0x34adf1(0x316)]&&(_0x3458fb=ColorManager[_0x34adf1(0x9ee)](_0x2350eb),_0x3458fb[_0x34adf1(0xcbb)](/#(.*?)/gi)?_0x3458fb=_0x34adf1(0x70c)[_0x34adf1(0x1d3)](_0x3458fb):_0x3458fb=_0x34adf1(0x8c2)[_0x34adf1(0x1d3)](_0x3458fb)),_0x1a11cf=_0x48a782[_0x34adf1(0x1d3)](_0x1f4964,this[_0x34adf1(0xb25)](_0x50557d,_0x5ba1d5,_0x3458fb));}return _0x1a11cf;},Window_InBattleStatusStates[_0x58cf34(0x8ef)][_0x58cf34(0x447)]=function(){const _0x109c14=_0x58cf34,_0x41b1c8=Window_InBattleStatusStates['SETTINGS'],_0x4afd2c=this[_0x109c14(0xcb2)]();let _0x1c626a='';const _0xd31841=this['_battler'][_0x109c14(0x7b3)](_0x4afd2c),_0x286be5=_0xd31841?_0x109c14(0x43c):_0x109c14(0xc14),_0x18e269=_0x41b1c8[_0x286be5];let _0x26bea6='\x5cC[0]';Imported['VisuMZ_1_SkillsStatesCore']&&Imported[_0x109c14(0x316)]&&(_0x26bea6=_0xd31841?ColorManager[_0x109c14(0x419)]():ColorManager['debuffColor'](),_0x26bea6[_0x109c14(0xcbb)](/#(.*?)/gi)?_0x26bea6=_0x109c14(0x70c)['format'](_0x26bea6):_0x26bea6=_0x109c14(0x8c2)['format'](_0x26bea6));const _0x3a3c33=this[_0x109c14(0xc92)][_0x109c14(0x610)][_0x4afd2c]||0x0;return _0x1c626a=_0x18e269[_0x109c14(0x1d3)](TextManager['param'](_0x4afd2c),Math[_0x109c14(0x951)](this[_0x109c14(0xc92)]['paramBuffRate'](_0x4afd2c)*0x64)+'%',_0x26bea6,this[_0x109c14(0xb25)](_0x109c14(0x889),_0x3a3c33,_0x26bea6)),_0x1c626a;},Window_InBattleStatusStates['prototype'][_0x58cf34(0xb25)]=function(_0xc40fb,_0x381065,_0x2b5ef9){const _0x16e37a=_0x58cf34,_0x4856c8=Window_InBattleStatusStates[_0x16e37a(0x6b5)];let _0x1e18e1=_0x4856c8[_0x16e37a(0xc04)];if(_0xc40fb==='actions')_0x1e18e1=_0x4856c8[_0x16e37a(0xbc7)];if(_0xc40fb===_0x16e37a(0x889))_0x1e18e1=_0x4856c8[_0x16e37a(0x4fa)];if(_0xc40fb==='none')return'';return _0x1e18e1[_0x16e37a(0x1d3)](_0x381065,_0x2b5ef9);};